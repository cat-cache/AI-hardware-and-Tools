
#include <stdio.h>
#include <stdlib.h>
#include "ai-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "ai-sdk/tensorflow/lite/c/common.h"
#include "ai-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "ai-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038110420573502779, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[16*3*3*1] = { 
  /* [0][0][][] */ -89, -113, -32, 
  /* [0][1][][] */ 66, -39, 15, 
  /* [0][2][][] */ 30, 127, 18, 
  /* [1][0][][] */ 106, -94, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -24, -2, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -11, -94, -78, 
  /* [3][0][][] */ 121, 127, 59, 
  /* [3][1][][] */ 3, -20, -13, 
  /* [3][2][][] */ -99, -125, -42, 
  /* [4][0][][] */ 29, -49, 2, 
  /* [4][1][][] */ 22, -127, 0, 
  /* [4][2][][] */ 9, -86, -12, 
  /* [5][0][][] */ -64, 24, -4, 
  /* [5][1][][] */ -127, 28, 3, 
  /* [5][2][][] */ -78, 32, 8, 
  /* [6][0][][] */ -15, 80, 127, 
  /* [6][1][][] */ -48, 57, -14, 
  /* [6][2][][] */ -34, -49, -86, 
  /* [7][0][][] */ 34, 20, -25, 
  /* [7][1][][] */ 127, 69, -10, 
  /* [7][2][][] */ 27, 2, -24, 
  /* [8][0][][] */ -21, -30, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -20, 49, -11, 
  /* [9][1][][] */ -11, 127, -8, 
  /* [9][2][][] */ -3, 84, -9, 
  /* [10][0][][] */ 25, 88, 12, 
  /* [10][1][][] */ -37, -127, -29, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 8, -18, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -84, 127, -46, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -78, 78, 5, 
  /* [13][0][][] */ 82, 23, -15, 
  /* [13][1][][] */ 127, 104, -14, 
  /* [13][2][][] */ 61, 99, 24, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -80, -24, 25, 
  /* [15][1][][] */ -126, -127, 14, 
  /* [15][2][][] */ -26, -77, -4, 
};
const TfArray<4, int> tensor_dimension2 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant2_scale = { 16, { 0.060794878751039505, 0.23515231907367706, 0.062920317053794861, 0.045558419078588486, 0.010264518670737743, 0.014897302724421024, 0.040532570332288742, 0.012525261379778385, 0.056409507989883423, 0.014400847256183624, 0.12894348800182343, 0.22952884435653687, 0.15736043453216553, 0.008198385126888752, 0.16854183375835419, 0.016136748716235161, } };
const TfArray<16, int> quant2_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[16] = { 2664, -306, -62, -21, 46271, 34899, 2587, -2609, 4385, -2498, 943, -497, 3440, -23841, 71, 39127, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.0002316918398719281, 0.00089617539197206497, 0.00023979197430890054, 0.00017362505604978651, 3.9118513086577877e-05, 5.6774246331769973e-05, 0.00015447133046109229, 4.7734298277646303e-05, 0.00021497900888789445, 5.4882235417608172e-05, 0.00049140903865918517, 0.00087474408792331815, 0.00059970724396407604, 3.1244391720974818e-05, 0.00064232002478092909, 6.149782711872831e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[1*3*3*16] = { 
  /* [0][0][][] */ 3,-4,2,1,-18,11,10,16,-8,-11,1,-8,0,-6,2,-2, 9,-5,-2,1,14,-2,14,-26,-11,9,-5,92,-6,22,-1,-2, 4,-2,-2,1,3,-13,-1,12,-1,2,-5,-6,7,-5,-7,-3, 
  /* [0][1][][] */ 15,-6,2,1,127,-24,-127,-21,127,127,-2,-3,103,-24,0,-18, -127,127,127,-3,-86,-91,-11,-102,17,-105,127,127,127,127,127,127, 22,0,-4,-1,-10,127,10,-10,-4,-12,-8,-2,9,-4,-12,-10, 
  /* [0][2][][] */ 2,-3,-3,-11,-16,16,58,7,-12,-7,0,0,3,1,-6,-10, 24,-15,-5,-127,8,-16,-7,127,-6,2,2,-15,-6,-56,-8,-36, 3,-3,-2,-5,3,-5,1,-2,1,3,-5,2,3,-5,-8,-14, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.0052451919764280319, 0.0078195584937930107, 0.0065018008463084698, 0.0070501454174518585, 0.044040538370609283, 0.041467446833848953, 0.0061245099641382694, 0.027008408680558205, 0.015732044354081154, 0.057143867015838623, 0.010449391789734364, 0.0078196804970502853, 0.0039481287822127342, 0.0094892000779509544, 0.0085113337263464928, 0.026816165074706078, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[16] = { 18682, -734, 101, 3282, -1246, 242, 9914, 1663, -559, 99, -2248, 2588, 1090, -615, -200, -947, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<16, float> quant5_scale = { 16, { 0.00012341627734713256, 0.00018398961401544511, 0.00015298355720005929, 0.00016588578000664711, 0.0010362479370087385, 0.00097570463549345732, 0.00014410611765924841, 0.00063549197511747479, 0.00037016576970927417, 0.0013445615768432617, 0.00024586805375292897, 0.0001839924807427451, 9.2897149443160743e-05, 0.00022327530314214528, 0.00020026667334605008, 0.00063096859958022833, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[8*1*1*16] = { 
  /* [0][0][][] */ -10,-13,-18,-69,-21,-36,16,-19,42,5,-31,-4,109,127,-14,-99, 
  /* [1][0][][] */ 127,-56,-43,18,-45,70,-66,-38,-41,80,-36,-53,-12,2,-59,-12, 
  /* [2][0][][] */ -38,-89,37,41,44,-58,-71,-18,27,-85,22,-127,42,-23,-76,24, 
  /* [3][0][][] */ 36,14,15,20,-14,73,-52,-20,127,48,13,24,2,-16,13,18, 
  /* [4][0][][] */ -102,-36,-23,-127,-12,46,51,-123,28,-18,-49,-40,-124,32,-41,-19, 
  /* [5][0][][] */ 87,48,72,-29,45,-47,-125,-127,-17,-73,66,49,-59,52,60,-45, 
  /* [6][0][][] */ 108,41,-127,-80,31,-74,3,-91,-42,19,-119,87,88,-86,7,80, 
  /* [7][0][][] */ -127,-6,97,-28,-61,2,-1,-57,-51,59,83,-33,61,-29,34,27, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0072719226591289043, 0.010812032036483288, 0.0076792300678789616, 0.010915234684944153, 0.0090286610648036003, 0.0070003969594836235, 0.0083531774580478668, 0.012108457274734974, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data7[8] = { -7398, -3098, 11944, -10372, 24437, 7551, -8204, 11373, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 0.00017110406770370901, 0.00025440077297389507, 0.00018068776989821345, 0.00025682905106805265, 0.00021243908850010484, 0.00016471522394567728, 0.00019654535572044551, 0.00028490487602539361, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ -38,26,6,-20,-85,-38,-127,27, 
  /* [1][0][][] */ 85,-76,-46,-61,127,-85,100,23, 
  /* [2][0][][] */ -102,127,-46,-126,53,-16,-27,37, 
  /* [3][0][][] */ 54,22,95,15,97,127,124,-9, 
  /* [4][0][][] */ -61,-127,87,10,-49,-125,13,-45, 
  /* [5][0][][] */ 127,-28,71,69,-71,-11,-1,-26, 
  /* [6][0][][] */ 21,35,127,-30,40,-39,-39,28, 
  /* [7][0][][] */ 30,12,-127,-31,-37,100,94,-71, 
  /* [8][0][][] */ -4,127,-53,12,74,127,51,59, 
  /* [9][0][][] */ -15,124,-64,72,22,-127,45,127, 
  /* [10][0][][] */ 13,-127,-8,-23,-77,-111,-61,-78, 
  /* [11][0][][] */ -127,-86,112,53,-11,-65,104,64, 
  /* [12][0][][] */ -31,38,-127,74,30,-51,-81,97, 
  /* [13][0][][] */ 91,-127,92,81,7,33,34,-54, 
  /* [14][0][][] */ -29,99,-41,-127,-34,-108,-31,-68, 
  /* [15][0][][] */ 40,106,30,-20,34,-58,96,-127, 
  /* [16][0][][] */ -116,-127,-66,95,-50,18,-20,79, 
  /* [17][0][][] */ -27,-102,-127,76,-54,72,-58,83, 
  /* [18][0][][] */ -101,-66,-48,79,-9,52,-16,127, 
  /* [19][0][][] */ 64,-127,91,-118,14,-60,32,-33, 
  /* [20][0][][] */ -3,73,36,10,41,127,76,-10, 
  /* [21][0][][] */ 25,117,44,-36,39,-73,97,-127, 
  /* [22][0][][] */ 18,11,97,18,-6,127,32,-31, 
  /* [23][0][][] */ -118,-61,37,-87,106,112,-65,-127, 
  /* [24][0][][] */ -102,-92,44,-106,120,97,-47,-127, 
  /* [25][0][][] */ 127,9,-61,-10,12,33,-64,-10, 
  /* [26][0][][] */ -122,-39,-127,-21,-55,-26,17,1, 
  /* [27][0][][] */ 77,28,-2,-60,-127,-23,87,90, 
  /* [28][0][][] */ -127,-102,19,47,-80,-126,12,5, 
  /* [29][0][][] */ 127,99,54,-108,20,16,-66,-98, 
  /* [30][0][][] */ -87,-65,44,-67,77,84,-49,-127, 
  /* [31][0][][] */ 48,42,-6,127,5,-68,11,10, 
  /* [32][0][][] */ -23,127,-6,41,29,74,-12,48, 
  /* [33][0][][] */ -30,127,-69,22,22,-33,-24,-5, 
  /* [34][0][][] */ -127,-124,-33,125,-27,20,23,113, 
  /* [35][0][][] */ -50,127,-32,-9,70,98,55,65, 
  /* [36][0][][] */ 64,39,8,-55,-127,-38,109,111, 
  /* [37][0][][] */ -60,104,23,17,-127,101,-22,-100, 
  /* [38][0][][] */ 41,30,37,10,127,63,110,45, 
  /* [39][0][][] */ -26,-71,39,-28,12,42,-103,127, 
  /* [40][0][][] */ -72,-66,-74,127,-30,-5,11,62, 
  /* [41][0][][] */ 127,11,45,108,-52,-3,-4,-13, 
  /* [42][0][][] */ -47,6,-77,-127,54,-109,3,87, 
  /* [43][0][][] */ 24,-3,85,-5,38,127,85,9, 
  /* [44][0][][] */ -34,-23,-71,127,48,11,-43,-36, 
  /* [45][0][][] */ 70,127,94,-95,52,-67,7,-124, 
  /* [46][0][][] */ -36,-127,-48,31,-9,36,-63,117, 
  /* [47][0][][] */ 48,33,106,10,81,124,127,-18, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0042940950952470303, 0.0043424018658697605, 0.0027649297844618559, 0.0030771738383919001, 0.00063901313114911318, 0.0030360808596014977, 0.005715514998883009, 0.0022433300036936998, 0.003124855924397707, 0.0050565348938107491, 0.0036289973650127649, 0.0027358403895050287, 0.0021849470213055611, 0.0035290350206196308, 0.0027726630214601755, 0.0033403676934540272, 0.0024810913018882275, 0.00086928432574495673, 0.0025761087890714407, 0.003510328009724617, 0.0041468688286840916, 0.0018515668343752623, 0.0046346373856067657, 0.0032961657270789146, 0.0048668901436030865, 0.0070931822992861271, 0.0037360712885856628, 0.0092146676033735275, 0.0025744079612195492, 0.00068567163543775678, 0.003509770380333066, 0.0085665928199887276, 0.0040579200722277164, 0.0039725815877318382, 0.0028379573486745358, 0.0037366263568401337, 0.004110332578420639, 0.0062011927366256714, 0.0039362781681120396, 0.0049732113257050514, 0.0033359546214342117, 0.00311274453997612, 0.0031349672935903072, 0.0046769143082201481, 0.0039229146204888821, 0.0024079661816358566, 0.0027168791275471449, 0.0033287566620856524, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data9[48] = { 1148, -369, -343, 1172, 15200, 2005, -406, 3837, 1137, 1298, 327, 3119, 1078, 448, -1014, 457, 2811, 10434, 2949, -743, 1010, -1498, -97, 2191, -204, -723, 1283, -67, 2888, 14174, 2049, -53, 499, -45, 2383, 16, 562, -216, 1142, 1199, 1662, 2085, 173, -231, 690, 2082, 1303, -162, };
const TfArray<1, int> tensor_dimension9 = { 1, { 48 } };
const TfArray<48, float> quant9_scale = { 48, { 0.000447179249022156, 0.00045220981701277196, 0.00028793475939892232, 0.00032045127591118217, 6.6545668232720345e-05, 0.00031617193599231541, 0.00059520330978557467, 0.00023361630155704916, 0.00032541679684072733, 0.00052657834021374583, 0.00037791719660162926, 0.00028490542899817228, 0.00022753640951123089, 0.00036750728031620383, 0.0002887400914914906, 0.00034785980824381113, 0.00025837632711045444, 9.0525689302012324e-05, 0.00026827128021977842, 0.00036555918632075191, 0.00043184738024137914, 0.00019281879940535873, 0.00048264270299114287, 0.00034325668821111321, 0.00050682906294241548, 0.00073867110768333077, 0.00038906765985302627, 0.00095959869213402271, 0.00026809415430761874, 7.1404596383217722e-05, 0.00036550109507516026, 0.00089210941223427653, 0.00042258441681042314, 0.00041369741666130722, 0.00029553970671258867, 0.00038912546006031334, 0.00042804254917427897, 0.00064578093588352203, 0.00040991685818880796, 0.00051790120778605342, 0.00034740025876089931, 0.00032415555324405432, 0.00032646980253048241, 0.0004870453558396548, 0.00040852520032785833, 0.0002507612225599587, 0.00028293085051700473, 0.00034665066050365567, } };
const TfArray<48, int> quant9_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data10[1*3*3*48] = { 
  /* [0][0][][] */ -47,-81,-17,-17,127,-64,66,-68,-84,-76,-20,-52,116,34,66,-127,51,-14,0,-48,-106,124,8,21,-33,72,46,-26,85,-68,16,-44,-104,-59,45,72,10,68,115,-63,-125,-20,37,72,46,-123,81,90, -80,-93,-73,62,-89,113,69,-74,-65,30,67,-113,127,94,74,-85,-73,-75,29,-57,-116,122,-73,113,-81,94,82,-127,99,-42,12,-113,-52,-64,81,127,107,98,127,-59,-127,-63,59,95,85,127,84,73, 4,-33,-65,107,-47,-32,15,-12,81,24,49,-82,27,64,-41,-4,-79,-23,30,-50,-41,25,-93,-4,-65,45,17,-81,34,55,108,-83,16,9,-8,37,92,74,48,-2,-25,97,62,35,35,32,12,-120, 
  /* [0][1][][] */ -94,-57,-26,-80,-80,-88,83,-121,-127,-127,72,-68,108,51,-125,-79,127,-127,-61,-74,-118,121,-54,16,-24,91,89,-31,-106,-71,4,-52,-93,-127,-127,68,39,94,0,-91,56,-20,63,108,91,121,125,-127, -118,-127,-127,-109,-18,127,127,-127,77,61,127,-127,115,127,61,-103,48,-95,-127,-127,-127,127,-127,127,-127,127,127,-123,-127,127,-10,-127,-127,-102,50,117,127,127,-11,-127,98,-111,127,127,127,6,127,112, -33,-67,-103,127,81,-51,41,-32,63,25,24,-71,23,66,67,-60,-24,3,-20,-46,-37,38,-71,-4,-112,44,31,-85,-48,39,127,-87,-64,8,64,62,91,70,-23,-40,43,127,88,14,47,-45,18,23, 
  /* [0][2][][] */ -119,-43,2,17,-39,-32,18,-52,11,-45,20,-39,-3,24,-51,-7,-69,-19,94,-14,-27,53,-59,-9,5,45,55,-18,39,56,-4,-8,-16,-67,-42,31,8,9,-65,-35,17,-6,30,32,20,57,18,-61, -127,-48,-46,-83,94,44,46,-58,81,15,-37,-73,-15,46,-127,-65,41,3,55,-63,-57,5,-69,62,-66,47,72,-38,38,12,-22,-35,-75,-25,-63,48,26,13,-118,-65,23,-46,88,62,43,-106,28,5, -53,-35,-53,-30,-21,-18,5,-19,-70,9,-9,-28,-6,12,41,-38,27,38,-3,-56,-35,10,-6,-29,-34,10,23,-23,4,-62,45,-29,-86,11,20,45,30,22,-63,-25,6,44,31,17,10,-12,14,41, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0037293352652341127, 0.0052988659590482712, 0.0074823880568146706, 0.0054071829654276371, 0.027867114171385765, 0.0091765616089105606, 0.0068070092238485813, 0.0033681977074593306, 0.0054513197392225266, 0.0044019692577421665, 0.0032143997959792614, 0.0019176966743543744, 0.0035760886967182159, 0.0028454824350774288, 0.00968158058822155, 0.0088406093418598175, 0.0049657342024147511, 0.015332379378378391, 0.0050527653656899929, 0.0070271110162138939, 0.0045477091334760189, 0.01869373582303524, 0.005873494315892458, 0.010573829524219036, 0.0058116456493735313, 0.0028526855167001486, 0.0027454469818621874, 0.0042784279212355614, 0.0069614010863006115, 0.035588677972555161, 0.012211943976581097, 0.0035487343557178974, 0.0039330176077783108, 0.0075722304172813892, 0.0061877989210188389, 0.0024692479055374861, 0.0045439698733389378, 0.0027400883845984936, 0.0049152066931128502, 0.0034617597702890635, 0.0057257567532360554, 0.0082624917849898338, 0.0034054373390972614, 0.0039245747029781342, 0.0035041738301515579, 0.011164221912622452, 0.0030524146277457476, 0.0069405818358063698, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data11[48] = { 13950, 6264, 5361, -319, -275, 163, -839, 37031, 105, 3127, 6216, 64810, 1700, 2772, 465, 11076, -1317, 12922, 1044, 6801, 14688, 456, 4386, -10380, 11503, 2483, 848, 13431, -482, -2206, -9573, 10579, 4377, 2474, -857, 6753, -9610, 4196, -637, 17594, -659, -55, 3183, 405, 204, -2195, 1139, -821, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 8.7749067461118102e-05, 0.00012467919441405684, 0.00017605618631932884, 0.00012722783139906824, 0.00065569684375077486, 0.00021591910626739264, 0.00016016492736525834, 7.9251709394156933e-05, 0.00012826634338125587, 0.00010357575229136273, 7.5632939115166664e-05, 4.5122276787878945e-05, 8.4143262938596308e-05, 6.6952532506547868e-05, 0.00022780189465265721, 0.00020801434584427625, 0.00011684080527629703, 0.00036076188553124666, 0.00011888860171893612, 0.00016534379392396659, 0.00010700492566684261, 0.0004398526216391474, 0.00013819987361785024, 0.00024879598640836775, 0.00013674460933543742, 6.7122011387255043e-05, 6.4598752942401916e-05, 0.00010066889080917463, 0.00016379768203478307, 0.00083738064859062433, 0.00028733987710438669, 8.3499631728045642e-05, 9.2541595222428441e-05, 0.00017817012849263847, 0.00014559527335222811, 5.8099951274925843e-05, 0.00010691693751141429, 6.4472667872905731e-05, 0.00011565192107809708, 8.1453174061607569e-05, 0.00013472369755618274, 0.00019441157928667963, 8.0127938417717814e-05, 9.2342932475730777e-05, 8.2451151683926582e-05, 0.00026268759393133223, 7.1821523306425661e-05, 0.00016330780636053532, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data12[8*1*1*48] = { 
  /* [0][0][][] */ -45,0,35,9,-34,-17,9,9,-40,-6,-69,-58,-24,-67,-7,-34,48,-42,41,41,-16,34,-38,11,2,-39,58,-17,-4,-21,17,9,84,39,38,-127,14,-2,-16,-36,11,-16,45,49,37,5,29,2, 
  /* [1][0][][] */ -5,37,66,-26,-12,46,-47,-26,2,25,-22,-95,14,84,-17,58,-24,20,-22,-65,9,-82,-31,25,-77,-16,-6,-115,-30,-11,38,-50,50,76,-49,11,127,-32,-3,48,-28,46,-86,-33,114,-23,-36,-36, 
  /* [2][0][][] */ -5,-24,-60,16,-4,44,24,1,-7,41,-4,26,66,-91,21,-58,33,-88,22,26,-24,47,-8,28,-20,56,-20,-70,19,2,16,-66,-48,-87,35,-30,99,27,-10,-58,1,30,78,25,127,13,22,21, 
  /* [3][0][][] */ -4,24,-68,41,16,-37,-69,-103,13,-19,-35,1,7,28,32,79,-3,13,-34,20,2,-94,26,-61,-69,-7,127,-15,-48,4,-64,15,-2,-80,14,-11,-18,-37,-19,99,-42,-33,-2,20,40,8,-36,44, 
  /* [4][0][][] */ -28,-50,-8,9,33,-27,-13,-11,30,-30,60,-75,4,31,10,9,-15,-23,11,-13,-2,-53,4,-18,17,-9,42,48,35,20,-15,29,-14,-7,-1,-3,-70,85,33,-23,34,-17,-18,-25,-75,12,127,10, 
  /* [5][0][][] */ 44,-18,1,14,29,-44,38,-127,28,-27,-12,122,-82,71,25,-69,-10,-87,18,4,-34,72,-34,-45,-61,83,-27,7,-27,55,-42,-36,25,53,32,-3,-38,-9,-48,-47,18,-39,-49,-6,-35,54,94,21, 
  /* [6][0][][] */ 58,-26,19,-12,-38,-20,-37,21,-40,8,-40,127,-44,-38,-2,55,9,48,14,38,42,-84,-20,25,21,38,-65,8,11,-43,16,40,7,20,-19,0,12,-2,-5,-3,-10,-17,44,57,-4,-35,72,-12, 
  /* [7][0][][] */ -30,8,-3,67,31,35,4,30,24,2,71,-5,123,111,64,52,47,43,-12,2,24,-21,-85,-22,16,-3,-28,62,31,-26,-36,-21,41,13,42,-94,-79,40,40,52,-31,37,84,127,-58,-32,-106,66, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant12_scale = { 8, { 0.0099112680181860924, 0.0059465477243065834, 0.00635561253875494, 0.0055168988183140755, 0.0087523376569151878, 0.0065115746110677719, 0.0085462303832173347, 0.0054987813346087933, } };
const TfArray<8, int> quant12_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data13[8] = { 7559, 16605, -4926, 7420, -1002, 3492, -12121, -19174, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<8, float> quant13_scale = { 8, { 0.00023320631589740515, 0.00013991877494845539, 0.00014954383368603885, 0.0001298093848163262, 0.00020593736553564668, 0.00015321352111641318, 0.00020108777971472591, 0.00012938308645971119, } };
const TfArray<8, int> quant13_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ 82,127,-80,-103,17,99,20,82, 
  /* [1][0][][] */ 54,-83,53,-127,-52,82,-90,-40, 
  /* [2][0][][] */ -33,127,120,50,111,-4,43,7, 
  /* [3][0][][] */ 92,52,-99,56,-19,-95,-127,-26, 
  /* [4][0][][] */ -49,43,12,-72,-46,111,127,45, 
  /* [5][0][][] */ 27,79,-127,-85,40,88,29,-29, 
  /* [6][0][][] */ 3,127,71,48,72,5,5,-85, 
  /* [7][0][][] */ 127,-25,-32,31,27,10,106,19, 
  /* [8][0][][] */ 68,127,61,104,124,87,115,-101, 
  /* [9][0][][] */ 58,95,-127,-99,13,87,-1,61, 
  /* [10][0][][] */ -67,-43,20,-50,-3,-32,-40,127, 
  /* [11][0][][] */ 14,-103,-127,-12,26,-13,47,-2, 
  /* [12][0][][] */ -7,-113,-109,-15,-127,34,-40,65, 
  /* [13][0][][] */ -7,7,-106,98,-127,-26,-3,-19, 
  /* [14][0][][] */ -66,-50,-127,-8,35,-2,-16,-59, 
  /* [15][0][][] */ 16,-97,-127,17,-109,-26,-31,-14, 
  /* [16][0][][] */ 127,-67,-15,60,-76,21,25,98, 
  /* [17][0][][] */ -30,105,127,-27,-46,-7,-25,-18, 
  /* [18][0][][] */ 18,-127,35,65,2,-60,59,-72, 
  /* [19][0][][] */ 127,-44,-61,35,-108,10,42,95, 
  /* [20][0][][] */ -26,-127,82,76,-14,-87,-2,-72, 
  /* [21][0][][] */ 0,-73,-19,-45,127,-10,53,19, 
  /* [22][0][][] */ -127,27,-75,39,48,52,-90,-101, 
  /* [23][0][][] */ -86,-58,60,-1,-111,127,105,-55, 
  /* [24][0][][] */ -34,42,-8,-44,-39,127,123,3, 
  /* [25][0][][] */ -39,-85,-127,-59,-48,-14,-30,-34, 
  /* [26][0][][] */ -13,67,-15,127,-97,34,-52,2, 
  /* [27][0][][] */ 18,-127,35,78,11,-54,4,-123, 
  /* [28][0][][] */ 32,127,58,32,126,-20,16,-57, 
  /* [29][0][][] */ 113,33,-34,0,97,-127,-118,40, 
  /* [30][0][][] */ 21,-1,35,-127,24,-28,21,-18, 
  /* [31][0][][] */ 44,-38,6,60,-11,32,12,127, 
  /* [32][0][][] */ -96,-78,15,-76,-61,127,71,113, 
  /* [33][0][][] */ -32,48,46,-42,40,127,-116,77, 
  /* [34][0][][] */ 20,127,-73,-54,38,58,-65,66, 
  /* [35][0][][] */ 24,-127,37,60,-32,-61,42,-71, 
  /* [36][0][][] */ -18,-32,-77,-8,-127,-54,-18,18, 
  /* [37][0][][] */ -48,-127,75,95,-35,-97,-18,-44, 
  /* [38][0][][] */ -74,29,68,-73,-127,-90,-64,87, 
  /* [39][0][][] */ 65,-127,84,46,-14,-63,-18,-75, 
  /* [40][0][][] */ -3,63,21,43,-127,-8,-57,26, 
  /* [41][0][][] */ 114,127,-86,-120,51,15,-4,11, 
  /* [42][0][][] */ -13,-32,-18,17,127,16,50,23, 
  /* [43][0][][] */ 127,20,78,26,-70,-26,68,98, 
  /* [44][0][][] */ 92,21,-22,23,84,-117,-127,21, 
  /* [45][0][][] */ 52,8,20,21,76,-127,-1,-38, 
  /* [46][0][][] */ 57,-36,-6,127,43,61,23,76, 
  /* [47][0][][] */ -78,-87,50,72,-48,6,127,-67, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.0024672457948327065, 0.0028112346772104502, 0.0010405764915049076, 0.0030267755500972271, 0.0033372160978615284, 0.0031165971886366606, 0.0022050251718610525, 0.00096053932793438435, 0.0018923219759017229, 0.0030572055839002132, 0.003762225853279233, 0.0034644585102796555, 0.00079590489622205496, 0.0032950753811746836, 0.0036869682371616364, 0.00082832342013716698, 0.0040445090271532536, 0.0033312500454485416, 0.00377495470456779, 0.00283467723056674, 0.0026072775945067406, 0.0027068951167166233, 0.0046339118853211403, 0.00063922477420419455, 0.0020624781027436256, 0.0025407662615180016, 0.0011139957932755351, 0.0033406708389520645, 0.0020320925395935774, 0.0019776122644543648, 0.0072816065512597561, 0.0050400714389979839, 0.0042385128326714039, 0.0028237923979759216, 0.0036472666542977095, 0.0037049523089081049, 0.0028992109000682831, 0.0035078446380794048, 0.0032687138300389051, 0.0028314115479588509, 0.0026254246477037668, 0.0029404524248093367, 0.0026835741009563208, 0.0023001439403742552, 0.0022851023823022842, 0.0036366288550198078, 0.0040264581330120564, 0.0019329849164932966, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data15[48] = { 3528, 3893, 12634, 1344, 2070, -1868, 5138, 13513, 4439, -908, 3019, -1910, 17319, -2044, 1665, 17488, -420, 1750, 118, 2929, 3605, 3879, 488, 23685, 5495, 3050, 12549, 1718, 5531, 5345, 545, 1109, 612, 2031, -225, 346, -2609, -603, 2458, 2668, 4160, 2330, 4267, 4994, 4515, 2788, 2136, 5783, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00018066186748910695, 0.00020585014135576785, 7.6195283327251673e-05, 0.00022163293033372611, 0.00024436466628685594, 0.00022821004677098244, 0.00016146099369507283, 7.0334630436263978e-05, 0.00013856358418706805, 0.0002238611486973241, 0.00027548562502488494, 0.00025368187925778329, 5.8279423683416098e-05, 0.00024127894721459597, 0.0002699749602470547, 6.0653241234831512e-05, 0.00029615554376505315, 0.00024392780323978513, 0.00027641767519526184, 0.00020756669982802123, 0.00019091556896455586, 0.00019820997840724885, 0.00033931405050680041, 4.6806660975562409e-05, 0.00015102310862857848, 0.00018604533397592604, 8.1571342889219522e-05, 0.00024461763678118587, 0.00014879816444590688, 0.00014480888785328716, 0.00053318910067901015, 0.00036905473098158836, 0.00031036129803396761, 0.00020676967687904835, 0.00026706783683039248, 0.00027129182126373053, 0.00021229212870821357, 0.00025685879518277943, 0.00023934865021146834, 0.0002073275827569887, 0.00019224437710363418, 0.00021531200036406517, 0.0001965023111552, 0.00016842597688082606, 0.00016732457152102143, 0.00026628890191204846, 0.00029483379330486059, 0.00014154109521768987, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data16[1*3*3*48] = { 
  /* [0][0][][] */ 12,-42,8,10,-21,-107,-33,65,-32,-9,-8,15,38,4,-16,2,98,19,30,6,3,-25,-65,19,-1,-15,0,-28,-66,71,-10,-113,50,-7,-49,-55,-4,-36,10,-4,-15,34,7,5,-10,77,127,-24, -127,-91,-24,127,-71,68,-88,127,20,7,19,0,44,30,-4,-44,-31,46,31,1,12,127,16,127,127,-34,-46,43,71,-127,-7,-76,66,-8,-41,-127,27,13,-59,-58,-127,-2,-103,-127,33,68,51,122, -16,9,11,5,-28,32,45,50,-2,-44,-1,4,-28,8,-4,8,-59,28,-73,-26,-5,-35,127,23,-57,0,5,8,20,37,14,4,-4,-19,-40,69,4,6,17,75,26,-25,21,-33,-9,38,-20,-16, 
  /* [0][1][][] */ -8,-15,-29,5,28,-120,127,-79,-11,9,27,38,127,19,-1,-35,-17,-29,24,48,56,-73,42,10,-64,127,-71,-22,127,-98,35,-127,-45,3,-51,14,12,-69,-41,12,118,127,16,-118,-63,-49,-1,85, 91,-127,127,5,127,75,-61,-52,36,127,127,-127,-99,127,127,127,127,127,127,127,127,117,6,1,112,-103,-127,111,36,126,127,-3,-127,127,127,113,-127,127,-127,-114,40,43,-127,-39,127,-127,-14,88, 16,50,-39,-3,-58,127,-104,87,98,-82,12,65,-45,17,7,-62,20,3,-125,23,25,-121,-34,-4,66,-15,-23,127,-76,-39,34,-36,-28,13,86,-26,31,-1,0,-76,112,-5,36,45,-55,98,91,-83, 
  /* [0][2][][] */ 0,29,5,-26,-4,-56,-10,10,11,6,-6,2,-8,-16,-3,-1,-46,20,1,-41,-7,-32,82,-12,-111,4,51,-27,10,1,3,25,-17,-13,-57,26,0,-17,14,52,-29,-12,12,7,-17,25,-11,1, 41,-20,-36,-32,24,38,120,-67,127,-38,-4,9,-67,-25,-24,-71,-16,117,-3,28,9,31,-25,-33,-77,63,80,-8,-103,11,-32,-23,-16,-5,-18,-1,51,-29,2,127,-118,-18,-5,50,31,61,9,-127, -14,33,4,-15,-21,-8,0,-25,-24,-28,-15,9,14,-16,-15,17,46,46,-40,-12,1,-27,-48,-13,22,-24,23,-7,-18,1,-9,7,36,-18,-21,-52,-6,9,28,36,-12,-16,11,7,-12,18,57,-52, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.011767174117267132, 0.0079574054107069969, 0.029958218336105347, 0.0099308472126722336, 0.0094552887603640556, 0.012672103010118008, 0.010509981773793697, 0.013336108066141605, 0.0044457451440393925, 0.014678562991321087, 0.010102266445755959, 0.051964271813631058, 0.019747152924537659, 0.028488978743553162, 0.017948025837540627, 0.025198327377438545, 0.0064536156132817268, 0.0027783988043665886, 0.011533203534781933, 0.014942508190870285, 0.010042905807495117, 0.011842519976198673, 0.0032869512215256691, 0.019385557621717453, 0.0073785698041319847, 0.014610269106924534, 0.020777085795998573, 0.0082174958661198616, 0.0093697449192404747, 0.015823161229491234, 0.0060714129358530045, 0.0047157644294202328, 0.0056067514233291149, 0.010009936057031155, 0.0079344911500811577, 0.012102124281227589, 0.05709553137421608, 0.017596589401364326, 0.0064662555232644081, 0.0067214197479188442, 0.0074830297380685806, 0.0066855871118605137, 0.014372126199305058, 0.0093667134642601013, 0.019465148448944092, 0.0034219573717564344, 0.0028308446053415537, 0.008241262286901474, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data17[48] = { 140, 8304, -379, -1099, 1453, -1318, 134, -4443, -4210, 560, -5727, -164, 1118, -674, -1778, 4338, 7934, 2983, 368, -4465, -6775, 1273, 19217, -4429, -1272, -368, 4555, -6276, -429, 590, -8139, 10445, 5344, 155, 2589, 583, -1, -322, 9640, -1615, 6070, -2115, 3352, 6261, -1099, 8701, -420, 382, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00027687469264492393, 0.00018723307584878057, 0.00070489925565198064, 0.00023366700042970479, 0.00022247739252634346, 0.00029816714231856167, 0.00024729370488785207, 0.00031379077699966729, 0.00010460577323101461, 0.00034537794999778271, 0.00023770039842929691, 0.001222688821144402, 0.00046463889884762466, 0.00067032891092821956, 0.00042230650433339179, 0.00059290183708071709, 0.00015184978838078678, 6.537409353768453e-05, 0.00027136949938721955, 0.00035158844548277557, 0.0002363036765018478, 0.0002786475233733654, 7.7340031566563994e-05, 0.0004561307723633945, 0.00017361341451760381, 0.00034377104020677507, 0.00048887263983488083, 0.0001933528546942398, 0.00022046458616387099, 0.000372309674276039, 0.0001428567775292322, 0.00011095916852355003, 0.00013192355982027948, 0.00023552791390102357, 0.00018669391283765435, 0.00028475586441345513, 0.0013434243155643344, 0.00041403740760870278, 0.00015214718587230891, 0.00015815105871297419, 0.00017607129120733589, 0.00015730793529655784, 0.00033816767972894013, 0.00022039326722733676, 0.00045800348743796349, 8.051664917729795e-05, 6.6608110500965267e-05, 0.00019391205569263548, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data18[8*1*1*48] = { 
  /* [0][0][][] */ -38,-55,-21,-61,-2,-11,93,79,-98,-84,-38,2,-53,1,-60,31,-79,8,16,127,60,-26,16,91,69,70,28,5,-89,-58,-81,-57,-50,96,31,-51,26,-28,92,-2,23,11,2,-104,41,-31,-32,-78, 
  /* [1][0][][] */ -11,52,-23,-26,-77,62,-23,-54,-37,64,-21,21,49,45,-50,-1,-25,-119,82,-52,127,8,-64,23,56,-3,-80,57,30,-14,69,37,-37,-22,4,-16,1,105,-17,-34,64,40,-3,12,108,19,-36,60, 
  /* [2][0][][] */ -27,-37,115,6,82,-39,-12,26,-35,-4,-15,49,10,-46,-50,-127,-56,-103,-22,15,-96,24,-39,-37,-51,17,-6,-48,-43,3,-31,-10,0,-7,31,-8,23,-32,-49,4,34,-34,30,-50,-40,-46,-66,-51, 
  /* [3][0][][] */ 56,17,69,10,15,-34,28,62,-51,-26,46,-25,-67,57,-9,56,64,35,-35,31,-111,-72,127,2,9,6,-59,-41,-47,63,107,-63,2,-109,-28,43,-6,-77,-22,74,-85,-54,69,4,-99,-77,55,-1, 
  /* [4][0][][] */ 18,-21,70,-29,5,-12,-1,-6,-56,-6,-20,5,49,-78,41,-91,40,48,-4,-35,11,33,14,12,2,6,62,-16,20,26,-127,-13,-24,-17,3,13,42,-6,35,-2,-39,-10,-69,24,-17,-99,1,21, 
  /* [5][0][][] */ 26,-45,64,27,33,18,19,2,-74,-6,-46,32,36,8,14,-42,95,76,-1,-14,88,-59,127,-86,-14,47,-2,46,14,15,-39,-50,-21,-43,-41,15,47,29,66,3,-80,26,36,30,53,-21,80,-1, 
  /* [6][0][][] */ -53,56,-127,92,53,27,42,22,-25,-5,68,-77,-98,-23,-28,30,-117,29,-4,103,30,46,-87,-96,0,-25,30,78,-35,-41,-42,13,34,73,-44,-16,-16,-5,81,12,73,64,-124,-50,-36,123,-60,-35, 
  /* [7][0][][] */ 34,72,-80,14,16,56,122,74,44,81,-101,-8,-38,10,-72,-50,27,36,109,99,84,5,127,31,104,101,-56,103,-68,33,1,-67,27,-66,-18,16,3,100,-59,79,-56,54,-9,-81,79,-29,56,-44, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant18_scale = { 8, { 0.0037317993119359016, 0.0047053978778421879, 0.0057537290267646313, 0.0044947471469640732, 0.0051021943800151348, 0.0049540814943611622, 0.0032646425534039736, 0.0035179045516997576, } };
const TfArray<8, int> quant18_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data19[8] = { 2356, 1452, 24066, -4570, 4882, -15558, 1232, -15571, };
const TfArray<1, int> tensor_dimension19 = { 1, { 8 } };
const TfArray<8, float> quant19_scale = { 8, { 8.7807042291387916e-05, 0.00011071524932049215, 0.00013538186613004655, 0.00010575875785434619, 0.00012005163443973288, 0.00011656662536552176, 7.6815122156403959e-05, 8.2774226029869169e-05, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 87,21,127,-41,65,95,-74,-43, 
  /* [1][0][][] */ 6,-91,-127,5,59,29,23,-4, 
  /* [2][0][][] */ -127,0,-41,-26,48,26,-77,-35, 
  /* [3][0][][] */ 45,75,127,-86,-16,-117,-11,-20, 
  /* [4][0][][] */ -127,23,-52,-34,37,6,-37,-53, 
  /* [5][0][][] */ -93,17,-43,-6,7,38,-74,-127, 
  /* [6][0][][] */ -40,-127,-108,34,96,15,10,43, 
  /* [7][0][][] */ -62,-127,-88,-84,-74,-75,15,84, 
  /* [8][0][][] */ 93,30,-9,-4,86,-90,-127,7, 
  /* [9][0][][] */ -41,57,-56,89,-62,-43,127,-29, 
  /* [10][0][][] */ -17,126,37,63,127,-23,-13,60, 
  /* [11][0][][] */ -72,-35,-16,-12,-79,90,127,1, 
  /* [12][0][][] */ 66,33,-127,33,-11,-35,-70,-16, 
  /* [13][0][][] */ 68,-27,-73,12,14,-127,-32,-16, 
  /* [14][0][][] */ -1,-81,68,4,127,-123,-61,13, 
  /* [15][0][][] */ -43,-42,-1,127,66,85,-75,32, 
  /* [16][0][][] */ 106,29,-23,17,75,-92,-127,-18, 
  /* [17][0][][] */ 54,127,53,68,41,55,23,-88, 
  /* [18][0][][] */ 44,-12,-2,-13,127,0,20,-10, 
  /* [19][0][][] */ 14,127,31,12,-117,14,24,-30, 
  /* [20][0][][] */ -37,15,59,-127,26,35,-18,101, 
  /* [21][0][][] */ -35,79,37,-127,20,40,-3,114, 
  /* [22][0][][] */ -78,-73,-93,18,-124,127,119,-23, 
  /* [23][0][][] */ 112,42,-127,20,19,-47,-78,-15, 
  /* [24][0][][] */ -44,39,5,5,-16,70,-127,105, 
  /* [25][0][][] */ -105,-55,-127,11,-63,-73,69,94, 
  /* [26][0][][] */ 48,-10,-38,-34,100,-14,127,-35, 
  /* [27][0][][] */ 127,-66,28,86,8,37,-26,90, 
  /* [28][0][][] */ 31,53,50,-20,127,-44,46,-24, 
  /* [29][0][][] */ -11,-11,-20,-44,-61,13,127,-25, 
  /* [30][0][][] */ 35,-127,-53,-66,-106,14,14,-50, 
  /* [31][0][][] */ 10,28,-7,-12,-127,5,-27,-10, 
  /* [32][0][][] */ 48,-69,-66,81,-3,-92,125,-127, 
  /* [33][0][][] */ 58,127,49,24,64,-21,-33,-21, 
  /* [34][0][][] */ -125,-25,127,-2,-22,103,89,9, 
  /* [35][0][][] */ -31,79,127,-13,-61,-75,-35,27, 
  /* [36][0][][] */ -96,8,103,-25,-13,127,78,22, 
  /* [37][0][][] */ -17,-81,-5,-127,-48,-86,73,43, 
  /* [38][0][][] */ 45,-13,92,-57,57,63,-127,13, 
  /* [39][0][][] */ -10,95,-127,-44,-19,5,26,93, 
  /* [40][0][][] */ 61,-48,17,29,2,0,5,127, 
  /* [41][0][][] */ -27,96,127,-21,40,77,-79,29, 
  /* [42][0][][] */ 68,-127,-113,-21,-125,8,6,-86, 
  /* [43][0][][] */ -8,-102,28,-76,127,-55,23,38, 
  /* [44][0][][] */ -1,117,127,17,4,50,-68,4, 
  /* [45][0][][] */ -32,37,9,70,-116,59,-127,15, 
  /* [46][0][][] */ -41,-40,61,48,-127,-120,-34,-5, 
  /* [47][0][][] */ -13,53,41,-97,-127,30,-16,54, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0023619313724339008, 0.0033992412500083447, 0.0031363631132990122, 0.0025941855274140835, 0.002039778046309948, 0.002166330348700285, 0.0021954390686005354, 0.0017782750073820353, 0.003133303252980113, 0.0030025925952941179, 0.0024628171231597662, 0.0022089306730777025, 0.00415774155408144, 0.0034885185305029154, 0.0029579319525510073, 0.001716773840598762, 0.0032423126976937056, 0.0029501847457140684, 0.0018043663585558534, 0.0031738942489027977, 0.0035778917372226715, 0.0029099991079419851, 0.0024050753563642502, 0.002267560688778758, 0.0026780292391777039, 0.0025863850023597479, 0.0034251043107360601, 0.0026457107160240412, 0.0014849184080958366, 0.0032550930045545101, 0.0022858986631035805, 0.0019472195999696851, 0.0022667213343083858, 0.0024842564016580582, 0.0026846725959330797, 0.0030952042434364557, 0.0028796494007110596, 0.0026822483632713556, 0.0022496029268950224, 0.002130195265635848, 0.0028708854224532843, 0.0011935316724702716, 0.0016110163414850831, 0.0029050623998045921, 0.0014587013283744454, 0.0033050940837711096, 0.0022679783869534731, 0.0030098727438598871, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data21[48] = { 2273, -1331, 674, -1970, 4549, -992, 3900, -3628, 1227, 504, 1816, 4191, 249, -388, 719, 5147, -1503, 3011, 5678, 823, -916, 2345, -898, 3996, 1905, 1740, 1143, -1212, 7221, -582, 2402, -1834, -650, 3697, -1174, 1990, 1656, 1213, 455, 4500, 2119, 8494, -3877, 1595, 6970, -3, 2906, 2246, };
const TfArray<1, int> tensor_dimension21 = { 1, { 48 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00020509937894530594, 0.00029517465736716986, 0.00027234750450588763, 0.00022526727116201073, 0.00017712505359668285, 0.00018811426707543433, 0.00019064194930251688, 0.0001544173137517646, 0.00027208181563764811, 0.0002607314963825047, 0.00021385983563959599, 0.00019181349489372224, 0.00036103936145082116, 0.00030292707378976047, 0.00025685335276648402, 0.0001490768336225301, 0.00028154769097454846, 0.00025618061772547662, 0.00015668297419324517, 0.00027560655144043267, 0.00031068784301169217, 0.00025269109755754471, 0.00020884579862467945, 0.00019690465705934912, 0.000232547870837152, 0.00022458990861196071, 0.00029742048354819417, 0.00022974149032961577, 0.0001289435604121536, 0.00028265747823752463, 0.00019849704403895885, 0.00016908769612200558, 0.00019683176651597023, 0.00021572152036242187, 0.00023312475241255015, 0.00026877346681430936, 0.0002500556583981961, 0.0002329142444068566, 0.00019534528837539256, 0.00018497646669857204, 0.00024929462233558297, 0.00010364086483605206, 0.00013989333820063621, 0.00025226239813491702, 0.00012666698603425175, 0.00028699933318421245, 0.00019694092043209821, 0.00026136366068385541, } };
const TfArray<48, int> quant21_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data22[1*3*3*48] = { 
  /* [0][0][][] */ -71,47,-127,99,-93,68,-62,66,-99,-52,49,-48,71,-85,-54,-59,68,85,86,-111,82,-99,86,-88,-100,-45,67,127,-90,-50,-94,38,86,-89,51,-125,-66,-108,94,-73,-30,-79,127,-105,98,61,-86,-73, -93,77,-55,106,-75,124,-51,74,-127,-83,79,-82,85,-122,-57,-88,101,112,127,-127,91,-121,112,-127,-116,-85,81,123,34,-55,-127,104,116,-127,80,-103,-83,-114,112,-76,-87,98,126,-127,-52,127,-81,-101, -37,30,-15,20,-13,63,-14,-3,-76,-46,41,-39,46,-67,-25,-14,53,47,69,-33,45,-78,47,-53,-81,-38,32,28,118,-11,-53,49,29,-79,31,-28,-17,-49,41,-63,-103,-21,33,-52,-89,81,-43,-53, 
  /* [0][1][][] */ -111,65,-87,122,-94,118,-115,87,-95,-84,75,-93,82,-112,-65,-87,99,78,-69,-96,112,-104,91,-83,-104,-77,102,116,-127,-99,-82,6,96,23,73,-100,-100,-127,100,-98,-99,-79,84,-112,127,74,-109,-82, -127,127,-125,127,-127,127,-127,127,-120,-127,127,-127,127,-127,-127,-127,127,127,-82,-116,127,-127,127,-111,-117,-127,127,117,36,-127,-124,127,127,38,127,-127,-127,-95,127,-127,-127,127,102,-118,-88,118,-127,-127, -52,62,-108,36,-58,46,-52,84,-72,-35,65,-66,73,-69,-53,-14,83,64,-53,-16,40,-76,58,-58,-127,-42,43,49,104,-61,-89,33,59,21,62,-24,-36,-37,56,-42,-44,-48,50,-73,-112,96,-33,-62, 
  /* [0][2][][] */ -48,11,-1,59,-19,55,-70,71,-38,-53,21,-36,36,-41,-42,-38,70,23,-94,-21,38,-37,24,-16,-30,-35,32,8,-57,-44,-14,18,30,60,51,-53,-52,-63,32,-33,-101,-34,26,-116,70,21,-56,-30, -65,27,-82,64,-55,50,-72,46,-52,-56,42,-65,59,-61,-46,-60,75,47,-113,-7,24,-24,48,-40,-47,-48,34,42,1,-67,-70,10,52,79,53,-61,-64,-47,37,-50,-79,53,33,-114,-51,55,-66,-51, -46,5,-81,11,-18,7,-33,30,2,-9,16,-29,12,-7,-13,-1,44,26,-82,17,-5,17,15,-9,-34,0,25,22,50,-34,-9,5,22,39,17,-13,-14,-20,19,-1,-20,-15,1,-20,-67,49,-19,-42, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0038967905566096306, 0.0063987388275563717, 0.0021822031121701002, 0.0064164074137806892, 0.004692156333476305, 0.0032656951807439327, 0.001932235318236053, 0.011034091003239155, 0.0047649042680859566, 0.0031661742832511663, 0.0031114730518311262, 0.0051166145130991936, 0.0032401091884821653, 0.0045679910108447075, 0.0027893991209566593, 0.0032681757584214211, 0.0039665084332227707, 0.0031403892207890749, 0.0051171719096601009, 0.0021584320347756147, 0.0035175222437828779, 0.0028841199818998575, 0.0040184343233704567, 0.004772793035954237, 0.0025426957290619612, 0.0045868712477385998, 0.0037679201923310757, 0.0020380993373692036, 0.010452836751937866, 0.0065508466213941574, 0.003714556572958827, 0.012710664421319962, 0.0051925131119787693, 0.0073398887179791927, 0.0036881556734442711, 0.0037398214917629957, 0.0036309165880084038, 0.0028399156872183084, 0.0032985438592731953, 0.00513495784252882, 0.0022616400383412838, 0.010886127129197121, 0.011118692345917225, 0.0030435547232627869, 0.0072194901295006275, 0.0018622952047735453, 0.0022686670999974012, 0.0027451612986624241, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data23[48] = { 13630, -465, 21634, -526, 14984, -1480, 38625, 367, 11697, 29860, 2371, 24442, 965, 12110, 27726, 23416, 362, -2578, 6757, 43426, 673, 19387, 1431, 15605, 16243, 25923, -3995, -1469, -4129, 9692, 20185, -369, -1046, -434, 2740, 15814, 8281, 29471, 3878, 18295, 28114, -1133, 783, 18317, 4957, 4856, 38796, 22703, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 9.168919496005401e-05, 0.00015055856783874333, 5.1345956308068708e-05, 0.00015097430150490254, 0.00011040367826353759, 7.6839889516122639e-05, 4.5464359573088586e-05, 0.00025962566724047065, 0.00011211539822397754, 7.4498217145446688e-05, 7.3211129347328097e-05, 0.0001203909341711551, 7.6237862231209874e-05, 0.00010748214117484167, 6.5632921177893877e-05, 7.6898257248103619e-05, 9.3329610535874963e-05, 7.3891511419788003e-05, 0.00012040404544677585, 5.0786638894351199e-05, 8.2765232946258038e-05, 6.7861648858524859e-05, 9.4551396614406258e-05, 0.00011230101517867297, 5.982813672744669e-05, 0.00010792638204293326, 8.8656946900300682e-05, 4.7955280024325475e-05, 0.00024594910792075098, 0.00015413756773341447, 8.7401334894821048e-05, 0.00029907445423305035, 0.00012217677431181073, 0.00017270326497964561, 8.6780135461594909e-05, 8.7995802459772676e-05, 8.5433333879336715e-05, 6.6821543441619724e-05, 7.7612799941562116e-05, 0.00012082253670087084, 5.3215062507661059e-05, 0.00025614417972974479, 0.00026161628193221986, 7.1613052568864077e-05, 0.00016987035633064806, 4.3818712583743036e-05, 5.3380405006464571e-05, 6.459202995756641e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data24[16*1*1*48] = { 
  /* [0][0][][] */ 30,37,23,-27,65,63,-36,55,-19,111,0,51,-35,34,-12,51,33,83,43,-72,-71,80,-10,49,63,45,33,48,-51,-45,-10,88,-26,15,-73,47,52,-127,-36,13,12,-34,57,-2,-5,-55,-68,-18, 
  /* [1][0][][] */ -52,6,-81,-42,8,89,-56,22,-14,-37,-42,31,56,-23,-29,-28,-27,-30,-1,19,-64,42,-100,-43,-54,-41,47,69,-19,-30,40,-42,14,-49,-31,50,10,-62,127,-35,-25,34,-43,-16,34,52,27,18, 
  /* [2][0][][] */ 5,3,58,-36,-19,-80,19,21,100,73,-65,17,110,-42,127,79,-68,-20,-29,29,80,-75,-32,-93,13,-34,33,-68,35,47,-39,15,29,-27,57,40,-62,16,0,-30,33,23,61,-12,23,-78,95,-52, 
  /* [3][0][][] */ 40,1,-23,-24,41,104,16,-22,31,-48,25,-28,-57,8,6,44,-41,-67,30,-124,-12,-1,-26,-17,-40,91,127,67,0,-47,28,37,50,-27,94,42,-41,-60,0,42,28,11,-20,-5,15,19,-3,-25, 
  /* [4][0][][] */ 93,-6,10,-40,92,91,41,12,78,-13,-104,34,49,-19,16,-13,-92,-118,-28,-91,-20,20,-41,-35,-84,127,-92,113,-61,-52,32,83,40,-56,13,-29,-5,17,-23,25,-48,-13,-5,40,-52,99,-23,-54, 
  /* [5][0][][] */ -1,-5,-57,5,-13,57,16,-26,58,53,38,89,50,-27,24,-4,-31,127,-18,35,6,-3,-63,-11,33,3,-61,-32,-7,28,16,-15,-38,4,42,20,-43,1,-82,11,83,-14,25,43,-25,10,-37,35, 
  /* [6][0][][] */ 65,12,20,69,12,-31,95,-57,-2,78,123,106,45,50,-60,60,39,-48,-85,99,50,-60,-46,56,-82,96,97,-2,116,51,-38,-7,92,-73,-127,4,108,37,1,-1,16,48,55,-37,61,116,48,0, 
  /* [7][0][][] */ -94,-9,-20,21,-61,-64,25,49,88,118,-60,-76,-103,12,-15,-12,-86,100,2,127,-58,47,23,45,-15,-96,-25,-87,38,38,-2,4,-12,7,14,-17,11,-64,123,17,7,48,23,-18,49,67,-27,8, 
  /* [8][0][][] */ -11,-85,39,-55,66,-49,60,-36,-23,-113,37,12,-30,8,34,23,-1,11,-48,98,9,26,-15,29,49,-19,-70,-34,-127,-23,-46,-112,1,-63,5,85,-7,34,110,12,17,-12,68,115,-2,-65,-38,68, 
  /* [9][0][][] */ 15,-42,26,-62,44,79,-32,52,18,-37,-35,-19,20,-47,112,-18,9,-114,43,43,-67,40,59,-37,-26,-80,-27,84,64,71,-42,-22,-50,35,-5,127,-30,-45,-50,-18,-32,-4,39,102,53,83,-71,13, 
  /* [10][0][][] */ -13,23,-24,-5,17,30,-62,-39,51,38,63,-4,-31,-14,50,-46,-58,127,-3,46,4,-12,19,29,-43,41,1,88,28,5,-32,-8,69,11,-6,23,-11,-50,-34,14,-79,3,29,-18,24,44,27,30, 
  /* [11][0][][] */ -32,53,-23,36,29,62,-1,12,18,16,-127,-74,71,20,-12,-48,-4,29,-41,-47,-11,-10,110,8,45,7,-17,36,-3,24,-8,50,27,1,-46,-2,41,76,105,26,31,-30,68,-4,-54,-19,86,3, 
  /* [12][0][][] */ -60,-1,36,22,-62,-56,2,0,-39,-31,-127,18,72,-98,21,36,46,99,80,-121,-33,45,-45,-82,2,-23,36,-36,6,18,-20,73,62,75,34,-30,-51,-30,28,-3,-29,15,56,-2,36,-16,-42,-37, 
  /* [13][0][][] */ -51,-121,-34,-98,18,14,55,11,-127,33,118,-63,53,36,114,13,121,22,-5,-94,80,-77,111,0,-68,17,-17,19,-33,-101,-112,11,47,-36,-70,65,35,-61,80,-75,-17,64,68,32,46,-33,105,-62, 
  /* [14][0][][] */ 62,22,-52,-1,-37,14,-85,-25,-36,61,58,47,-14,-60,9,-50,53,-107,27,14,88,-57,22,-4,-11,127,-87,8,-48,-24,-89,-1,115,46,88,-19,-82,16,-18,60,-14,-51,100,-26,-48,-43,-51,56, 
  /* [15][0][][] */ -58,6,41,26,90,0,6,35,21,75,-14,57,58,-15,-32,-16,16,41,-5,-42,35,-30,-47,-54,60,-63,-44,61,-40,4,18,7,-52,0,127,-9,-90,16,64,-22,-38,-20,26,-3,-27,-33,-11,4, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant24_scale = { 16, { 0.0068326778709888458, 0.0069143511354923248, 0.0062723355367779732, 0.0070000435225665569, 0.0050608459860086441, 0.0061142607592046261, 0.0049365414306521416, 0.0077242190018296242, 0.0055381855927407742, 0.004617766011506319, 0.0067396648228168488, 0.0061276825144886971, 0.0045576700940728188, 0.0035951649770140648, 0.0050017964094877243, 0.0055314661003649235, } };
const TfArray<16, int> quant24_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data25[16] = { -3405, 11463, -20765, 2593, 10634, -14578, -42290, -9320, -4962, 6867, -16174, -12258, 7235, -11971, -5237, -4510, };
const TfArray<1, int> tensor_dimension25 = { 1, { 16 } };
const TfArray<16, float> quant25_scale = { 16, { 0.00015897233970463276, 0.00016087258700281382, 0.00014593514788430184, 0.00016286634490825236, 0.00011774805170716718, 0.0001422572968294844, 0.00011485592403914779, 0.00017971535271499306, 0.00012885406613349915, 0.00010743914026534185, 0.00015680825163144618, 0.00014256958093028516, 0.00010604091949062422, 8.3646817074622959e-05, 0.00011637417628662661, 0.00012869772035628557, } };
const TfArray<16, int> quant25_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data26[96*1*1*16] = { 
  /* [0][0][][] */ 36,10,6,54,-127,-29,83,56,55,76,-18,23,15,-5,22,72, 
  /* [1][0][][] */ -12,26,-75,-1,127,89,6,-9,-37,13,-70,33,-38,84,-43,-31, 
  /* [2][0][][] */ -43,66,73,-4,65,86,6,38,36,-3,44,-12,52,-127,-12,11, 
  /* [3][0][][] */ 127,-31,9,11,55,44,-12,5,34,46,-61,-26,-49,56,-38,60, 
  /* [4][0][][] */ -87,-30,14,35,-102,-11,-85,-37,-6,43,-17,-56,-21,45,-46,127, 
  /* [5][0][][] */ -108,15,30,10,127,28,10,2,-51,28,-24,6,-69,67,-96,-30, 
  /* [6][0][][] */ -127,15,-32,40,-7,-67,60,24,-4,-26,-53,35,8,-8,-48,3, 
  /* [7][0][][] */ -11,95,57,-83,67,45,127,0,53,4,-8,35,85,20,-34,-3, 
  /* [8][0][][] */ -36,-29,-62,62,-36,69,-46,-67,16,-26,75,32,127,43,-97,0, 
  /* [9][0][][] */ -36,-127,-24,72,-47,-48,-2,59,38,34,17,53,-81,25,0,-22, 
  /* [10][0][][] */ -20,-51,-91,47,-112,107,62,-91,3,-48,65,-19,51,127,-58,93, 
  /* [11][0][][] */ -47,-73,-23,16,3,87,24,-23,27,23,30,-81,21,101,-97,127, 
  /* [12][0][][] */ -17,-76,-63,79,-74,-127,24,50,78,75,-39,106,-7,-65,-12,-15, 
  /* [13][0][][] */ -63,-22,-32,-2,-15,-2,33,16,-20,127,-10,-27,41,34,18,-9, 
  /* [14][0][][] */ -127,-10,-51,-56,-42,122,-39,-72,115,-58,98,35,78,-38,-55,-63, 
  /* [15][0][][] */ 8,-127,100,-64,-55,-37,-5,57,22,-47,-98,-29,83,-47,-30,-53, 
  /* [16][0][][] */ -17,-26,26,-44,21,22,-15,-24,63,-127,35,-14,-17,1,-74,-92, 
  /* [17][0][][] */ -17,18,24,-46,3,-20,-33,9,74,-75,33,70,105,-87,-45,-127, 
  /* [18][0][][] */ 70,-4,-37,-119,27,-29,127,-63,35,56,-18,56,-7,71,-4,-123, 
  /* [19][0][][] */ -34,-32,-39,-70,-127,45,-17,12,45,-51,35,-123,-9,-8,-15,4, 
  /* [20][0][][] */ 8,66,81,-87,84,1,-69,105,-116,-127,41,-99,-29,113,-35,-34, 
  /* [21][0][][] */ 9,-104,-127,-17,117,60,113,102,-113,-109,-34,25,123,-123,-24,38, 
  /* [22][0][][] */ 55,-19,80,-3,11,16,62,37,15,124,38,36,6,5,127,0, 
  /* [23][0][][] */ -105,-58,-15,51,70,51,26,-1,-12,16,-8,-76,3,71,64,127, 
  /* [24][0][][] */ 29,-17,44,16,28,-80,25,-63,-6,127,-111,85,3,-46,89,-46, 
  /* [25][0][][] */ 127,-44,98,118,43,9,-19,47,-110,82,63,-51,-13,31,77,-10, 
  /* [26][0][][] */ -20,25,7,43,-54,112,-19,39,-54,-32,-76,35,-1,21,44,-127, 
  /* [27][0][][] */ 29,-7,-6,-43,-44,-1,-80,11,-98,-26,-68,-47,-65,42,-11,127, 
  /* [28][0][][] */ -78,20,20,-4,37,0,-127,-2,6,-29,-7,-9,4,-44,-82,-41, 
  /* [29][0][][] */ -29,-121,-35,98,-36,11,127,8,72,53,-109,70,31,-21,-48,87, 
  /* [30][0][][] */ 53,-46,-57,2,-127,27,62,-41,2,4,-4,-13,-14,55,-2,78, 
  /* [31][0][][] */ -127,-11,-5,78,-44,14,-43,1,-19,-53,24,-19,-29,-37,-13,97, 
  /* [32][0][][] */ -127,-86,-91,-14,-103,-63,27,-20,127,65,-71,-85,37,38,28,-27, 
  /* [33][0][][] */ -20,21,-108,55,-127,-108,65,-25,-123,29,-67,-86,-24,109,79,79, 
  /* [34][0][][] */ 47,53,7,23,-83,-36,39,23,45,-127,-24,38,-19,0,45,93, 
  /* [35][0][][] */ 53,16,-58,-23,-127,21,101,-50,34,59,-31,-22,23,79,51,70, 
  /* [36][0][][] */ -13,-12,-63,69,127,-21,55,72,-96,6,-85,-106,35,-25,4,39, 
  /* [37][0][][] */ -125,54,-8,-59,46,-91,-61,-20,-13,-14,-15,57,45,-82,9,-127, 
  /* [38][0][][] */ 39,113,3,-78,-117,-34,-127,-50,-41,-64,57,71,-68,-69,89,1, 
  /* [39][0][][] */ 0,-46,2,81,7,87,86,-50,-18,40,22,-17,-10,127,48,120, 
  /* [40][0][][] */ 127,50,109,87,-57,-63,1,25,-76,81,-22,-25,-30,-31,111,13, 
  /* [41][0][][] */ -23,-3,12,51,-92,127,7,45,-52,23,-109,5,15,25,43,-125, 
  /* [42][0][][] */ 17,-88,29,-17,127,25,62,16,-30,-83,-92,-17,-5,-8,-1,34, 
  /* [43][0][][] */ -46,-93,-48,5,117,14,-7,87,-88,-64,-127,-93,115,0,-46,71, 
  /* [44][0][][] */ -14,-71,-56,-56,11,36,65,12,-23,-127,-58,74,-56,61,26,73, 
  /* [45][0][][] */ -7,-68,-94,-9,-127,89,-21,-66,61,-46,23,-66,5,27,-66,34, 
  /* [46][0][][] */ 34,-64,-12,-1,94,-64,-32,87,-1,-14,31,62,-47,-60,40,-127, 
  /* [47][0][][] */ -56,-37,-14,98,-1,18,3,36,8,127,74,104,-41,40,-19,71, 
  /* [48][0][][] */ 50,-8,-81,-90,35,-63,16,54,41,-78,-3,18,-60,2,-41,-127, 
  /* [49][0][][] */ 53,28,8,35,-14,-34,35,45,-17,127,-32,44,-31,-18,66,72, 
  /* [50][0][][] */ -2,-12,12,16,-127,-22,-19,-48,66,23,26,52,-26,-57,9,-4, 
  /* [51][0][][] */ 12,-6,-4,-127,-18,105,57,-57,5,9,28,-55,71,72,-33,4, 
  /* [52][0][][] */ 26,-14,8,-91,73,-113,1,-24,43,-1,127,-49,27,3,-21,100, 
  /* [53][0][][] */ -46,-51,37,-21,-46,-127,12,-97,-4,82,-89,76,-41,-6,30,-80, 
  /* [54][0][][] */ 61,64,36,-40,-127,-22,-86,-106,-22,23,52,62,-63,-54,71,7, 
  /* [55][0][][] */ 21,8,-32,64,-35,20,32,-16,11,127,17,56,3,-2,5,42, 
  /* [56][0][][] */ 40,-120,-100,80,-82,85,0,88,127,13,62,60,-26,-33,71,114, 
  /* [57][0][][] */ 42,12,102,-81,97,7,-30,11,90,-34,24,127,63,-72,89,-76, 
  /* [58][0][][] */ 74,-63,17,-68,38,17,-3,127,42,97,-12,46,48,24,82,-2, 
  /* [59][0][][] */ -60,43,18,-40,-14,-73,-22,16,6,24,-94,-96,-127,-55,76,-1, 
  /* [60][0][][] */ 32,-30,20,24,18,-10,8,-54,29,127,-13,59,-16,-26,-27,-41, 
  /* [61][0][][] */ 55,45,4,-15,-86,-127,-24,-54,-41,-21,-33,5,-67,-40,67,67, 
  /* [62][0][][] */ -15,77,-48,31,-65,127,-48,35,-47,4,-29,38,-28,37,56,-91, 
  /* [63][0][][] */ 27,-11,-65,-127,-24,-48,88,-8,-8,-101,-28,31,-37,72,42,-27, 
  /* [64][0][][] */ -30,20,13,-7,52,-68,30,85,-127,-14,-66,-13,-24,100,74,58, 
  /* [65][0][][] */ -78,-28,-55,-1,67,34,-56,-68,-117,-70,24,-30,-127,103,-70,42, 
  /* [66][0][][] */ -15,66,-20,37,-51,127,-29,34,-79,26,-18,57,-33,47,51,-92, 
  /* [67][0][][] */ 17,-31,-49,-20,1,-99,62,-92,-8,15,15,127,-63,-30,-17,-123, 
  /* [68][0][][] */ 11,-127,-36,77,-21,10,36,99,37,37,68,7,-88,31,-9,-15, 
  /* [69][0][][] */ -3,75,83,-102,55,12,-41,95,33,105,55,83,90,-102,21,-127, 
  /* [70][0][][] */ 45,21,42,-28,92,11,-101,-46,-127,-94,0,47,-34,62,-102,-4, 
  /* [71][0][][] */ -34,-90,8,-42,96,-24,27,37,-127,113,-124,-38,-2,118,-41,37, 
  /* [72][0][][] */ 19,27,79,5,-58,-33,-105,-73,-13,76,-28,68,42,127,-121,6, 
  /* [73][0][][] */ 9,-35,-24,-42,30,-121,31,-31,88,83,117,1,29,-28,-67,127, 
  /* [74][0][][] */ 6,8,-34,76,-84,-4,99,24,71,67,32,124,127,28,-59,14, 
  /* [75][0][][] */ -15,47,-22,31,-47,127,-11,18,-39,35,-41,51,-17,50,35,-71, 
  /* [76][0][][] */ -77,73,-57,45,-97,3,-6,28,49,37,-34,-43,43,-46,-127,39, 
  /* [77][0][][] */ 127,118,-116,125,91,81,79,41,64,14,100,-23,98,34,52,40, 
  /* [78][0][][] */ 10,-43,-5,-63,66,-107,36,-45,56,37,127,-11,-1,-7,-40,119, 
  /* [79][0][][] */ -39,61,7,22,2,-52,-33,-8,-127,-4,49,3,115,38,-84,-48, 
  /* [80][0][][] */ -64,45,71,-8,68,36,1,-127,-69,63,-66,-37,-8,-90,30,55, 
  /* [81][0][][] */ 89,80,-28,-5,28,-22,83,117,-117,127,-70,-44,-52,21,119,126, 
  /* [82][0][][] */ 55,102,-38,-76,6,-59,103,-88,7,27,-55,81,127,-12,75,-38, 
  /* [83][0][][] */ 10,-19,22,23,7,27,-33,-103,57,-26,90,9,41,-72,-62,-127, 
  /* [84][0][][] */ -123,-78,-50,-24,-20,109,108,-6,111,73,127,112,46,99,-88,22, 
  /* [85][0][][] */ 118,17,92,-87,71,-19,-11,89,26,98,-60,7,-38,54,127,25, 
  /* [86][0][][] */ -81,74,-36,4,25,77,17,19,85,32,127,-23,-28,64,-4,-17, 
  /* [87][0][][] */ 7,-65,20,-49,47,-127,22,-34,50,-9,76,-32,29,-45,-46,73, 
  /* [88][0][][] */ -71,65,49,-18,111,-31,43,13,-62,-63,95,-75,78,127,99,-105, 
  /* [89][0][][] */ -25,41,-20,28,-30,127,-10,39,-50,11,-38,18,-4,60,26,-81, 
  /* [90][0][][] */ 52,-86,25,26,127,-21,52,33,-14,-94,-115,-20,-1,-5,-49,36, 
  /* [91][0][][] */ -37,61,-29,-62,12,-59,-102,43,-85,30,-105,-127,-120,-79,-15,29, 
  /* [92][0][][] */ 55,48,59,39,-127,-90,25,8,-21,28,-22,-31,-27,-68,29,4, 
  /* [93][0][][] */ 2,-127,-112,65,-34,-55,-24,122,122,97,3,84,-70,76,-28,-52, 
  /* [94][0][][] */ 93,3,117,-19,25,-22,14,43,22,81,5,66,11,15,127,-6, 
  /* [95][0][][] */ -53,-35,-11,-33,127,-19,46,60,-39,7,-112,-63,28,16,-61,38, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant26_scale = { 96, { 0.0043341610580682755, 0.0021971818059682846, 0.0052506900392472744, 0.0040035843849182129, 0.0029130841139703989, 0.0013586588902398944, 0.0064025488682091236, 0.0027382168918848038, 0.0017965554725378752, 0.0030012496281415224, 0.00104052375536412, 0.0025650265160948038, 0.0031662378460168839, 0.0074667865410447121, 0.0022049685940146446, 0.0021291521843522787, 0.0032123664859682322, 0.0028377005364745855, 0.0028839861042797565, 0.0012765893479809165, 0.0057006687857210636, 0.0012988591333851218, 0.0033752764575183392, 0.0029132200870662928, 0.0017270416719838977, 0.0030911345966160297, 0.0037686305586248636, 0.0053942841477692127, 0.0019661569967865944, 0.0048604155890643597, 0.0029312940314412117, 0.0023175678215920925, 0.003643035888671875, 0.0013204460265114903, 0.0024470530916005373, 0.002443983918055892, 0.0026402752846479416, 0.0037358852569013834, 0.0021592406556010246, 0.0024034350644797087, 0.00092146208044141531, 0.0034404359757900238, 0.0028705561999231577, 0.0021905493922531605, 0.0028169630095362663, 0.0014245975762605667, 0.0022464732173830271, 0.0018114775884896517, 0.0038067603018134832, 0.0038257325068116188, 0.0039639552123844624, 0.0021993361879140139, 0.0035919551737606525, 0.0030044682789593935, 0.0020457161590456963, 0.0057164984755218029, 0.0019307129550725222, 0.0014098226092755795, 0.0031554128509014845, 0.003625303041189909, 0.003570070955902338, 0.0018025649478659034, 0.0029856017790734768, 0.003617679001763463, 0.0012167558306828141, 0.0012125007342547178, 0.0040325494483113289, 0.0042512640357017517, 0.0017622086452320218, 0.0020090776961296797, 0.0041919802315533161, 0.0021020660642534494, 0.0025088354013860226, 0.002816005377098918, 0.0046076155267655849, 0.0045410771854221821, 0.0043383664451539516, 0.0017507134471088648, 0.0029321603942662477, 0.0031811441294848919, 0.0023761764168739319, 0.0022892681881785393, 0.0019336054101586342, 0.0014324876246973872, 0.0020828105043619871, 0.0016037538880482316, 0.0020076048094779253, 0.0045467810705304146, 0.0044422270730137825, 0.0047109974548220634, 0.0026684580370783806, 0.0015157420421019197, 0.0027670348063111305, 0.0019422322511672974, 0.0023667344357818365, 0.0021217686589807272, } };
const TfArray<96, int> quant26_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data27[96] = { 1483, 7155, 217, 1701, 4478, 13939, 127, 2194, 9606, -1154, 17159, 4043, 2279, 252, 4796, 903, 3868, 4578, -65, 14522, 632, 12562, -1657, 1970, -8251, 1319, 2774, 1384, 8678, 1149, 4211, 4767, 2361, 12939, 4463, 4896, 4207, 2400, 4869, 3537, 20935, 1941, 2472, 1938, 2409, 12223, 5976, 8576, 1670, -1275, 2000, 6752, 2708, -2920, 7610, 16, 3614, 13022, 1158, 1651, 2387, 9596, 4429, -501, 16071, 14827, 1931, 2705, 9123, 5065, 2240, 2245, -4611, 4770, 1540, 2548, 489, 8980, 4201, 5379, 3774, 1527, 4682, 13211, -387, 9366, 7291, 1902, -684, 2324, 1659, 12251, 3712, 4594, 4639, 6052, };
const TfArray<1, int> tensor_dimension27 = { 1, { 96 } };
const TfArray<96, float> quant27_scale = { 96, { 0.00021210119302850217, 0.00010752366506494582, 0.00025695344083942473, 0.00019592374155763537, 0.00014255783753469586, 6.6488799348007888e-05, 0.00031332205981016159, 0.00013400035095401108, 8.7918182543944567e-05, 0.00014687239308841527, 5.092019637231715e-05, 0.00012552490807138383, 0.00015494643594138324, 0.00036540275323204696, 0.00010790472879307345, 0.00010419449245091528, 0.00015720384544692934, 0.00013886878150515258, 0.00014113385987002403, 6.2472558056470007e-05, 0.00027897409745492041, 6.3562372815795243e-05, 0.00016517618496436626, 0.00014256448775995523, 8.4516381321009248e-05, 0.00015127110236790031, 0.00018442577857058495, 0.00026398053159937263, 9.6217983809765428e-05, 0.00023785456141922623, 0.00014344898227136582, 0.00011341500794515014, 0.00017827954434324056, 6.4618776377756149e-05, 0.00011975163943134248, 0.00011960144183831289, 0.00012920737208332866, 0.0001828233216656372, 0.00010566693526925519, 0.00011761709902202711, 4.5093664084561169e-05, 0.0001683649024926126, 0.00014047665172256529, 0.00010719909914769232, 0.00013785394548904151, 6.9715650170110166e-05, 0.00010993584146490321, 8.8648426753934473e-05, 0.00018629174155648798, 0.00018722018285188824, 0.00019398440781515092, 0.00010762909369077533, 0.00017577980179339647, 0.00014702991757076234, 0.00010011137783294544, 0.00027974875411018729, 9.4483460998162627e-05, 6.8992601882200688e-05, 0.000154416702571325, 0.00017741175543051213, 0.00017470885359216481, 8.8212269474752247e-05, 0.00014610664220526814, 0.00017703865887597203, 5.9544479881878942e-05, 5.9336249250918627e-05, 0.0001973411999642849, 0.00020804445375688374, 8.6237349023576826e-05, 9.8318399977870286e-05, 0.00020514328207354993, 0.00010286898032063618, 0.00012277509085834026, 0.00013780708832200617, 0.00022548326523974538, 0.0002222270704805851, 0.00021230700076557696, 8.5674808360636234e-05, 0.00014349137200042605, 0.00015567590889986604, 0.00011628313950495794, 0.00011203010217286646, 9.4625007477588952e-05, 7.0101763412822038e-05, 0.00010192667105002329, 7.8483033576048911e-05, 9.8246324341744184e-05, 0.00022250620531849563, 0.00021738963550888002, 0.00023054247139953077, 0.00013058654440101236, 7.4175994086544961e-05, 0.00013541060616262257, 9.5047180366236717e-05, 0.00011582107981666923, 0.00010383316839579493, } };
const TfArray<96, int> quant27_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data28[1*3*3*96] = { 
  /* [0][0][][] */ -20,-12,17,-33,98,-16,27,0,-4,6,-12,-31,-41,0,11,-27,-15,-1,-1,-20,-1,23,-3,33,-11,-25,-16,7,5,3,21,6,36,4,-5,-16,2,-57,-45,-24,10,-14,45,-30,-14,34,-50,-22,-25,19,-11,58,-77,5,38,-6,-3,-14,9,-23,-3,-22,8,-41,-24,-19,-33,-42,-17,31,-2,3,35,1,-1,2,-37,27,127,-16,-127,13,-106,-19,-36,-12,9,7,-52,-13,18,-43,-12,28,-9,12, -22,43,47,-71,-36,-13,127,-47,1,-3,-38,5,-66,-3,-72,54,-6,63,89,-37,-5,127,75,107,36,-13,52,80,127,42,127,-25,-64,-16,-90,-23,-11,-122,127,-38,-18,-127,-7,-60,47,-19,-43,-5,52,10,25,127,-98,18,-71,0,-81,-9,-1,24,-7,-127,-117,-11,-55,-2,-8,-78,-17,19,-69,101,-127,-22,14,-28,-127,-79,-4,-115,-103,10,31,-54,79,83,-72,32,-127,4,28,-5,7,127,-35,-82, -46,11,-4,-18,57,-15,41,-27,-18,13,-12,-5,-18,5,0,-45,-13,-10,-17,-30,-2,2,14,20,3,6,7,-9,12,11,8,16,18,3,-20,45,1,-101,-45,20,2,23,22,-21,-29,-27,-65,-24,-5,5,-1,31,14,-16,20,-10,52,-18,12,-23,-7,-11,-44,-35,-7,-29,127,-3,-13,23,-8,-7,2,-3,11,21,-14,45,-32,-19,-124,6,-101,-17,0,-26,17,-16,-94,-31,-7,42,12,28,5,6, 
  /* [0][1][][] */ -61,-14,17,-70,42,87,-45,-16,-4,-16,-24,-26,-95,20,32,55,-22,37,115,22,31,-24,119,-33,44,8,73,12,-16,5,-16,-17,-127,-14,70,-12,-8,-96,-56,-127,-12,-5,99,-27,-80,127,-103,-80,50,63,16,-47,-117,58,66,-22,11,-34,36,-16,10,-10,98,-108,-45,15,-32,-44,-15,-4,-127,14,77,124,15,-80,-105,-51,-71,-32,-89,0,-9,-69,35,13,-106,70,-67,127,76,-90,127,0,-51,-12, 92,127,127,127,-127,-127,81,-54,127,127,-76,-77,-88,127,-14,127,127,-127,127,127,127,-90,82,-127,-127,-127,127,127,-113,127,-37,127,-86,127,127,-87,127,68,8,3,127,24,-127,-112,127,-11,127,127,127,-127,127,-120,117,127,-127,127,-127,127,-127,127,-98,116,123,-127,127,127,-17,127,-117,-127,9,-127,9,127,127,66,9,-127,98,-127,90,127,127,127,127,58,-127,127,-79,53,-10,-25,-91,-28,-127,-44, -127,-33,12,-76,7,39,-54,4,-33,-13,-4,127,-127,9,27,54,-25,38,86,1,18,-28,60,-30,38,19,40,7,-12,-2,6,-10,-91,-30,77,127,-4,-127,-77,-76,-30,-6,30,-31,-73,-57,-91,-106,54,62,-10,-28,127,3,85,-39,84,-32,52,-48,5,-42,-108,-49,-78,-7,-52,-62,-27,5,-103,17,17,-108,15,127,-71,-21,-59,23,-115,-8,-55,-68,-2,27,-82,36,6,-77,127,127,-43,-25,-63,-13, 
  /* [0][2][][] */ -11,-43,-22,-14,21,-8,-12,12,-15,1,31,-43,72,-18,-5,-45,-8,-14,-75,-24,-15,-16,27,-30,12,-9,-24,-4,7,-10,-35,7,24,-1,-4,-15,-2,-27,-13,-9,-19,-9,35,21,22,21,-27,-6,-41,12,-21,-21,-5,-19,44,-8,7,-9,4,-23,6,11,12,-26,-53,-31,123,24,22,19,1,15,-8,-11,-2,-21,-27,34,-37,-6,4,10,-87,-7,-13,-4,30,-5,27,1,-12,-18,-15,-20,-33,0, -19,-60,8,-93,-45,-15,66,127,-60,57,127,-55,-61,-5,127,57,-16,-38,65,-49,-16,-32,127,6,23,-24,17,20,-7,-2,-107,-30,-51,-29,-99,-6,-79,-78,62,-65,-14,-98,-32,127,24,-9,-49,-2,18,3,-21,-4,57,20,-45,-34,-48,-49,46,-61,127,19,127,-30,-115,-61,-11,-42,127,24,-40,31,5,-40,29,-18,-31,-40,-6,62,-32,-21,-66,-74,48,-127,-7,21,-8,-2,53,-3,18,-127,-73,127, -26,8,-18,6,14,-7,2,15,-22,-9,17,44,29,-8,-4,-36,-11,3,-35,-32,-10,2,-14,-15,-6,-12,-20,-1,-5,-3,-42,9,-27,4,-5,1,-4,-15,-17,-5,-31,18,7,-7,18,0,-64,7,-36,-2,-18,-11,3,-20,19,-9,49,-9,11,-26,2,10,-1,-2,-38,-23,-28,32,21,17,-19,-1,-57,-54,11,-10,-11,-10,108,14,24,-1,-50,7,6,-2,45,6,31,-3,-22,10,5,-26,-15,2, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant28_scale = { 96, { 0.0061746486462652683, 0.011327025480568409, 0.010453282855451107, 0.0067927786149084568, 0.0096366293728351593, 0.021419541910290718, 0.0053818393498659134, 0.0088443970307707787, 0.014419941231608391, 0.011505154892802238, 0.010745806619524956, 0.0090149547904729843, 0.0052192904986441135, 0.0086398348212242126, 0.0095887091010808945, 0.010994737967848778, 0.014267005026340485, 0.016825312748551369, 0.0053514372557401657, 0.014034364372491837, 0.010819518938660622, 0.011761778965592384, 0.0058434279635548592, 0.0074573303572833538, 0.05250437930226326, 0.006476379930973053, 0.010598352178931236, 0.0060531697236001492, 0.015923051163554192, 0.007303981576114893, 0.0063876942731440067, 0.011756156571209431, 0.004218915943056345, 0.019815588369965553, 0.0066797579638659954, 0.010672419331967831, 0.014873075298964977, 0.0045358035713434219, 0.013127964921295643, 0.0043502910993993282, 0.028436470776796341, 0.01167902909219265, 0.010282131843268871, 0.0064092613756656647, 0.0085216071456670761, 0.013681921176612377, 0.0077770580537617207, 0.013596729375422001, 0.0090790074318647385, 0.018034467473626137, 0.013747943565249443, 0.0080226575955748558, 0.006268021184951067, 0.017885616049170494, 0.016737610101699829, 0.01383921317756176, 0.0085635744035243988, 0.017112569883465767, 0.014239667914807796, 0.013594248332083225, 0.010437335819005966, 0.011328757740557194, 0.0060466793365776539, 0.0047920667566359043, 0.0093440888449549675, 0.017009975388646126, 0.005547412671148777, 0.0063171768561005592, 0.0081792334094643593, 0.012914351187646389, 0.0054546496830880642, 0.011621588841080666, 0.018554691225290298, 0.0077588781714439392, 0.0055566360242664814, 0.0087513197213411331, 0.0039264857769012451, 0.0076963556930422783, 0.005125818308442831, 0.0078938212245702744, 0.0043712831102311611, 0.011042873375117779, 0.0057913274504244328, 0.015539217740297318, 0.0047674956731498241, 0.012993026524782181, 0.0054554394446313381, 0.0097594717517495155, 0.0051720687188208103, 0.0097794858738780022, 0.0056962035596370697, 0.010061526671051979, 0.016544457525014877, 0.0059394934214651585, 0.0046963347122073174, 0.013337323442101479, } };
const TfArray<96, int> quant28_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data29[96] = { 8225, -633, -4330, 7118, 559, 3834, 359, -1253, 2516, -3897, 163, 53, 10951, -2234, -3968, -5014, 481, 1898, -10429, 787, -2646, 877, -5614, 1329, 39, 8936, -10059, -5712, -169, -2930, 2099, -1564, 14644, -354, -1267, -1343, -897, 14334, 2100, 10021, -1768, 4335, -901, 6266, 988, -2236, 10522, 2454, -5879, -577, -2962, 234, 101, -2310, -1487, 1454, 1074, 2664, 46, 2145, -1004, 2048, -3650, 9200, 12797, 19, 13504, 7810, 105, -634, 8238, -1480, 251, 2490, -4764, 100, 16719, 7809, 11977, 9291, 11309, -2041, 6455, 7772, -560, -1423, 11333, -8099, 10030, -282, -6884, -494, -187, 1986, 17274, -828, };
const TfArray<1, int> tensor_dimension29 = { 1, { 96 } };
const TfArray<96, float> quant29_scale = { 96, { 0.0001320458686677739, 0.00024223029322456568, 0.00022354515385814011, 0.00014526468294207007, 0.00020608089107554406, 0.0004580603854265064, 0.00011509151227073744, 0.00018913886742666364, 0.00030837280792184174, 0.00024603962083347142, 0.00022980083303991705, 0.00019278627587482333, 0.00011161537986481562, 0.00018476427067071199, 0.00020505610154941678, 0.0002351242583245039, 0.00030510223587043583, 0.0003598120529204607, 0.00011444136180216447, 0.00030012716888450086, 0.00023137718380894512, 0.00025152755551971495, 0.00012496266572270542, 0.00015947622887324542, 0.0011228147195652127, 0.00013849843526259065, 0.00022664749121759087, 0.00012944801710546017, 0.0003405170573387295, 0.00015619683836121112, 0.00013660188415087759, 0.00025140732759609818, 9.0222201833967119e-05, 0.00042375960038043559, 0.00014284771168604493, 0.00022823142353445292, 0.00031806313199922442, 9.6998897788580507e-05, 0.00028074366855435073, 9.3031681899446994e-05, 0.00060811854200437665, 0.00024975795531645417, 0.00021988507069181651, 0.00013706309255212545, 0.00018223596271127462, 0.00029259012080729008, 0.00016631364997010678, 0.00029076827922835946, 0.0001941560476552695, 0.00038567002047784626, 0.00029400200583040714, 0.00017156584362965077, 0.00013404265337157995, 0.00038248681812547147, 0.00035793651477433741, 0.00029595382511615753, 0.00018313343753106892, 0.00036595508572645485, 0.00030451762722805142, 0.00029071522294543684, 0.00022320412972476333, 0.00024226732784882188, 0.000129309220938012, 0.00010247912723571062, 0.00019982486264780164, 0.00036376109346747398, 0.00011863232793984935, 0.00013509385462384671, 0.00017491423932369798, 0.00027617550222203135, 0.00011664857447613031, 0.00024852956994436681, 0.00039679510518908501, 0.00016592488100286573, 0.00011882956459885463, 0.00018714839825406671, 8.3968538092449307e-05, 0.00016458782192785293, 0.00010961646330542862, 0.00016881065675988793, 9.3480601208284497e-05, 0.00023615364625584334, 0.00012384848378133029, 0.0003323087003082037, 0.00010195367212872952, 0.00027785799466073513, 0.00011666546197375283, 0.00020870789012406021, 0.00011060553515562788, 0.00020913590560667217, 0.00012181424244772643, 0.00021516738343052566, 0.00035380592453293502, 0.00012701703235507011, 0.00010043188376585022, 0.00028522082720883191, } };
const TfArray<96, int> quant29_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data30[16*1*1*96] = { 
  /* [0][0][][] */ 27,14,19,18,-25,-81,-15,-6,-19,-78,13,-15,58,-64,69,36,-86,-34,35,6,79,15,-71,4,-6,75,127,68,18,78,49,-44,6,-2,5,-32,35,21,-16,-3,111,13,24,-15,-12,-2,-7,-46,25,-47,102,-10,-61,-6,41,29,-18,-46,7,14,-15,48,-65,-9,16,-18,67,29,-4,-27,19,24,4,37,6,30,54,-29,48,23,-20,41,32,26,-64,6,-6,62,21,0,-87,-18,28,8,120,82, 
  /* [1][0][][] */ 15,38,-53,-11,4,-44,96,-71,-69,-32,-64,-42,-8,-37,-12,-57,-34,-28,-26,-22,-9,-85,116,-27,5,13,6,63,-43,10,-33,16,-36,18,7,8,-17,57,-52,77,23,16,2,-51,49,-57,-2,29,-87,1,44,-107,-46,34,66,61,32,26,-60,17,-48,-3,-18,-21,28,19,94,12,-44,-127,5,0,23,69,-16,38,-57,-31,96,-33,43,-6,48,-55,-22,-59,-23,16,-25,-45,35,2,68,-51,-37,49, 
  /* [2][0][][] */ 8,-16,21,-12,57,39,-54,22,-52,41,14,-24,35,-10,19,30,29,-19,-127,0,-24,-43,-14,19,1,-12,-44,15,-37,-18,-20,69,-13,-33,0,12,-40,23,-25,-17,69,11,-1,44,12,52,0,-5,-75,10,-13,9,-27,51,9,-64,34,20,44,34,-22,-2,-16,55,41,2,-32,-6,-8,3,-15,-33,27,53,24,73,-55,-7,-25,-27,32,30,54,-16,-11,-46,-10,-49,-11,-39,-12,68,4,-9,85,-36, 
  /* [3][0][][] */ 44,-32,-27,-111,-17,-30,114,-35,29,124,-72,-16,11,-27,-19,67,57,67,-25,26,-63,22,15,-3,-61,80,59,-3,-43,-9,-75,61,5,-21,17,-27,10,-55,-32,62,15,2,-21,18,69,-44,-17,30,53,-35,27,-48,99,47,26,-15,7,-16,-18,-52,-46,38,74,0,-27,-22,127,-28,-45,-29,-60,23,14,-75,-3,-66,5,-46,116,2,-15,-55,-31,-41,-35,-39,84,74,-39,31,-60,3,8,-87,-11,30, 
  /* [4][0][][] */ -30,84,24,19,-8,17,-42,-23,13,-35,2,-11,27,37,-33,18,-12,-42,-14,-70,22,-29,-65,21,-33,-31,-16,21,-37,127,-49,-20,13,-36,-4,-36,71,46,-34,0,18,12,16,-45,-47,-13,59,-24,17,-18,-66,-4,-62,33,48,18,10,62,-25,26,-23,-72,-28,2,56,25,-66,-7,2,-6,4,-72,-17,58,51,71,-38,15,-63,50,17,66,31,-63,44,-69,-28,-62,-40,-46,-54,-22,-8,10,37,-36, 
  /* [5][0][][] */ -5,-11,30,-17,-15,-17,-16,-1,33,14,-15,-7,-24,-31,30,-23,-15,16,-46,-32,-27,22,-23,7,14,-41,67,-20,-3,34,13,76,-11,-82,25,15,-39,-27,-39,-1,-46,0,-24,11,4,25,-78,24,-10,14,57,-5,31,-75,3,12,-21,-53,1,-43,35,20,30,40,-38,6,110,-23,-3,-30,10,11,-4,29,39,10,-11,-17,127,35,-23,-10,-29,28,45,65,4,96,-1,-31,-15,8,5,-18,-23,18, 
  /* [6][0][][] */ 27,-50,69,7,-48,112,-58,-106,-22,-77,-82,59,11,6,-29,75,1,47,17,-29,-100,-21,-92,-66,1,-49,1,70,-127,45,-11,-35,50,94,-12,-8,-5,-43,19,-14,-57,44,25,-27,27,47,-105,-3,69,17,-73,-111,79,16,-48,-20,29,-22,20,-19,0,-47,48,4,62,-68,-62,-70,-94,16,-24,-74,-20,-106,21,-103,89,15,-74,51,-35,79,29,-102,64,-42,-11,2,-66,75,-84,85,44,-56,75,-96, 
  /* [7][0][][] */ -8,-7,-56,62,-26,0,34,-8,-86,3,76,52,4,-59,-9,-29,-3,-10,2,10,-54,-17,-47,-34,59,46,-15,64,-7,32,28,28,-57,-127,23,105,-3,12,-45,12,-3,-13,-1,-77,34,49,64,82,-17,43,-41,-6,19,-33,47,-51,-19,39,-86,-16,54,2,3,-25,76,-38,101,-8,-62,-27,72,9,-12,-30,-82,-27,27,-31,88,-25,1,-17,-61,-28,41,16,-66,43,-3,9,-1,26,53,-8,84,-15, 
  /* [8][0][][] */ -15,-55,4,9,-8,-4,22,-1,-12,-9,45,48,15,38,-55,-6,71,4,17,-3,-11,-71,-34,-23,-21,-32,72,12,-25,48,10,-27,-19,-3,-8,4,-43,-13,16,-33,-9,56,32,-46,9,-18,31,-18,30,-3,39,6,0,18,-41,0,-8,104,-56,1,-12,-63,-69,-16,-92,-31,-22,19,-11,12,31,-25,-27,-127,41,-103,8,15,-58,18,-26,-11,-2,64,73,-66,-45,57,-42,93,12,-19,-57,4,0,-67, 
  /* [9][0][][] */ -30,-27,-32,23,5,22,7,41,-36,6,56,56,-30,50,21,-48,-9,32,-24,-33,1,42,-1,11,-18,22,10,19,34,-14,19,-3,-19,-22,13,55,-25,-3,28,-3,-14,-24,15,-1,11,49,3,35,-36,14,-7,37,127,17,-11,-12,17,-22,35,9,-34,0,76,6,10,26,58,8,27,0,-21,28,10,-120,-34,-115,-37,-16,35,-5,-2,29,0,-36,42,8,-56,-4,-5,108,37,30,54,34,-8,25, 
  /* [10][0][][] */ 19,40,10,0,-13,16,-37,-17,62,9,-35,25,19,12,-10,-54,-34,-8,20,-6,30,-10,-15,-27,18,-24,-97,46,-17,55,3,15,16,29,-15,-2,14,7,4,-4,38,-9,62,-46,-37,-9,23,25,10,8,1,-27,-24,-15,0,36,-9,3,-7,2,-12,-32,-12,8,-7,-19,-96,-26,-46,-12,47,-11,-23,35,37,21,50,-21,-93,9,-8,38,-4,-1,9,16,-72,-127,-28,25,13,24,56,-26,9,31, 
  /* [11][0][][] */ 15,-39,-2,11,-51,20,16,13,67,-15,-22,-37,24,15,8,-10,-29,41,25,-66,13,26,18,-21,47,8,59,4,33,-58,-24,21,15,102,-93,8,7,-9,60,6,-53,48,-12,14,-51,1,-7,-8,41,-14,-29,-17,-23,9,-73,93,-26,-6,4,-18,17,8,-13,-67,-11,-40,-127,-71,4,-29,-83,25,47,21,-6,2,34,50,-107,-41,-6,1,-21,1,-16,-4,53,72,17,-40,9,9,-31,31,69,37, 
  /* [12][0][][] */ 25,29,-32,-29,10,-33,8,36,61,-40,23,-8,3,-17,6,17,6,-38,-28,16,12,54,-1,48,-50,-36,-127,-13,77,-22,26,-4,-17,-72,69,-10,39,-18,-8,22,-2,-67,12,39,49,8,16,-12,-73,-7,-43,101,78,-19,28,-76,4,16,-41,-36,13,59,88,9,-12,-15,36,23,112,26,21,31,-2,-24,-14,-9,-42,-54,47,-68,19,-54,32,-46,0,5,11,-115,-5,33,-38,27,23,67,16,47, 
  /* [13][0][][] */ -11,15,-69,19,19,19,-4,8,34,68,-36,36,-48,-33,68,-43,18,50,48,20,-37,-38,-6,14,31,43,-16,27,1,35,51,-11,-16,61,-9,40,15,-40,-45,-43,-4,-21,14,20,48,48,-37,46,-36,38,9,-4,-17,-39,54,31,9,-49,-10,-23,27,17,7,-20,14,88,127,33,16,6,-42,-9,41,50,-79,49,10,-64,114,-34,-19,-38,20,-2,23,49,-27,-21,-12,-33,11,51,44,9,56,53, 
  /* [14][0][][] */ -3,52,22,17,-62,-45,15,33,-69,-20,66,5,-76,-12,73,-19,-44,50,-60,30,-31,23,-98,7,-57,3,-42,-107,9,-8,22,71,-54,27,13,-10,-25,-71,-11,-35,34,-40,42,-19,-3,54,-80,28,-3,-39,87,32,-7,24,-29,22,-55,29,-11,28,31,54,-1,43,18,-42,7,-66,37,51,69,34,-45,31,4,12,22,-8,36,18,-70,108,4,-127,77,-10,1,4,-99,-10,-27,-4,-29,5,45,32, 
  /* [15][0][][] */ 64,-37,23,27,45,6,-11,3,17,17,-62,-12,67,76,-8,-19,-7,-3,-63,45,12,-32,22,31,79,-38,75,27,47,-30,-39,65,62,57,-1,-76,54,70,71,47,81,47,-18,6,-46,-127,41,-34,-39,-15,-20,-9,-14,-56,-24,61,-10,-3,-3,29,6,-53,-37,24,33,43,-79,36,-5,-27,-2,-5,0,-114,-39,-99,-10,18,-110,25,84,-28,42,29,-48,0,-11,-23,35,90,17,-60,-29,-22,20,-31, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant30_scale = { 16, { 0.0041951616294682026, 0.0023218102287501097, 0.0026024184189736843, 0.0029869708232581615, 0.0036217838060110807, 0.0056224232539534569, 0.0023026121780276299, 0.0026947213336825371, 0.0045127822086215019, 0.0042214845307171345, 0.004761948250234127, 0.003521688049659133, 0.0038610717747360468, 0.003617691108956933, 0.0032500938978046179, 0.0035058497451245785, } };
const TfArray<16, int> quant30_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data31[16] = { -24782, -3689, 1099, -13621, 13329, -13230, 20632, -9949, 13374, -9444, 13160, 11304, -4927, -28068, 1251, 4313, };
const TfArray<1, int> tensor_dimension31 = { 1, { 16 } };
const TfArray<16, float> quant31_scale = { 16, { 9.8709686426445842e-05, 5.4630829254165292e-05, 6.1233375163283199e-05, 7.0281668740790337e-05, 8.5218445747159421e-05, 0.00013229231990408152, 5.4179112339625135e-05, 6.3405212131328881e-05, 0.00010618311353027821, 9.9329052318353206e-05, 0.00011204584006918594, 8.2863247371278703e-05, 9.0848749096039683e-05, 8.5122148448135704e-05, 7.6472795626614243e-05, 8.2490587374195457e-05, } };
const TfArray<16, int> quant31_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data32[96*1*1*16] = { 
  /* [0][0][][] */ -54,34,-13,-13,-36,-47,-62,-34,64,-56,54,-46,92,-99,37,-127, 
  /* [1][0][][] */ -127,76,-104,-112,-104,51,-11,87,-50,-10,100,-81,73,123,40,52, 
  /* [2][0][][] */ -53,-19,-67,0,-15,-60,24,-38,-104,127,84,14,63,66,-38,117, 
  /* [3][0][][] */ -53,-71,9,-40,-89,2,-51,-121,-5,12,41,-85,-69,-44,-127,-40, 
  /* [4][0][][] */ 68,-5,-24,49,-60,-7,-127,44,27,69,25,47,-3,-2,-58,-81, 
  /* [5][0][][] */ -87,59,-76,-41,64,-67,-16,-81,91,-23,6,-33,31,-127,-117,-103, 
  /* [6][0][][] */ -22,-39,-26,34,-96,68,38,-44,-14,-48,127,-28,-10,-8,-110,4, 
  /* [7][0][][] */ -30,90,127,-67,68,80,5,-53,45,55,-89,-24,56,-3,14,53, 
  /* [8][0][][] */ -40,12,52,-14,52,3,97,127,-89,-15,-83,-86,40,84,-63,-88, 
  /* [9][0][][] */ 38,61,120,2,-103,-59,-108,-120,58,14,127,37,-72,-114,43,-21, 
  /* [10][0][][] */ -3,-112,14,-70,-127,52,21,22,-32,-62,-6,38,-9,43,-108,4, 
  /* [11][0][][] */ 111,-55,-10,92,-125,-26,51,-8,127,106,-30,56,17,-83,-15,112, 
  /* [12][0][][] */ -61,-33,127,-43,73,1,29,37,44,-35,93,83,-39,12,-97,29, 
  /* [13][0][][] */ -9,-32,4,39,9,17,127,34,-94,15,7,21,-31,120,92,-69, 
  /* [14][0][][] */ 127,-114,114,15,105,88,112,98,102,28,91,47,42,-52,29,-66, 
  /* [15][0][][] */ 5,127,27,-54,37,116,-81,72,-55,-32,-36,-10,-30,122,-13,-54, 
  /* [16][0][][] */ -46,69,117,-49,27,84,3,-14,-6,18,-17,46,89,-2,90,127, 
  /* [17][0][][] */ -1,98,63,-127,48,-27,17,-69,-44,87,-36,46,-75,-21,85,-38, 
  /* [18][0][][] */ -72,2,-81,-74,98,82,-50,-74,29,82,127,77,4,119,-33,-7, 
  /* [19][0][][] */ 30,122,78,74,52,-25,-14,-2,-31,127,44,118,51,63,-61,32, 
  /* [20][0][][] */ 84,-7,6,65,-57,-6,-34,55,-30,-58,-127,-57,80,-46,15,-14, 
  /* [21][0][][] */ -86,-71,-17,99,-28,-5,-127,65,13,7,19,16,-35,20,-73,1, 
  /* [22][0][][] */ -3,15,-92,-61,127,11,-39,75,75,96,35,59,-39,27,-5,50, 
  /* [23][0][][] */ -83,8,-17,28,1,66,114,106,-15,127,-11,-36,-1,19,-75,-6, 
  /* [24][0][][] */ 37,-80,35,-12,127,58,78,-60,51,41,56,53,-77,52,7,-13, 
  /* [25][0][][] */ 127,-56,73,24,0,-15,-29,82,106,-27,-60,-2,125,-62,99,46, 
  /* [26][0][][] */ 46,24,106,91,90,-15,-73,7,9,65,26,127,21,-69,21,-73, 
  /* [27][0][][] */ -48,50,-92,28,-35,127,28,-82,45,-76,122,18,24,-46,117,123, 
  /* [28][0][][] */ -101,37,-103,-122,37,-72,-3,-18,-127,76,-20,40,-51,34,-33,104, 
  /* [29][0][][] */ 86,97,-71,43,20,77,-41,-25,50,50,3,54,-127,9,-29,71, 
  /* [30][0][][] */ -27,73,-127,-44,73,-38,19,1,-60,45,-62,-16,12,69,-21,116, 
  /* [31][0][][] */ 25,-107,77,39,54,-63,-74,37,0,-10,29,-37,-77,34,25,127, 
  /* [32][0][][] */ -46,90,-6,25,-127,57,30,38,-1,-126,25,-77,53,62,61,62, 
  /* [33][0][][] */ -74,-1,56,98,-9,18,-49,13,-50,-61,20,-21,-18,5,4,127, 
  /* [34][0][][] */ -18,10,-78,-109,66,-21,-18,51,18,-6,9,-8,-42,-28,-36,127, 
  /* [35][0][][] */ 71,-9,23,-9,0,21,-84,-25,-9,-127,-54,18,-15,-34,48,-27, 
  /* [36][0][][] */ 2,35,-127,-23,34,122,-19,34,-13,20,51,37,10,28,-79,62, 
  /* [37][0][][] */ 46,35,56,-43,50,-127,46,-30,-107,52,-85,-34,3,14,85,29, 
  /* [38][0][][] */ -46,127,20,-58,44,34,64,-95,0,-10,-86,45,-49,-88,-98,3, 
  /* [39][0][][] */ 83,38,-123,-112,-9,-15,18,-69,13,-1,-1,-38,50,3,-127,-73, 
  /* [40][0][][] */ -35,22,-77,-70,-58,-8,22,-127,-6,-6,3,-34,25,68,41,62, 
  /* [41][0][][] */ -33,-95,-13,127,9,-28,-64,-5,-7,-41,72,-59,-57,-1,4,15, 
  /* [42][0][][] */ -32,56,-23,-127,22,27,-7,-5,63,-1,-34,25,71,-21,-23,5, 
  /* [43][0][][] */ -5,57,3,13,113,28,14,4,16,54,0,-79,-127,-41,-2,-10, 
  /* [44][0][][] */ 82,-11,29,39,-27,-8,7,27,30,-32,23,7,127,0,-51,-36, 
  /* [45][0][][] */ 9,-96,-67,38,-32,-84,-6,44,31,-30,19,46,-93,127,31,-41, 
  /* [46][0][][] */ -17,-89,59,75,5,-21,-120,66,30,-44,47,-15,41,84,94,127, 
  /* [47][0][][] */ -47,-58,14,86,2,5,58,21,13,-67,-127,-36,31,-33,-76,14, 
  /* [48][0][][] */ -87,95,-36,-22,-4,70,1,-91,35,-17,56,-35,36,-127,-31,1, 
  /* [49][0][][] */ -70,-1,43,-33,0,0,122,127,-26,-32,-10,18,-49,27,-56,31, 
  /* [50][0][][] */ 55,22,-72,32,43,-127,-44,-5,-71,59,-49,-5,21,-97,-125,-56, 
  /* [51][0][][] */ -38,75,-38,105,-24,55,-37,-72,-41,-75,-8,-55,-11,42,-19,127, 
  /* [52][0][][] */ -120,21,15,-15,31,41,63,7,20,-79,-46,-43,-107,-58,-127,-11, 
  /* [53][0][][] */ -49,-59,-60,-127,-34,-12,12,68,41,-49,-42,23,-33,25,56,110, 
  /* [54][0][][] */ 46,-43,1,-24,-104,41,63,-58,-52,-111,55,35,-4,-30,-127,43, 
  /* [55][0][][] */ -12,-24,-38,24,66,-22,67,81,-56,-56,-127,-34,53,-29,-24,34, 
  /* [56][0][][] */ 79,-27,-45,-49,-109,18,-127,-16,-32,-31,-25,9,103,-32,48,2, 
  /* [57][0][][] */ -47,28,7,-28,127,55,53,22,-32,57,-6,13,-81,80,-108,-15, 
  /* [58][0][][] */ 31,5,3,-30,48,-13,-45,-66,55,-127,-70,2,-74,-57,-36,53, 
  /* [59][0][][] */ -85,-34,-9,24,11,67,-113,-38,95,127,-79,8,-22,5,-18,5, 
  /* [60][0][][] */ 30,-48,10,14,-127,-50,28,-1,-20,41,-19,50,13,-35,40,44, 
  /* [61][0][][] */ 19,38,-84,-16,-53,-12,-127,-82,-20,13,45,108,63,-53,103,62, 
  /* [62][0][][] */ 55,-20,37,-11,-25,39,44,121,-57,127,15,87,38,37,88,91, 
  /* [63][0][][] */ 21,-121,-8,-29,-62,7,47,-24,-19,-25,1,-14,-28,127,109,37, 
  /* [64][0][][] */ -14,4,-127,-36,15,53,34,-6,-12,-82,48,-8,68,-32,-45,96, 
  /* [65][0][][] */ -17,-10,68,61,91,-15,78,88,-37,-7,-127,-79,24,106,-83,-21, 
  /* [66][0][][] */ -55,-127,9,-114,-46,-109,27,-21,-10,-32,36,109,-66,-49,-66,77, 
  /* [67][0][][] */ -27,-66,-69,-12,-70,86,-16,-127,-68,5,-44,-86,26,-21,-58,44, 
  /* [68][0][][] */ 127,51,36,-20,-70,10,-78,-40,-80,-114,-18,1,51,-35,87,-54, 
  /* [69][0][][] */ 44,10,68,-26,-9,-61,-47,41,-25,127,-36,-1,-4,37,86,-34, 
  /* [70][0][][] */ 31,6,-33,59,-89,36,-7,-91,101,127,18,57,31,-40,-11,22, 
  /* [71][0][][] */ 127,-77,90,101,-64,-51,38,-14,127,17,-61,49,84,-81,27,33, 
  /* [72][0][][] */ -31,-23,35,93,54,6,-127,97,86,-3,50,14,-68,-74,-75,87, 
  /* [73][0][][] */ 51,10,63,-127,70,-89,-82,43,-19,107,-32,23,11,-95,16,-50, 
  /* [74][0][][] */ 100,6,42,43,-127,-38,38,-7,-74,-40,5,-46,38,-83,5,15, 
  /* [75][0][][] */ 77,127,-117,18,58,59,-28,-25,-24,-31,59,82,-127,64,68,87, 
  /* [76][0][][] */ -74,-30,14,-56,-51,-19,90,0,-71,32,102,41,-52,-127,-19,96, 
  /* [77][0][][] */ -52,127,-15,3,-50,-70,39,66,34,-43,-14,71,-25,51,-2,85, 
  /* [78][0][][] */ 125,63,-69,18,-76,60,-127,-25,-11,0,-71,14,44,-113,18,74, 
  /* [79][0][][] */ -74,-38,102,55,-22,-65,-45,-61,-34,-5,20,-5,-65,127,-58,65, 
  /* [80][0][][] */ 80,107,30,-127,-8,37,82,-41,5,17,-43,28,80,-38,6,-16, 
  /* [81][0][][] */ 33,-61,3,-127,101,40,-28,117,94,14,-3,-29,-33,28,-86,-61, 
  /* [82][0][][] */ 61,41,58,14,127,-79,18,37,14,111,-33,33,-22,-46,26,-88, 
  /* [83][0][][] */ -21,91,29,8,82,46,127,96,0,44,-31,-69,-87,98,-53,-88, 
  /* [84][0][][] */ 8,-58,4,93,-6,-94,-65,43,-68,60,-62,-13,-127,52,5,-52, 
  /* [85][0][][] */ -99,57,-29,-37,0,-52,-66,-47,-27,50,11,-58,-127,-88,-82,33, 
  /* [86][0][][] */ -8,58,96,105,31,-46,46,15,-1,18,-55,-71,23,68,-127,-56, 
  /* [87][0][][] */ -22,48,127,-37,-84,-25,18,12,29,-26,13,46,-58,20,-6,3, 
  /* [88][0][][] */ -19,-65,-127,34,32,46,3,16,-10,-72,-122,-101,115,-10,5,48, 
  /* [89][0][][] */ 31,24,16,-115,8,-61,-48,47,127,-10,21,-102,2,-40,53,-82, 
  /* [90][0][][] */ -4,64,15,15,-41,44,33,114,7,-51,-9,127,45,15,-29,78, 
  /* [91][0][][] */ -61,12,-22,75,76,55,-34,-98,-29,42,-14,17,-108,-127,-53,-14, 
  /* [92][0][][] */ -39,65,-9,-14,-127,12,-78,53,-35,52,96,65,-26,-3,57,15, 
  /* [93][0][][] */ 106,31,87,48,-127,-77,16,32,-11,-69,-15,-57,14,-41,-9,0, 
  /* [94][0][][] */ -40,-127,24,-104,11,30,-23,8,75,-25,6,52,12,66,-46,49, 
  /* [95][0][][] */ -48,-69,-22,-56,127,103,-35,51,96,47,-72,53,-25,115,-87,31, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant32_scale = { 96, { 0.0017483626725152135, 0.001357001718133688, 0.0022395572159439325, 0.0028299789410084486, 0.0019949853885918856, 0.0010771164670586586, 0.0012560668401420116, 0.0020676311105489731, 0.0022249219473451376, 0.0012445432366803288, 0.0029264003969728947, 0.0017802243819460273, 0.0023996082600206137, 0.0021309787407517433, 0.0021734402980655432, 0.0021098472643643618, 0.0020906110294163227, 0.0012815535301342607, 0.0015424943994730711, 0.002301917877048254, 0.0019887718372046947, 0.0008569277124479413, 0.0011665346100926399, 0.0024635929148644209, 0.002333722310140729, 0.0021039445418864489, 0.0011637224815785885, 0.0014714633580297232, 0.0023051167372614145, 0.002132160821929574, 0.0013455377193167806, 0.0030147668439894915, 0.00093111873138695955, 0.0023713414557278156, 0.002659292658790946, 0.0020985000301152468, 0.0022144506219774485, 0.0013139470247551799, 0.0020569772459566593, 0.0022071674466133118, 0.0021277973428368568, 0.0022699972614645958, 0.0031080523040145636, 0.0037718450184911489, 0.0035194964148104191, 0.0021335394121706486, 0.0017963116988539696, 0.0018425497692078352, 0.0035045982804149389, 0.0031680702231824398, 0.001177953090518713, 0.0019506519893184304, 0.0023394261952489614, 0.0034670454915612936, 0.0023932789918035269, 0.0020894119516015053, 0.0034118052572011948, 0.0025607927236706018, 0.0015326275024563074, 0.0020687268115580082, 0.0031228621955960989, 0.0016241215635091066, 0.0021432766225188971, 0.0018270766595378518, 0.0022692694328725338, 0.0014151211362332106, 0.0018801938276737928, 0.002796549117192626, 0.0018792689079418778, 0.002417129697278142, 0.0018129079835489392, 0.0019574258476495743, 0.0016243704594671726, 0.0013627636944875121, 0.0019994457252323627, 0.0013651563785970211, 0.0026596309617161751, 0.0027115349657833576, 0.0029035832267254591, 0.0022830537054687738, 0.0016790832160040736, 0.0017366051906719804, 0.0012419777922332287, 0.0028938292525708675, 0.0031215192284435034, 0.0024424453731626272, 0.0023999353870749474, 0.0032362921629101038, 0.00085817795479670167, 0.0023157284595072269, 0.0038849429693073034, 0.0031016366556286812, 0.00074806221527978778, 0.0019425327191129327, 0.0029240876901894808, 0.0017711584223434329, } };
const TfArray<96, int> quant32_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data33[96] = { 6323, 3549, 1253, -1038, 5003, 11221, 10106, 2079, -327, 9050, 1005, -3926, 3017, 2811, 465, -686, 4340, 8549, -623, 261, 4595, 15587, 11100, -1586, -3345, -1044, 10704, -90, 1527, 1311, 9157, -1221, 13648, 3097, 3538, -5127, 813, -7207, 546, 2133, 3189, 1690, 1745, -334, 1012, 2845, 4816, 5219, 2325, 2519, 8885, 3415, -2378, 1397, 1643, 2955, 1495, 1815, 7675, 1597, -1147, 6551, 3752, 4993, 3816, 7921, -5324, 2412, 4580, -1198, 5733, 1365, 4089, 4421, 3924, 3008, -875, 1974, 1987, 3196, 4298, 3810, 9081, 168, 1381, 4078, 860, -1166, 16508, -444, 378, -1206, 18396, 3096, -103, -1138, };
const TfArray<1, int> tensor_dimension33 = { 1, { 96 } };
const TfArray<96, float> quant33_scale = { 96, { 0.0001174764838651754, 9.1180045274086297e-05, 0.00015048096247483045, 0.00019015275756828487, 0.00013404763012658805, 7.2373921284452081e-05, 8.4398001490626484e-05, 0.00013892886636313051, 0.0001494975876994431, 8.3623708633240312e-05, 0.0001966315321624279, 0.0001196173470816575, 0.0001612351625226438, 0.00014318533067125827, 0.00014603842282667756, 0.00014176545664668083, 0.00014047294098418206, 8.611051453044638e-05, 0.00010364372428739443, 0.00015467112825717777, 0.00013363012112677097, 5.7578930864110589e-05, 7.8382130595855415e-05, 0.00016553443856537342, 0.00015680813521612436, 0.00014136884419713169, 7.8193173976615071e-05, 9.8870987130794674e-05, 0.00015488606004510075, 0.0001432647550245747, 9.0409754193387926e-05, 0.00020256907737348229, 6.256399501580745e-05, 0.00015933586109895259, 0.0001786839566193521, 0.00014100300904829055, 0.00014879400259815156, 8.8287102698814124e-05, 0.00013821299944538623, 0.00014830462168902159, 0.00014297156303655356, 0.00015252630691975355, 0.00020883714023511857, 0.00025343889137730002, 0.0002364830143051222, 0.00014335739251691848, 0.00012069829244865105, 0.00012380513362586498, 0.00023548197350464761, 0.00021286988339852542, 7.9149358498398215e-05, 0.00013106876576784998, 0.00015719138900749385, 0.00023295871505979449, 0.00016080988280009478, 0.00014039236702956259, 0.00022924700169824064, 0.0001720655127428472, 0.00010298074630554765, 0.00013900248450227082, 0.00020983224385417998, 0.0001091284430003725, 0.00014401166117750108, 0.00012276545749045908, 0.00015247739793267101, 9.5085226348601282e-05, 0.00012633451842702925, 0.00018790652393363416, 0.0001262723671970889, 0.0001624124706722796, 0.00012181343481643125, 0.00013152392057236284, 0.00010914516315096989, 9.1567206254694611e-05, 0.00013434732682071626, 9.1727975814137608e-05, 0.00017870668671093881, 0.00018219422781839967, 0.00019509840058162808, 0.0001534035982331261, 0.00011282144259894267, 0.00011668647493934259, 8.3451326645445079e-05, 0.00019444299687165767, 0.00020974200742784888, 0.00016411348769906908, 0.00016125715046655387, 0.00021745386766269803, 5.7662939070723951e-05, 0.0001555990893393755, 0.00026103819254785776, 0.00020840605429839343, 5.0264010496903211e-05, 0.00013052321446593851, 0.00019647613225970417, 0.00011900818208232522, } };
const TfArray<96, int> quant33_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data34[1*3*3*96] = { 
  /* [0][0][][] */ 23,127,6,8,-27,7,42,50,50,-77,-86,22,-13,-45,32,-37,-93,20,29,24,40,59,70,88,31,-18,-40,-10,-12,3,10,-20,-66,-4,-24,115,14,47,10,-9,29,-43,-12,28,-83,-34,6,-21,2,-60,-24,-8,-4,50,-19,-15,-45,-61,-38,-127,-127,0,-101,3,-36,47,13,-13,-41,51,38,1,-34,4,43,-11,-7,-47,-42,25,-6,-63,45,-31,-107,-38,-15,27,-117,19,-107,46,73,-6,49,4, -47,-18,8,63,-12,96,-25,4,63,51,-127,59,-35,-77,-50,127,-105,70,60,85,127,7,103,116,42,19,18,45,-7,127,-19,-127,73,75,10,56,88,95,-34,-127,127,-15,74,127,-33,-91,127,-65,-5,-127,-82,-34,0,127,-44,-127,0,27,-99,-91,16,-127,-52,99,-46,91,66,-22,8,127,127,3,-50,25,-29,-105,12,-69,20,127,-24,-17,127,-70,-91,-46,111,75,91,117,-74,15,127,-31,127,35, 2,-62,10,5,-11,-11,-19,56,27,86,-101,26,-10,39,25,-74,-22,21,20,12,39,46,61,127,34,-40,29,45,-9,23,-11,-50,-30,-82,-28,69,-22,-9,-1,16,-15,24,-21,46,-36,-35,-2,12,25,-92,14,10,-3,-7,18,6,40,-69,14,-77,-112,26,-83,0,44,12,-24,-4,-20,-26,13,5,-10,-25,-11,18,10,-24,-95,0,-8,-45,42,-21,40,-33,-2,-16,-94,8,-21,44,13,47,30,-11, 
  /* [0][1][][] */ 85,-5,65,93,9,-49,122,48,-38,-105,-125,127,18,-106,-43,34,-65,-48,69,20,-92,8,-127,-79,-6,54,-115,127,-22,85,127,77,13,58,3,127,-127,56,-15,-66,64,-127,17,63,-127,-52,0,-127,-87,-122,-127,18,127,-51,71,-23,-127,-7,-79,-9,-74,-79,-35,61,-103,-18,46,-82,-42,26,-61,-127,-121,75,127,-94,82,60,-84,-45,127,-93,-37,127,-84,1,5,99,-1,24,-57,34,-5,-83,66,-15, -127,15,-32,127,-65,-127,-127,-127,75,28,-48,42,-62,-127,-48,96,-127,-127,127,127,42,-127,-113,90,-127,127,16,72,-52,-25,-97,69,-127,93,127,-27,19,127,127,-117,-57,22,17,54,-15,-127,-81,-93,0,-115,-100,127,8,91,61,-85,23,14,109,-29,-30,-52,-127,127,-18,-127,127,127,12,62,-86,-82,-51,65,-100,-127,127,127,112,-43,-105,8,-90,88,-127,-70,127,127,127,127,-127,-127,-97,-56,97,127, 47,5,108,72,13,-21,9,37,-53,127,-91,69,25,-10,-127,74,23,-32,33,7,-96,7,-71,-56,2,7,127,-12,127,106,25,-102,-27,-127,-16,121,-119,-12,-27,-57,-23,91,26,108,-28,-33,-12,-71,127,-82,-92,-10,39,-81,-127,31,90,2,-127,61,-66,-59,7,62,127,-39,-29,-16,-51,-9,-42,-49,-127,-127,-5,-48,-12,-37,-127,-42,-92,-127,-15,116,-88,24,-9,-11,-33,-5,-7,49,-22,127,17,-16, 
  /* [0][2][][] */ 20,-87,21,-16,8,20,38,42,-40,-46,-2,-42,24,3,22,42,-10,14,-13,33,7,45,17,-53,5,65,4,-13,16,8,7,22,-29,-19,-29,-3,41,16,6,-18,-1,14,-7,-26,-10,-36,-22,6,-23,18,-26,29,-11,-6,-42,-8,-12,17,12,29,-26,4,44,-8,-28,46,-42,-25,23,-2,22,97,29,16,14,2,-34,-39,0,10,5,-20,-5,-34,-86,30,-45,-6,-88,39,-7,27,-6,8,-21,-22, -47,30,127,2,127,77,-32,7,-127,33,-65,-27,127,-7,-32,28,14,53,-11,-62,34,20,45,-12,69,-64,-1,32,-1,125,-13,19,-53,25,8,-46,47,34,28,-82,-25,0,-127,16,-5,-21,-46,-46,-13,-43,-37,107,81,-54,-61,-70,-24,127,-21,16,121,-112,98,78,-23,24,-35,-11,127,-30,13,100,-44,18,-24,-64,-25,-96,-17,-35,-25,-71,-19,-82,-119,127,36,6,84,25,46,30,-25,-13,-17,-7, 18,91,25,-14,2,1,-19,37,1,82,61,-1,9,10,0,49,-19,5,-4,23,-2,36,-19,-12,16,42,22,43,22,18,-15,-55,-68,-23,-13,-39,40,-38,-15,2,-8,-7,-4,14,-47,-16,-21,-16,17,38,-11,12,-7,-5,25,15,-3,-1,42,46,-31,21,33,-16,43,10,-48,9,7,-4,-3,80,-6,-18,-9,0,-28,-24,26,6,-19,-52,-17,-12,-66,37,-48,-62,-73,32,21,21,-21,8,-6,-11, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant34_scale = { 96, { 0.014336887747049332, 0.0083901025354862213, 0.004353587981313467, 0.0077827177010476589, 0.010341388173401356, 0.013109132647514343, 0.01533960085362196, 0.0093834409490227699, 0.01219768263399601, 0.0068449988029897213, 0.004428353626281023, 0.015892446041107178, 0.010227828286588192, 0.0047403951175510883, 0.0085945548489689827, 0.0056404927745461464, 0.004813329316675663, 0.0081251310184597969, 0.0052334754727780819, 0.0048289853148162365, 0.0089760599657893181, 0.014177713543176651, 0.010091104544699192, 0.0078743631020188332, 0.017601355910301208, 0.01160118356347084, 0.011627223342657089, 0.004526061937212944, 0.012470044195652008, 0.0031421382445842028, 0.016824552789330482, 0.010473302565515041, 0.0075897895731031895, 0.0085251787677407265, 0.01342293992638588, 0.029327427968382835, 0.0097312405705451965, 0.019775360822677612, 0.014448290690779686, 0.0062459520995616913, 0.0081571126356720924, 0.010171189904212952, 0.011538174003362656, 0.0055038277059793472, 0.0057342634536325932, 0.0039447802118957043, 0.0081341434270143509, 0.0063550276681780815, 0.0091028884053230286, 0.0051560970023274422, 0.0055771959014236927, 0.0053235557861626148, 0.015153700485825539, 0.0073775113560259342, 0.009465307928621769, 0.007822682149708271, 0.0095844781026244164, 0.0093740783631801605, 0.0084983371198177338, 0.0048541207797825336, 0.0067990687675774097, 0.0057477820664644241, 0.0057036383077502251, 0.0043822238221764565, 0.0081564430147409439, 0.01083596795797348, 0.023515619337558746, 0.0093100490048527718, 0.011449912562966347, 0.010162545368075371, 0.011527480557560921, 0.0073058786801993847, 0.0054048052988946438, 0.011261376552283764, 0.016136350110173225, 0.003887284779921174, 0.0096725029870867729, 0.0081667555496096611, 0.0092774396762251854, 0.0097752809524536133, 0.0099529409781098366, 0.0058510513044893742, 0.010296679101884365, 0.0069592529907822609, 0.0036616169381886721, 0.0088438540697097778, 0.0066401911899447441, 0.0097263678908348083, 0.0093927290290594101, 0.0089520430192351341, 0.003619359340518713, 0.013559484854340553, 0.010843117721378803, 0.012733451090753078, 0.0051403776742517948, 0.01393510214984417, } };
const TfArray<96, int> quant34_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data35[96] = { 1316, -3302, -3332, -4355, -2019, 1462, 236, -1171, -205, -6406, 9519, -1917, -2561, 9868, 5625, -4747, 13458, 1472, -5816, 793, -3707, -1482, 801, -2010, 439, -3015, -2382, -4350, -1920, -8853, -668, 101, 12023, 626, -1531, 215, 414, -1018, -629, 7614, 809, 170, 1553, -5889, 10373, 14272, 1025, 12753, -1859, 13387, 12632, -3303, -630, -1534, 624, 9832, -166, -258, 9319, 7691, 7214, 13066, 7451, -8435, 988, 767, -1097, 2718, -1622, -1346, 1056, 1519, 11378, -787, -418, 12514, -188, 2013, 5975, -793, 2537, 12705, -1700, 2511, 18310, -732, -3786, -2894, 1150, -6444, 13489, -259, -659, -634, -3788, -3187, };
const TfArray<1, int> tensor_dimension35 = { 1, { 96 } };
const TfArray<96, float> quant35_scale = { 96, { 0.0003244511317461729, 0.00018987232760991901, 9.8523931228555739e-05, 0.00017612689407542348, 0.00023403091472573578, 0.0002966664033010602, 0.00034714303910732269, 0.00021235208259895444, 0.00027603982016444206, 0.0001549058360978961, 0.00010021591151598841, 0.00035965419374406338, 0.00023146100284066051, 0.00010727757035056129, 0.00019449918181635439, 0.00012764724669978023, 0.00010892810678342357, 0.0001838758762460202, 0.00011843623360618949, 0.00010928241681540385, 0.00020313283312134445, 0.00032084892154671252, 0.00022836687276139855, 0.00017820087668951601, 0.0003983277129009366, 0.00026254073600284755, 0.0002631300303619355, 0.00010242710413876921, 0.00028220348758623004, 7.1108202973846346e-05, 0.00038074824260547757, 0.00023701621103100479, 0.00017176082474179566, 0.00019292916113045067, 0.00030376799986697733, 0.00066369475098326802, 0.00022022296616341919, 0.0004475265450309962, 0.00032697222195565701, 0.0001413490972481668, 0.00018459964485373348, 0.0002301792410435155, 0.00026111479382961988, 0.00012455444084480405, 0.00012976932339370251, 8.9272398327011615e-05, 0.00018407983588986099, 0.00014381753862835467, 0.0002060030383290723, 0.00011668512161122635, 0.00012621479982044548, 0.00012047479685861617, 0.00034293602220714092, 0.00016695685917511582, 0.00021420477423816919, 0.00017703131015878171, 0.00021690165158361197, 0.00021214020671322942, 0.00019232172053307295, 0.00010985124390572309, 0.00015386640734504908, 0.00013007524830754846, 0.00012907625932712108, 9.91719716694206e-05, 0.00018458448175806552, 0.00024522352032363415, 0.00053217052482068539, 0.00021069118520244956, 0.00025911739794537425, 0.00022998360509518534, 0.00026087279547937214, 0.00016533577581867576, 0.0001223135186592117, 0.00025485071819275618, 0.00036517388070933521, 8.7971246102824807e-05, 0.00021889370691496879, 0.00018481786537449807, 0.00020995321392547339, 0.00022121962683741003, 0.00022524016094394028, 0.00013241228589322418, 0.00023301912005990744, 0.00015749146405141801, 8.2864266005344689e-05, 0.00020014094479847699, 0.00015027093468233943, 0.00022011269174981862, 0.00021256227046251297, 0.00020258931908756495, 8.1907957792282104e-05, 0.00030685809906572104, 0.00024538530851714313, 0.00028816453414037824, 0.00011632938549155369, 0.00031535851303488016, } };
const TfArray<96, int> quant35_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data36[16*1*1*96] = { 
  /* [0][0][][] */ -94,49,54,-26,-62,-10,-69,-3,-50,5,-13,-28,25,38,31,-44,16,-6,89,5,3,-51,127,67,48,13,15,25,-57,-99,-89,3,-38,-40,17,15,14,20,2,23,-7,-8,-72,14,-55,-21,-4,82,-15,16,-48,-17,10,3,23,-46,-108,-1,-18,67,58,21,-6,3,-37,-54,-52,26,-60,-63,13,-12,9,-17,-70,-42,-48,10,-40,12,-49,54,71,-65,10,39,0,38,23,-18,-4,-8,-30,-43,-58,10, 
  /* [1][0][][] */ 30,12,29,-45,-71,-31,-6,17,-17,11,50,-64,-1,-13,-77,-38,-13,3,-65,34,-17,-76,11,54,-16,-64,-11,-48,62,-121,116,-86,55,24,-7,45,45,72,-17,-40,36,23,-9,-5,5,58,-127,-48,-66,-61,-15,-36,44,-50,-43,46,10,-13,-35,13,22,54,-5,-102,-15,-21,-48,-11,10,-22,-81,-6,-50,-18,10,-78,15,15,41,-71,-20,-23,-97,-29,36,-46,-22,25,-83,-7,-62,38,28,69,-49,55, 
  /* [2][0][][] */ 90,-35,17,19,21,-72,60,0,-8,-7,-7,6,-72,-24,7,-38,-91,-57,-41,42,3,-57,-37,31,6,-75,15,-30,-22,45,-58,127,-49,126,-32,21,-10,-11,-11,-12,-105,73,78,22,-58,11,-23,-14,41,12,-35,-54,55,-22,-12,65,42,3,42,-8,15,47,-27,7,71,13,-11,-4,24,49,-50,-4,51,46,72,41,28,-62,72,49,86,-20,-34,25,-53,34,24,65,16,7,-18,36,-53,46,-21,38, 
  /* [3][0][][] */ 11,-1,-18,5,12,-12,2,-64,-21,70,42,71,31,-13,-48,42,9,-33,27,5,9,127,27,-42,11,17,-16,3,76,-29,65,-12,-20,26,-45,-23,9,51,36,8,-80,-40,-33,22,-26,37,20,-5,-7,-51,-6,-19,57,-91,-35,-48,14,110,-27,-3,-3,-11,-47,2,31,46,-56,4,-33,2,11,-70,-31,-54,44,-10,9,1,-52,-40,-32,-15,-55,2,-17,-34,31,-34,2,17,33,-13,45,15,-43,62, 
  /* [4][0][][] */ 32,5,-35,5,32,20,-41,8,-25,84,89,-11,-20,-1,12,-44,4,-15,-34,50,14,-40,46,83,-78,2,-127,14,-41,-58,15,8,-64,-49,32,57,7,42,33,12,-34,-38,50,-28,-10,12,-29,51,-29,49,13,20,35,-10,-77,14,52,-27,14,-3,43,-9,26,9,-41,15,-28,14,-43,32,-44,49,50,-56,-40,-48,31,-54,-12,7,-41,90,-77,5,-17,23,26,-53,52,2,28,0,-50,-20,29,26, 
  /* [5][0][][] */ -74,41,56,-9,47,-25,54,-46,-27,54,-7,-9,44,-29,-5,-40,-6,-38,58,20,-124,-27,-101,49,-55,-13,49,20,68,-60,1,51,58,110,-41,47,-25,21,39,-8,-31,95,89,-49,7,61,42,3,30,14,-14,37,22,-46,19,-76,52,-22,-62,-63,65,80,-57,-16,98,-39,-106,-72,-66,-17,-59,-20,-25,1,-16,-55,17,-40,-61,-29,127,-31,14,-107,-103,43,8,-25,-56,38,23,-15,-23,20,10,94, 
  /* [6][0][][] */ 55,-20,-93,25,-37,-126,98,87,-65,81,-12,94,-114,-77,57,57,5,-67,-8,-1,-11,-19,-81,-57,-58,38,87,25,46,38,98,-48,32,8,14,-65,5,12,38,75,2,13,-50,-20,8,-60,-88,18,49,-116,-27,78,49,10,-18,-71,78,59,8,1,-107,58,-101,-2,30,0,-8,59,35,31,-8,-61,-34,14,108,38,61,-13,33,-81,-11,-64,-75,69,7,-65,51,13,-44,61,42,47,-27,5,-40,127, 
  /* [7][0][][] */ 40,74,-51,-61,-27,-20,40,2,-60,40,-45,-53,-37,24,6,-16,-40,-55,-35,51,2,124,-1,28,-24,8,13,22,52,42,80,-29,78,35,-26,8,-6,-7,8,35,-75,-9,20,-64,15,-41,67,-36,39,-74,-90,-26,-43,2,-2,-20,32,28,-108,7,-1,127,26,-33,-27,-6,-55,22,-42,-26,-103,26,14,79,-34,53,-64,59,4,-83,-24,-65,58,-79,47,-27,-1,-10,1,78,-79,41,50,-33,-43,25, 
  /* [8][0][][] */ -8,83,-39,44,-26,-25,-81,29,-92,-20,2,5,-40,32,37,90,-4,-44,8,9,31,1,0,-6,-43,73,-7,29,-15,-15,-39,-35,-25,-58,-31,-71,-53,27,47,2,-3,-36,27,4,-35,-38,12,-10,-14,-21,54,73,-1,-19,-77,98,-30,34,2,-31,-42,2,20,56,-29,-57,-38,-5,-37,7,5,7,-21,-48,-113,-21,-40,20,-75,-46,-28,7,-50,-40,-6,-1,18,29,8,58,-60,-18,-81,-127,25,-55, 
  /* [9][0][][] */ -20,28,-67,52,-37,-34,70,58,-13,40,-28,90,-32,-22,22,127,10,14,75,20,17,17,47,-94,-35,-1,23,-5,6,-12,43,45,-33,6,3,-110,34,-19,-27,-16,-13,23,37,-27,-11,-2,20,22,30,79,28,-4,-47,-71,-1,4,-6,-15,60,-26,-64,50,-55,-22,79,-8,-19,5,-62,22,42,39,-14,87,-27,-29,-25,16,-35,-6,55,-27,59,0,30,-20,-17,-29,-57,17,-4,1,67,30,-39,-2, 
  /* [10][0][][] */ 65,0,-43,4,-26,-20,80,7,21,-34,-24,-19,-97,-22,6,-4,-77,-27,29,26,43,41,37,2,-44,94,34,-3,-64,-84,-32,-20,72,-35,59,3,88,-90,82,127,18,-54,-2,1,-29,-97,-4,67,23,84,-68,-42,-21,32,11,46,22,-75,85,54,-18,49,-59,-17,-5,-49,35,66,30,-27,-8,54,120,48,16,-90,36,-58,69,-8,-42,39,33,23,-42,-12,11,52,-41,-13,25,55,52,77,-28,1, 
  /* [11][0][][] */ -65,-37,47,-57,24,-1,-22,-40,70,-54,3,-25,-10,-7,11,7,-68,-2,65,20,-44,24,-55,-84,24,23,-54,43,12,-64,31,-37,12,4,36,-41,-61,16,-115,20,-67,73,-65,52,22,5,0,-35,-8,-30,-63,-54,4,18,78,-71,-25,-88,28,-44,-33,-52,-17,-117,6,-58,86,85,127,18,71,-15,-24,-2,55,-39,103,31,55,55,33,0,-25,90,74,12,19,-6,-70,-63,-14,23,49,54,62,66, 
  /* [12][0][][] */ 47,-14,-7,-44,33,116,-14,30,51,67,6,60,21,53,10,-6,-60,45,13,48,127,-7,77,-67,38,22,-66,-75,-16,82,-4,16,37,-11,1,-35,44,0,-29,-41,16,-27,48,61,-19,44,-4,-14,-61,35,-4,21,-20,-36,16,14,-42,65,12,46,33,-92,16,-105,-12,93,-22,-32,-8,-47,63,20,-5,13,-8,55,-17,56,-81,-17,-25,25,124,13,-8,76,-27,-78,80,13,-80,65,68,1,-25,-93, 
  /* [13][0][][] */ -3,50,-14,-32,-36,-16,0,-38,4,-33,-30,-55,60,-100,-49,-76,-9,-31,-79,-23,-91,-38,7,100,-33,1,117,6,26,-28,51,52,16,8,-127,120,-41,-58,30,-48,106,6,-1,29,6,-87,54,-31,89,-12,-42,36,39,-6,-1,79,60,-35,-45,-20,55,45,1,-87,-9,31,-49,36,-72,-41,-72,6,-70,16,-35,-82,-109,23,24,80,-17,47,35,-91,47,31,24,-19,-21,-16,-9,30,-55,7,-24,3, 
  /* [14][0][][] */ -1,23,-78,-27,69,87,-98,-13,22,-37,82,10,22,-22,-37,-74,-67,17,33,127,12,-30,-17,12,5,33,-24,71,21,1,-20,13,72,-7,-55,14,-33,55,73,17,58,-7,35,4,0,-43,55,-41,37,-9,-13,-21,59,10,-36,35,16,77,-100,-14,-13,-69,-43,-108,10,-45,-69,-5,-87,48,-21,23,-6,-39,-16,-36,33,-8,-59,-37,26,-2,0,-24,-12,42,-19,-28,-36,65,72,19,-1,-49,-53,-65, 
  /* [15][0][][] */ -80,-55,27,-54,18,-28,-28,-80,-2,1,-6,54,-8,-10,14,80,-102,-14,19,-68,34,-28,12,-90,57,-5,44,-58,-77,-127,-80,31,-36,66,108,-103,9,-44,15,-24,-23,2,23,-1,-26,0,71,95,-67,-12,18,-53,-48,58,22,-62,-99,-37,98,11,-32,34,-85,26,-72,-8,31,27,60,-80,84,-15,54,-31,-44,-26,19,21,67,12,-14,78,61,36,12,-20,-110,17,-4,-42,-80,29,49,-20,-15,57, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant36_scale = { 16, { 0.002895912854000926, 0.0024304382968693972, 0.0026299026794731617, 0.0031412760727107525, 0.0028888396918773651, 0.0033906328026205301, 0.002601017476990819, 0.0021039661951363087, 0.0041329637169837952, 0.0031563043594360352, 0.0023414148017764091, 0.0026524330023676157, 0.0031653037294745445, 0.0030020165722817183, 0.0041786176152527332, 0.0036234748549759388, } };
const TfArray<16, int> quant36_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data37[16] = { 10705, 16823, -5360, 3099, -920, 9135, -570, 5021, 16315, -4944, -10766, 5789, -15366, 11112, 5967, 8208, };
const TfArray<1, int> tensor_dimension37 = { 1, { 16 } };
const TfArray<16, float> quant37_scale = { 16, { 6.8139124778099358e-05, 5.7186785852536559e-05, 6.1880062276031822e-05, 7.3912378866225481e-05, 6.7972701799590141e-05, 7.9779594670981169e-05, 6.1200415075290948e-05, 4.9505088099977002e-05, 9.7246207587886602e-05, 7.4265983130317181e-05, 5.50921140529681e-05, 6.2410188547801226e-05, 7.4477735324762762e-05, 7.0635687734466046e-05, 9.8320415418129414e-05, 8.5258230683393776e-05, } };
const TfArray<16, int> quant37_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data38[96*1*1*16] = { 
  /* [0][0][][] */ -6,101,-86,31,65,-30,104,68,-63,5,31,-81,72,127,-60,27, 
  /* [1][0][][] */ -26,-3,-58,-34,-8,32,21,-127,23,-51,-19,-50,-10,-57,-64,11, 
  /* [2][0][][] */ -20,-29,40,71,28,38,-108,127,-27,3,78,-57,-13,-77,-45,73, 
  /* [3][0][][] */ 92,-104,82,-14,0,-41,-40,127,-29,58,79,60,-7,56,7,16, 
  /* [4][0][][] */ -47,-28,-7,42,-97,9,-40,-127,3,-18,42,-10,36,45,113,125, 
  /* [5][0][][] */ 113,17,-12,-27,-74,8,19,63,11,-11,71,96,127,13,-96,9, 
  /* [6][0][][] */ 15,-28,-65,-45,-75,11,5,-48,-40,-46,-30,23,69,54,127,-11, 
  /* [7][0][][] */ -59,25,-31,-76,2,-61,-75,17,-87,45,-61,-55,-127,-42,9,91, 
  /* [8][0][][] */ 49,39,68,4,49,21,73,8,58,-28,39,4,-127,-24,-70,15, 
  /* [9][0][][] */ -47,63,28,-36,-18,-4,40,-5,-22,53,-47,7,39,127,26,20, 
  /* [10][0][][] */ 96,65,-49,61,-22,-14,66,-56,-77,-35,-71,-121,-127,-80,16,103, 
  /* [11][0][][] */ 49,3,65,4,-15,-34,4,107,-87,18,-27,7,-13,-5,56,127, 
  /* [12][0][][] */ -46,-21,18,-5,30,-9,127,54,-65,23,-1,-22,-8,83,-48,113, 
  /* [13][0][][] */ -2,20,27,41,124,32,82,114,-18,99,-74,-44,26,72,-127,-18, 
  /* [14][0][][] */ -118,127,14,-25,-6,4,59,4,-46,29,120,-2,-104,17,-49,50, 
  /* [15][0][][] */ -9,-13,-127,-39,84,-38,-79,-34,-18,-22,-22,-71,-4,-82,-49,41, 
  /* [16][0][][] */ 119,-12,8,-7,32,-28,51,-26,-44,13,127,49,50,9,-32,17, 
  /* [17][0][][] */ 20,11,-20,-104,-19,-68,104,-127,-7,-19,-40,39,41,72,8,55, 
  /* [18][0][][] */ 35,117,-5,-55,54,-85,-29,-53,-46,127,-23,1,-22,57,-14,-25, 
  /* [19][0][][] */ -68,-123,115,-104,40,-127,20,-35,37,34,95,109,29,-22,60,-23, 
  /* [20][0][][] */ -21,88,58,-1,11,-3,18,-24,60,-13,101,-23,-127,-35,-81,-3, 
  /* [21][0][][] */ -65,34,6,20,71,40,68,59,-127,44,-39,25,-25,14,-68,-20, 
  /* [22][0][][] */ 24,-88,53,18,21,-127,124,5,19,-53,-52,-85,53,-83,-49,-64, 
  /* [23][0][][] */ -58,-96,39,74,23,-12,29,-46,19,-35,78,-3,11,81,90,127, 
  /* [24][0][][] */ -7,-5,19,75,43,15,-56,-127,66,18,-34,21,3,13,-22,-19, 
  /* [25][0][][] */ -16,35,19,-49,-22,-3,16,-38,-23,52,-48,-13,37,127,16,3, 
  /* [26][0][][] */ -64,77,5,21,33,-88,-2,-33,15,24,8,69,12,3,-86,127, 
  /* [27][0][][] */ -20,-127,-56,15,-60,105,7,-57,25,-39,55,-38,32,-36,-105,-27, 
  /* [28][0][][] */ -38,-1,39,79,27,8,-44,-127,-123,46,110,-11,76,5,-50,-23, 
  /* [29][0][][] */ -122,104,-16,-39,-24,16,-127,-73,-49,-31,2,2,14,-66,-110,67, 
  /* [30][0][][] */ 53,68,-45,70,-96,-88,-77,-15,-43,-8,5,-105,127,32,-12,88, 
  /* [31][0][][] */ 127,32,-67,-27,-57,21,110,37,-54,-15,60,41,36,16,-23,4, 
  /* [32][0][][] */ -35,-20,127,2,-31,79,74,13,-23,-17,-11,21,6,73,58,41, 
  /* [33][0][][] */ -10,24,-72,-44,-18,35,127,24,7,-23,26,-75,103,107,-56,49, 
  /* [34][0][][] */ -96,-19,111,23,29,-53,117,-12,-127,43,33,-51,46,64,-46,-40, 
  /* [35][0][][] */ -3,18,-53,27,-67,127,-37,-11,-9,105,-8,74,-66,71,22,11, 
  /* [36][0][][] */ -15,-73,127,-49,-55,20,-38,-13,19,18,-51,80,-3,-88,-44,46, 
  /* [37][0][][] */ 73,-3,63,-22,118,-67,-42,33,-47,127,-72,-5,-101,-50,106,-26, 
  /* [38][0][][] */ 68,61,27,-111,-8,-53,-113,65,-105,71,-127,-73,-68,-126,-112,60, 
  /* [39][0][][] */ -86,23,-64,-26,-87,-77,78,18,-127,-34,18,80,33,3,2,53, 
  /* [40][0][][] */ 127,34,5,-87,-74,14,9,-42,-37,-20,-28,-71,13,46,22,38, 
  /* [41][0][][] */ 88,-82,-61,-51,-1,-6,-62,-18,54,-26,7,-50,127,-73,47,-29, 
  /* [42][0][][] */ -10,-91,-48,127,7,-91,-107,8,5,10,8,49,-66,70,-64,4, 
  /* [43][0][][] */ -90,-40,-49,-127,-57,1,7,82,41,-125,-42,25,-19,-56,-33,94, 
  /* [44][0][][] */ -47,35,53,-55,-11,-33,29,114,108,-85,81,111,127,28,-43,15, 
  /* [45][0][][] */ 23,73,-82,87,127,-105,-43,-68,106,-77,81,-59,-36,-16,-89,77, 
  /* [46][0][][] */ -19,-36,3,-11,100,-19,36,12,-10,127,-31,-120,29,65,-45,76, 
  /* [47][0][][] */ 81,-50,-32,-28,74,-24,-48,-64,-18,127,-21,43,-5,-111,-91,24, 
  /* [48][0][][] */ 12,18,-15,-127,-15,-59,91,-108,2,-3,-25,55,39,52,2,44, 
  /* [49][0][][] */ -26,126,-74,26,20,-60,55,42,-31,10,52,-69,-28,74,127,-86, 
  /* [50][0][][] */ 7,41,-23,7,-127,3,-62,-53,58,65,29,27,-44,-40,4,31, 
  /* [51][0][][] */ 127,-34,-51,-5,-41,92,-86,-29,52,-18,-46,56,-35,-61,3,31, 
  /* [52][0][][] */ -15,-46,52,83,-60,-99,-127,-13,-42,-62,-46,-84,15,-63,24,74, 
  /* [53][0][][] */ 16,100,36,-113,6,127,102,-16,-3,-21,-6,-43,83,-120,15,51, 
  /* [54][0][][] */ 28,111,13,-26,-7,-94,-104,51,-6,-27,-32,127,76,76,11,71, 
  /* [55][0][][] */ -36,-7,59,24,54,-33,115,91,-91,-3,15,9,127,54,2,-6, 
  /* [56][0][][] */ 127,18,18,17,-52,92,-55,-70,-28,41,-75,6,-45,84,-2,36, 
  /* [57][0][][] */ -38,-44,-42,-46,-55,-112,48,-26,-127,-20,64,72,25,17,-22,59, 
  /* [58][0][][] */ 49,-50,60,21,8,-62,-12,3,27,-13,-127,-29,23,-37,-33,41, 
  /* [59][0][][] */ 71,10,-127,91,16,33,86,-34,-67,-54,30,-106,-111,-73,23,112, 
  /* [60][0][][] */ -3,27,-4,12,-15,-36,-27,1,-43,-67,65,127,-36,-122,-41,4, 
  /* [61][0][][] */ -40,9,75,-99,-73,40,-9,102,-14,-97,77,80,72,-17,7,127, 
  /* [62][0][][] */ 78,43,-4,-127,-19,0,2,-35,-8,28,-36,45,26,-21,-81,-68, 
  /* [63][0][][] */ 4,-25,-2,-2,-66,-68,-59,7,-63,-13,-39,-24,127,1,56,-23, 
  /* [64][0][][] */ 29,-5,-9,47,-106,-56,-33,-91,46,119,45,6,48,-73,-53,127, 
  /* [65][0][][] */ -29,13,-28,-9,-90,93,32,-27,64,-125,103,-78,79,81,-127,59, 
  /* [66][0][][] */ -123,108,-106,-90,40,-35,-110,-81,-106,127,90,-5,-127,-61,47,61, 
  /* [67][0][][] */ 1,-38,-127,-123,68,74,6,-30,-35,-9,55,-16,33,34,12,57, 
  /* [68][0][][] */ 50,17,-6,-51,-63,32,10,32,-64,61,127,-10,-1,-50,-118,3, 
  /* [69][0][][] */ 90,-107,61,-64,12,-127,-40,115,-13,64,89,84,-8,57,-30,10, 
  /* [70][0][][] */ 49,12,107,41,90,-15,127,5,29,23,-67,32,-66,61,-73,30, 
  /* [71][0][][] */ 6,28,98,-81,-127,-85,11,10,-28,-11,25,-100,-80,-3,8,37, 
  /* [72][0][][] */ -56,-91,24,-116,76,-8,15,48,-67,18,-127,-22,59,122,-53,110, 
  /* [73][0][][] */ 21,15,54,-8,127,-95,-54,15,-29,101,-86,38,-83,-51,122,-17, 
  /* [74][0][][] */ -120,-4,-117,-81,68,-57,-49,27,-89,-1,-127,-33,-41,-74,-56,97, 
  /* [75][0][][] */ 95,-28,49,-38,28,14,-127,-19,-6,-108,54,-8,9,-9,-6,-24, 
  /* [76][0][][] */ 6,-49,-42,121,49,94,123,-67,90,-127,57,110,42,-101,-80,40, 
  /* [77][0][][] */ -33,-32,127,-29,30,-28,-26,-116,9,22,33,84,47,51,17,2, 
  /* [78][0][][] */ -48,7,18,-49,-1,-61,36,-19,16,-11,20,-86,-111,-80,-127,-46, 
  /* [79][0][][] */ -109,-82,-9,17,127,26,-24,25,16,23,-11,56,-38,-96,-75,-9, 
  /* [80][0][][] */ -1,-102,40,127,-43,-19,-91,89,-10,24,63,-8,-83,2,-10,57, 
  /* [81][0][][] */ 122,67,-14,86,-6,35,22,120,20,12,116,57,127,31,63,-24, 
  /* [82][0][][] */ -54,-2,12,-33,28,-127,-116,-77,-2,75,-38,-29,-25,90,-74,-19, 
  /* [83][0][][] */ 111,-21,76,-29,-41,-3,-127,-12,18,-112,13,-47,-11,-6,18,-23, 
  /* [84][0][][] */ 8,-77,-103,27,127,30,38,38,-110,16,-102,-22,46,-44,-80,19, 
  /* [85][0][][] */ 19,103,37,-46,82,4,59,-127,124,-30,30,-23,91,-78,22,-12, 
  /* [86][0][][] */ 118,-37,127,50,6,-59,81,38,-62,-60,-102,-48,34,10,-82,9, 
  /* [87][0][][] */ -7,5,17,-86,71,-33,-45,11,27,-39,78,-30,-80,-127,-11,32, 
  /* [88][0][][] */ -59,-31,38,1,23,34,-68,-44,6,12,-74,-127,-46,-35,-17,-20, 
  /* [89][0][][] */ -79,11,18,-71,25,2,-127,20,84,21,-68,-9,-18,-93,-48,-18, 
  /* [90][0][][] */ -6,-10,-30,-73,127,28,-51,37,44,58,22,-17,27,22,-54,-26, 
  /* [91][0][][] */ -41,-59,13,57,-51,-2,-2,68,-45,-55,25,-50,-6,71,30,127, 
  /* [92][0][][] */ -38,73,-9,-4,-14,68,-96,61,-12,-14,63,-2,-46,127,39,15, 
  /* [93][0][][] */ -5,77,-43,-79,64,80,-80,2,58,60,71,55,-127,25,-42,86, 
  /* [94][0][][] */ 20,59,91,11,-127,-38,4,-10,25,-20,28,-15,-56,-24,15,-24, 
  /* [95][0][][] */ -6,21,66,-4,127,-28,-91,81,12,5,-78,93,4,-12,93,-34, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant38_scale = { 96, { 0.002124216640368104, 0.0034230626188218594, 0.0019037221791222692, 0.0021562732290476561, 0.0012439746642485261, 0.0028207497671246529, 0.0017025434644892812, 0.0029177051037549973, 0.0021818578243255615, 0.0025199896190315485, 0.0014657956780865788, 0.0027256824541836977, 0.0019712755456566811, 0.0013567773858085275, 0.001996292732656002, 0.0020054441411048174, 0.0025344484020024538, 0.0020467294380068779, 0.0018983344780281186, 0.0015510607045143843, 0.0022307690232992172, 0.0029288248624652624, 0.0012823872966691852, 0.0018206620588898659, 0.003728773444890976, 0.0021260145585983992, 0.0021106554195284843, 0.0020009831059724092, 0.0018515314441174269, 0.0023320456966757774, 0.0018228694098070264, 0.0025620302185416222, 0.0023970326874405146, 0.0017460809322074056, 0.00171656534075737, 0.0014902889961376786, 0.0024672774598002434, 0.0016949233831837773, 0.0011469544842839241, 0.0017362651415169239, 0.0025456370785832405, 0.0024038222618401051, 0.0022953539155423641, 0.0018824235303327441, 0.0027741109952330589, 0.001863379031419754, 0.0023200614377856255, 0.0017267826478928328, 0.0010853824205696583, 0.0017850690055638552, 0.00225593033246696, 0.0022665616124868393, 0.001317792572081089, 0.002303597517311573, 0.0024614429567009211, 0.0021615356672555208, 0.0023766341619193554, 0.002039226470515132, 0.0020975996740162373, 0.0016473835567012429, 0.0024346518330276012, 0.0022929525002837181, 0.0023739614989608526, 0.0018331618048250675, 0.0015998169546946883, 0.0015852616634219885, 0.0014757520984858274, 0.0015087291831150651, 0.0025126510299742222, 0.0022982540540397167, 0.0019940147176384926, 0.0015473515959456563, 0.0016907714307308197, 0.0018335497006773949, 0.0014165887841954827, 0.0014001283561810851, 0.0016034474829211831, 0.0019017078448086977, 0.0019031970296055079, 0.0019012395059689879, 0.001016070949845016, 0.0020528978202491999, 0.0022784112952649593, 0.0020889933221042156, 0.0016073917504400015, 0.002158468822017312, 0.0015469953650608659, 0.0018148473463952541, 0.0024999142624437809, 0.0019721400458365679, 0.0019622251857072115, 0.0021825442090630531, 0.0018573248526081443, 0.0013717883266508579, 0.0025753402151167393, 0.0020124444272369146, } };
const TfArray<96, int> quant38_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data39[96] = { 1359, -63, 3348, 3845, 5539, -1617, 3804, -913, -2149, -531, 4964, -1778, 2888, 5045, 1782, 2209, -718, -497, -1692, 4351, 2072, -83, 2990, -699, -350, 3174, 1336, 1886, 4178, 1965, 3060, 1069, 1236, 4031, 4098, 4102, -395, 3030, 3622, -3314, -336, 1002, -128, 1590, -910, 388, -1165, 725, -7142, 1728, 1213, -2417, 6099, -27, 1469, 1197, 773, 2021, -757, -2057, 200, 1113, 324, 3736, 4603, 3160, 2870, 5211, 2879, -747, 2625, 4885, 3064, -1399, 5447, 6288, 398, -3595, 557, 1124, 9157, 1389, -467, -2229, 1444, 711, 2281, -2449, 2865, -451, 3322, 1084, 113, -3772, -108, 1255, };
const TfArray<1, int> tensor_dimension39 = { 1, { 96 } };
const TfArray<96, float> quant39_scale = { 96, { 0.00019436205911915749, 0.00031320416019298136, 0.00017418719653505832, 0.00019729517225641757, 0.00011382147204130888, 0.00025809361250139773, 0.00015577970771118999, 0.0002669648383744061, 0.00019963612430728972, 0.00023057457292452455, 0.00013411769759841263, 0.00024939511786215007, 0.00018036820983979851, 0.00012414272350724787, 0.00018265724065713584, 0.00018349458696320653, 0.00023189753119368106, 0.00018727211863733828, 0.00017369423585478216, 0.00014191929949447513, 0.00020411140576470643, 0.00026798227918334305, 0.00011733615974662825, 0.0001665873423917219, 0.00034117614268325269, 0.00019452655396889895, 0.00019312123185954988, 0.00018308640574105084, 0.00016941184003371745, 0.00021337805083021522, 0.00016678932297509164, 0.00023442122619599104, 0.00021932423987891525, 0.00015976330905687064, 0.00015706267731729895, 0.00013635879440698773, 0.00022575151524506509, 0.00015508248179685324, 0.00010494430171092972, 0.00015886517940089107, 0.0002329212729819119, 0.00021994547569192946, 0.00021002080757170916, 0.00017223841859959066, 0.00025382623425684869, 0.00017049587040673941, 0.00021228150581009686, 0.00015799755055923015, 9.9310564110055566e-05, 0.00016333065286744386, 0.00020641362061724067, 0.00020738637249451131, 0.00012057568528689444, 0.00021077509154565632, 0.00022521766368299723, 0.000197776680579409, 0.00021745781123172492, 0.00018658560293260962, 0.00019192665058653802, 0.00015073266695253551, 0.00022276632080320269, 0.00020980108820367604, 0.00021721326629631221, 0.0001677310501690954, 0.00014638040738645941, 0.0001450486306566745, 0.00013502870569936931, 0.00013804604532197118, 0.00022990311845205724, 0.00021028616174589843, 0.00018244881357531995, 0.00014157991972751915, 0.0001547025894979015, 0.00016776654229033738, 0.00012961536413058639, 0.00012810925545636564, 0.00014671259850729257, 0.00017400289652869105, 0.00017413914611097425, 0.00017396004113834351, 9.2968686658423394e-05, 0.00018783651466947049, 0.00020847059204243124, 0.00019113918824587017, 0.00014707350055687129, 0.00019749606144614518, 0.00014154733798932284, 0.00016605530981905758, 0.00022873771376907825, 0.00018044731405097991, 0.00017954011855181307, 0.00019969893037341535, 0.00016994192264974117, 0.00012551619147416204, 0.00023563906142953783, 0.0001841350895119831, } };
const TfArray<96, int> quant39_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data40[32*1*1*96] = { 
  /* [0][0][][] */ 17,63,32,-75,-73,19,-6,60,-23,-46,-127,-87,-98,97,-53,65,46,72,5,7,-41,-114,-37,32,88,-114,8,108,60,-74,62,-9,-81,86,27,-68,-18,10,-99,-18,-116,-42,107,-63,74,-14,-80,103,-122,71,-92,11,-22,58,3,53,-91,-77,-11,25,-8,92,19,-117,67,-106,-94,52,50,-72,-19,98,-52,36,-43,107,-39,-44,-30,-9,-104,39,64,19,-41,-74,-63,-42,14,36,31,61,-106,-83,-62,50, 
  /* [1][0][][] */ 52,10,71,40,24,-46,0,118,38,51,-78,66,-104,-119,27,-65,-42,-29,7,-23,95,57,-81,-64,22,-12,-23,-59,85,47,-21,-59,-90,-87,-87,-79,42,-65,-40,24,13,102,-4,35,42,6,-43,42,31,-127,0,-36,-8,-124,-45,-96,40,48,83,4,66,-70,-36,-28,115,-12,3,85,74,92,35,106,0,26,53,35,69,-58,117,-8,-74,100,-62,76,23,4,-124,41,-61,-55,59,-26,-47,19,34,13, 
  /* [2][0][][] */ 3,-70,-93,-127,-45,6,72,0,32,-51,-67,-57,52,79,-72,-123,-104,36,-43,29,-96,-54,27,23,-79,70,-49,-52,-28,-39,-88,30,50,-71,51,3,-87,18,-83,68,57,-39,113,76,-70,-21,53,23,-16,-55,2,88,-94,-82,-2,-83,-52,23,80,118,97,82,-70,99,111,93,-80,-84,-2,13,66,-25,32,4,-20,-78,95,114,-106,-83,-93,112,81,27,-78,34,43,27,75,76,80,116,-57,-34,83,77, 
  /* [3][0][][] */ -66,93,61,-75,104,108,78,75,127,30,48,-54,107,51,113,109,-106,84,-33,104,-59,85,-74,6,117,83,-92,18,57,37,-36,114,-92,35,31,-79,-88,-27,-72,-49,-80,-36,-62,23,-68,-96,-19,-16,-41,120,-24,-95,12,68,102,-62,-74,-94,67,-84,-78,34,-60,-27,19,89,-47,-29,-27,-38,99,13,87,99,-47,-69,-115,-41,80,-58,59,108,-70,-81,76,-77,100,-83,-29,-102,97,95,-78,-30,42,-30, 
  /* [4][0][][] */ -99,28,84,-9,60,6,-26,-57,19,53,-115,-63,-76,95,19,-103,83,27,-54,-78,-100,66,-113,-30,-38,-127,88,42,12,-119,117,28,-116,44,-56,-59,97,-15,-124,-114,103,100,-103,-110,-17,88,-48,-45,98,-39,109,108,90,-121,-6,40,-113,-28,105,-66,82,-33,-30,86,-58,30,-121,-82,21,100,29,-15,-64,-2,17,-70,-28,86,-43,42,32,-109,46,7,55,118,10,-68,-32,-16,97,61,94,-21,-114,-110, 
  /* [5][0][][] */ -104,114,-41,-50,26,-11,-46,69,-9,-93,46,40,-79,16,108,109,-101,114,91,-4,109,-9,-51,108,-127,42,-28,-55,-24,41,63,-3,-75,62,63,49,112,-66,-57,-32,79,-2,-10,-49,108,117,-1,-3,32,81,97,54,-81,-65,50,-39,102,-38,-72,65,64,72,-10,67,74,-54,50,50,100,-54,27,5,-99,78,22,-83,-49,69,38,5,76,105,-89,-43,45,-45,-105,-2,72,110,-33,112,-26,102,-4,97, 
  /* [6][0][][] */ 110,-15,13,-86,-103,-28,61,-100,11,74,39,115,55,-53,-29,124,-72,94,30,96,-109,113,106,32,-35,43,-106,-95,-39,-86,8,51,-87,22,79,79,-98,-19,35,52,-87,57,78,8,-96,86,-91,-10,58,103,-6,-14,-65,-79,-60,-77,-71,-7,15,83,57,-43,96,21,127,93,-25,56,3,-90,-29,-13,71,-20,103,119,-34,42,-42,-67,34,-17,-36,-85,88,26,7,109,10,-71,-75,-31,-79,-6,101,-57, 
  /* [7][0][][] */ 113,25,2,-22,92,-35,36,-57,3,24,46,1,19,127,57,44,14,27,10,47,57,23,45,-18,101,25,19,75,-27,-22,18,33,9,40,100,45,49,57,32,-98,-45,54,-20,41,-3,-27,21,-27,23,45,-7,55,16,89,52,82,58,-85,50,-35,-7,-55,3,22,7,-7,-56,-18,25,-76,-6,43,5,89,8,75,-36,-45,-33,8,-16,70,22,64,38,5,55,-73,78,82,111,-14,93,-52,87,-1, 
  /* [8][0][][] */ -73,-54,-122,-2,63,29,-16,-97,94,-117,121,-103,-29,-127,-121,-5,45,90,86,-73,99,38,92,-57,-94,-103,17,-103,-69,-83,-101,6,-45,-5,-102,122,-116,-114,-54,-65,-12,31,43,-22,-18,-64,-48,98,83,69,-32,-12,117,14,-2,-103,8,5,-27,21,-99,-12,-98,106,-16,-41,14,-66,-76,47,-123,56,43,79,122,95,89,12,-15,-30,36,114,-2,75,67,-72,-36,79,55,53,-79,75,-103,115,115,-65, 
  /* [9][0][][] */ -34,-42,18,69,24,57,79,28,30,42,70,54,101,54,-33,-29,-12,-57,-72,-84,-90,82,18,-29,-84,-65,-49,45,58,-121,-35,50,-95,-68,107,-32,-35,-5,-73,-68,101,86,-6,1,34,51,26,-22,-21,-40,-104,-64,-112,50,18,69,-9,-80,10,8,-6,-71,35,73,-127,70,65,60,95,-70,-105,13,44,18,62,-111,103,-71,8,-51,-117,-41,76,-83,55,-64,-90,15,-74,86,29,4,-88,20,29,51, 
  /* [10][0][][] */ -85,36,-81,-96,-44,72,-116,-105,68,-95,83,59,-11,32,63,-13,94,12,-77,28,-13,-56,-43,74,36,102,-38,-32,-108,-80,-15,-103,59,34,99,-106,100,-81,35,101,77,22,23,48,-22,20,-5,-13,-89,127,83,97,90,-82,84,51,17,-18,74,-10,62,54,91,49,-42,96,-8,48,-1,-22,70,24,-97,-105,18,48,61,83,67,-4,-6,33,2,22,9,75,-78,16,-11,26,-59,80,51,59,23,-23, 
  /* [11][0][][] */ 64,73,-60,-77,85,23,-44,-66,-61,38,36,-1,20,-90,53,-60,-88,74,-14,-43,-36,-63,60,-78,-110,89,81,88,11,57,6,38,39,72,-127,-80,34,107,-39,-59,58,-89,108,-93,94,40,-121,2,64,59,-59,101,62,-86,-33,-107,-19,86,-110,69,-19,12,126,-49,67,-29,97,-1,98,112,-65,22,-84,-48,29,-87,0,87,-58,7,-89,-21,-106,104,-1,-88,-66,1,-84,63,-28,-58,70,35,108,6, 
  /* [12][0][][] */ -77,-27,-90,106,-4,-58,-68,-79,-24,-4,-56,33,-83,-97,-49,59,25,-53,28,107,-102,-35,58,40,-16,83,-93,-11,91,-102,68,63,23,-44,-10,-93,-4,-98,66,58,73,78,40,-92,21,-12,-72,76,-73,99,-69,41,-70,-116,79,39,-14,-96,-94,-80,41,-40,102,-29,-91,-16,-8,-76,-127,-117,31,-33,-122,-78,-24,-30,-119,-30,82,-68,14,69,87,-24,61,-77,-23,-81,-68,-99,-9,-5,-119,-94,-123,80, 
  /* [13][0][][] */ 22,51,69,-51,70,50,4,-10,46,-93,18,49,-6,33,44,70,85,44,6,76,97,-44,-26,-55,31,-77,21,-58,24,-61,-50,-19,-36,-97,7,-25,78,-99,71,55,-6,-74,58,83,57,4,34,72,-44,35,-38,-9,-31,-118,7,56,14,-29,24,-51,-65,7,50,-62,-62,23,-15,-88,-60,-34,-100,73,-36,-25,91,-25,-16,90,5,-31,58,14,-2,56,52,-69,-127,89,-72,-33,23,-32,17,114,-29,-83, 
  /* [14][0][][] */ -45,-59,92,60,56,-80,21,-16,-8,67,-36,-75,1,112,-30,41,-89,-36,-28,-98,-10,34,-46,-37,-46,-24,71,29,79,-82,80,-42,-44,99,121,24,31,75,-92,-101,109,125,118,25,82,-70,-3,-47,-127,3,-32,-65,-11,-119,90,-105,29,-90,-38,-104,-93,-98,18,19,-7,67,7,-9,-106,-8,32,-65,-102,-74,55,-10,-85,-10,73,9,123,-31,115,40,-72,-64,-65,77,57,-8,-68,-29,-19,-106,-80,-55, 
  /* [15][0][][] */ 29,62,9,-76,-91,103,9,42,-127,-54,92,-57,-9,-51,-50,-21,-24,81,-121,6,-28,-109,-49,-17,14,-22,121,116,-3,-57,-108,19,47,104,-38,-40,-39,75,-61,-90,-70,117,119,-48,98,71,-95,-75,22,-49,-49,-89,-70,-26,25,17,39,-8,89,-45,-88,-85,-121,-58,-35,39,-22,-68,-7,-88,-97,-7,69,25,11,85,-18,72,-85,-7,-18,-86,-49,-69,-38,-49,98,-19,60,-88,-67,101,-16,-38,76,-99, 
  /* [16][0][][] */ -4,20,-86,103,77,-65,87,89,-43,40,76,-62,-45,81,-99,-27,25,70,-48,-22,-91,-16,-90,13,127,-56,-66,21,-46,84,96,29,-70,-40,17,17,-14,84,-104,53,38,25,72,-51,-83,-8,-82,-50,-29,53,86,57,-36,-99,48,4,37,80,-38,-56,34,-23,0,54,-7,27,62,-38,1,-53,75,15,66,2,42,-73,71,-49,-85,-40,-24,24,-9,-97,82,-37,1,-104,99,-77,89,-95,42,39,68,-79, 
  /* [17][0][][] */ -37,95,-106,-30,-29,54,-45,115,45,-35,92,-12,-39,78,38,-55,38,81,-26,72,23,-28,-68,-14,-127,3,-25,-75,-38,52,61,-99,58,-51,-41,41,50,-65,-21,51,-37,113,-19,-73,112,29,-109,-79,46,-127,-4,-86,-73,-2,51,22,-53,88,-79,-61,111,103,65,79,-48,32,-83,73,-61,-52,-10,-23,-38,-42,-1,48,-105,-47,114,-86,-58,0,95,-46,59,24,-73,113,1,127,-35,61,-99,-39,67,-33, 
  /* [18][0][][] */ 74,-107,-116,-18,59,25,-119,-101,-76,39,-100,-82,-10,93,13,42,20,80,-99,-43,-95,45,26,41,20,-29,35,-101,-19,-118,31,-123,-37,86,112,-68,31,-45,-69,-88,-113,31,125,-57,-18,48,91,-74,72,-5,-57,-87,-48,-17,-37,33,71,28,-127,58,-98,-24,59,113,-20,30,-105,-110,103,-34,-88,84,-105,110,-2,122,36,94,-9,-17,-61,-54,-107,97,10,-84,99,17,71,18,-45,123,-102,-24,-10,-122, 
  /* [19][0][][] */ 57,68,-97,83,105,89,-60,17,101,-43,-2,-39,68,64,116,-39,44,-96,-39,117,-85,-93,28,121,52,-16,37,-23,81,47,109,-113,65,-27,-88,75,-95,-27,-62,27,68,41,53,54,-28,51,-111,107,127,6,85,-20,66,-103,86,104,54,17,-100,-48,-29,68,103,-40,99,-8,-67,89,113,1,-103,8,17,81,20,96,13,93,-73,122,-101,-53,107,-92,39,-1,77,-67,-82,-2,-18,16,-30,-38,77,-106, 
  /* [20][0][][] */ 4,-69,-16,55,91,3,76,40,-39,-64,33,-4,-23,-62,6,-81,-25,-55,97,39,67,-103,97,-22,-48,104,-79,24,3,-69,-46,2,42,100,82,-52,94,20,-98,14,88,-105,-80,-21,42,35,-32,-46,62,19,109,-81,5,100,19,-82,-57,-112,72,27,-31,83,62,72,32,100,30,-70,32,69,-58,27,-91,-83,-30,106,0,-90,52,-63,17,93,80,-50,55,42,-60,-105,127,23,-102,-75,62,-55,36,67, 
  /* [21][0][][] */ 74,98,97,-94,-41,-48,-93,-44,-45,94,9,-93,-52,-83,-93,-97,-33,-30,-81,-114,-48,49,93,-50,76,20,75,-20,-60,-99,88,-6,-98,24,88,89,-120,-93,-121,17,-7,33,-41,10,-68,85,-122,54,56,-127,-22,-86,47,-56,-117,-59,-43,-67,68,76,3,-44,-17,48,-55,42,-70,-3,-12,-64,-30,-7,-34,-104,-55,-8,-90,100,97,87,-53,82,-6,-37,-113,-81,6,20,-57,30,-66,80,-39,-85,84,-43, 
  /* [22][0][][] */ 41,-17,40,-12,-12,-88,81,4,0,26,69,1,-14,68,-10,-31,-63,11,-16,40,38,105,11,42,30,60,-47,47,-5,-38,4,11,-20,104,34,87,2,-33,-12,-62,21,10,-36,0,28,-10,73,-42,-28,59,-28,72,-28,127,-7,32,105,40,-32,83,-52,-21,39,23,47,-21,-39,25,33,39,-15,-1,16,56,-14,10,-43,-56,27,-12,62,-25,-39,-7,73,98,31,21,68,60,75,22,40,41,86,55, 
  /* [23][0][][] */ -50,-12,9,-29,-82,32,55,17,27,-94,36,-90,-107,60,57,-47,40,37,43,25,42,76,36,-2,36,-53,-59,-60,-87,74,-4,104,68,-69,85,-23,5,94,66,-63,107,46,96,-85,-81,-9,-100,98,28,63,-39,5,-80,79,68,4,32,6,39,-30,-34,58,72,-102,98,-94,13,-15,88,107,-78,96,88,33,12,-37,-101,28,-104,-12,-98,12,-81,-66,-61,-127,91,-92,-65,-68,-35,-69,3,-45,-70,104, 
  /* [24][0][][] */ -13,99,121,110,67,-3,-106,122,8,-102,-89,97,25,-12,-2,-55,-11,42,-63,94,125,-37,-22,41,-43,62,-58,-52,96,127,103,-25,115,-50,-12,-29,29,-46,-79,-78,11,116,-74,56,-37,84,47,-57,-82,-76,35,-13,-53,58,124,-42,65,-36,-19,-28,121,50,53,-15,-112,-3,-57,118,77,-73,-23,35,0,-106,-8,-32,34,-44,-21,81,73,-48,63,-45,-82,-85,-24,-48,-92,89,-51,-22,-75,-65,71,113, 
  /* [25][0][][] */ 35,12,29,72,43,-27,-7,-2,-27,76,96,20,-23,104,65,-41,-67,3,-47,17,64,114,40,86,107,-2,-55,6,73,42,-26,60,-9,8,109,127,-98,86,-38,42,-55,111,63,8,-10,-37,-14,-86,-51,66,-36,-26,39,61,-72,-14,48,-34,119,44,-64,59,-37,65,-40,-11,-52,95,8,-29,70,69,46,88,13,38,33,-35,30,-41,-8,36,-29,63,112,74,36,-10,3,88,18,30,47,40,104,90, 
  /* [26][0][][] */ 83,-86,-7,-10,88,-117,102,-43,45,-24,-83,2,-41,-64,40,-31,96,11,-74,-81,49,-40,66,91,11,-30,42,44,19,-11,-53,-41,-22,51,44,126,-7,92,-127,106,92,0,-32,-105,-13,49,119,4,11,79,94,-21,97,110,60,30,91,0,-66,-8,12,115,-92,-121,52,-32,-110,-33,-4,-60,32,44,-117,-69,-91,-82,-23,16,-28,55,107,17,-53,-29,-19,-42,-11,-99,27,11,87,109,-41,61,53,-45, 
  /* [27][0][][] */ 63,42,-116,127,-30,-27,4,-6,-82,96,-33,-11,-119,82,91,-57,47,-119,-8,-114,-21,65,86,-93,-104,76,-44,56,96,-65,64,-122,119,-91,37,121,115,62,-84,-41,31,56,-25,65,75,-98,110,-75,11,-57,70,108,115,61,-125,-97,99,-33,-33,10,42,-79,-116,-104,34,119,29,-99,46,-6,40,-112,21,-76,0,-87,-88,8,72,21,-62,-83,92,5,-116,-86,61,-37,116,19,52,115,103,62,72,-104, 
  /* [28][0][][] */ -123,121,-40,80,12,116,-104,8,66,-71,-105,84,63,-92,26,-91,-55,74,35,97,100,55,9,-78,48,-72,86,115,-47,29,-18,37,-30,11,-36,-64,48,91,-33,127,-83,-23,0,71,113,111,-24,13,122,-27,-106,13,61,-74,30,62,92,52,39,79,54,-19,1,-110,-70,-3,95,-43,-76,69,55,109,-104,51,120,34,66,-30,-3,84,-66,60,62,-24,49,-6,-85,-47,-101,24,82,-81,34,64,-20,98, 
  /* [29][0][][] */ 2,-11,43,29,-27,39,24,-81,-34,-34,-62,-59,68,-41,-67,-13,107,95,-57,106,38,-84,-82,-80,67,-64,-80,-40,-34,99,-45,28,-107,104,102,-10,-9,-92,38,-13,124,-36,-11,44,-68,71,-124,19,-15,47,31,54,-70,-51,98,84,48,-6,-86,-1,127,111,-62,47,87,-79,-100,40,81,5,-43,-40,-24,-111,-15,-83,-48,48,16,71,0,-38,38,-15,14,-121,-97,105,-30,44,-64,-53,-105,2,-63,-63, 
  /* [30][0][][] */ -93,-100,-99,-58,66,115,56,9,-88,35,14,68,97,47,-120,-125,111,118,79,8,-21,-98,120,-80,5,56,-27,13,88,-47,8,46,-5,-41,20,21,-88,-46,84,-20,-11,-102,-77,-91,93,126,-52,-37,-67,95,-107,-41,-125,-50,105,-115,106,62,-10,-14,-50,-111,47,89,123,102,29,68,98,94,107,-93,31,-127,-100,25,65,-22,-13,-44,50,52,110,45,81,-86,59,50,100,35,54,-127,6,85,-88,-78, 
  /* [31][0][][] */ 48,116,67,-40,-62,-12,96,-78,-72,-43,69,-61,-74,-67,92,21,-12,58,-12,28,-18,-25,95,2,81,93,-40,-59,-19,78,57,69,75,39,58,105,43,112,-10,-81,-1,100,-93,32,24,100,52,-5,-96,1,-53,57,24,-47,-14,-5,12,30,34,113,-6,-123,127,-101,24,-87,74,-61,-105,26,118,-26,73,-61,-33,55,-6,74,55,-79,-4,-14,-105,-79,-24,95,122,-102,-57,85,39,-26,-46,-35,-98,67, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant40_scale = { 32, { 0.0019131596200168133, 0.0019848691299557686, 0.0017379233613610268, 0.0019038076279684901, 0.0017649255460128188, 0.0018945737974718213, 0.0018493980169296265, 0.0032838704064488411, 0.0017484457930549979, 0.0017922138795256615, 0.0018876974936574697, 0.0018516303971409798, 0.0018550121458247304, 0.0023901965469121933, 0.0017815923783928156, 0.0019373036921024323, 0.002060804283246398, 0.0018397426465526223, 0.0017451763851568103, 0.0017841010121628642, 0.0019708224572241306, 0.0018866115715354681, 0.0039496300742030144, 0.0020074495114386082, 0.0017971380148082972, 0.0029893293976783752, 0.0017873038304969668, 0.0017221855232492089, 0.0018902689917013049, 0.0018785191932693124, 0.0016609553713351488, 0.0018439032137393951, } };
const TfArray<32, int> quant40_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data41[32] = { -216, -3, -224, 104, 60, -18, 845, 2277, -153, -252, -171, -150, -359, -511, 125, 65, 41, -31, -127, 9, 195, -766, 1491, -232, -12, 2370, -86, 71, -66, 14, -226, 45, };
const TfArray<1, int> tensor_dimension41 = { 1, { 32 } };
const TfArray<32, float> quant41_scale = { 32, { 4.5015520299784839e-05, 4.6702803956577554e-05, 4.0892315155360848e-05, 4.479547351365909e-05, 4.1527659050188959e-05, 4.4578206143341959e-05, 4.3515246943570673e-05, 7.7267541200853884e-05, 4.1139901441056281e-05, 4.2169740481767803e-05, 4.4416410673875362e-05, 4.3567775719566271e-05, 4.3647345592034981e-05, 5.6239918194478378e-05, 4.1919822251657024e-05, 4.558361615636386e-05, 4.8489513574168086e-05, 4.328806244302541e-05, 4.1062976379180327e-05, 4.1978848457802087e-05, 4.6372293581953272e-05, 4.4390861148713157e-05, 9.2932474217377603e-05, 4.7234105295501649e-05, 4.228560283081606e-05, 7.0337162469513714e-05, 4.2054209188790992e-05, 4.0522012568544596e-05, 4.4476917537394911e-05, 4.4200452975928783e-05, 3.9081303839338943e-05, 4.3385960452724248e-05, } };
const TfArray<32, int> quant41_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data42[2*1*1*32] = { 
  /* [0][0][][] */ -34,-29,-25,-20,40,-5,88,45,37,-50,-65,-50,52,-41,94,-23,-57,-10,64,-2,66,-19,127,-41,-37,93,25,-50,-60,-82,12,28, 
  /* [1][0][][] */ 91,124,-84,-76,22,98,4,-127,65,-95,-84,55,-58,8,27,88,-85,99,94,73,-68,2,-74,47,103,-51,-79,-90,63,96,108,-110, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant42_scale = { 2, { 0.0056775161065161228, 0.0035384541843086481, } };
const TfArray<2, int> quant42_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data43[2] = { 20337, -31861, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00022806029301136732, 0.00014213625399861485, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10413818061351776, } };
const TfArray<1, int> quant46_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.073224104940891266, } };
const TfArray<1, int> quant50_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.058958053588867188, } };
const TfArray<1, int> quant53_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.086835451424121857, } };
const TfArray<1, int> quant54_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023266475647687912, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.048937082290649414, } };
const TfArray<1, int> quant58_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.021385163068771362, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.052007135003805161, } };
const TfArray<1, int> quant61_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.067192286252975464, } };
const TfArray<1, int> quant62_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.022630512714385986, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.052999787032604218, } };
const TfArray<1, int> quant65_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.091498225927352905, } };
const TfArray<1, int> quant66_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.040169026702642441, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.13209475576877594, } };
const TfArray<1, int> quant69_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,2,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,4,5 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,6,7 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,8,9 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,10,11 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,12,13 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,14,15 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,16,17 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,18,19 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,20,21 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,22,23 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,24,25 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,26,27 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,28,29 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,30,31 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,32,33 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,34,35 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,36,37 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,38,39 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,40,41 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,42,43 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
