

#include <stdio.h>
#include <stdlib.h>
#include "ai-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "ai-sdk/tensorflow/lite/c/common.h"
#include "ai-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "ai-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242640;
#else
constexpr int kTensorArenaSize = 241616;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 33716, -43830, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00016087086987681687, 0.00012472600792534649, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 61,-48,-57,127,-64,-14,-37,54,114,-42,-44,-41,-34,44,-44,27,82,-63,-51,-62,83,59,40,-67,-62,-82,-27,63,7,-46,-22,95, 
  /* [1][0][][] */ 59,85,82,-98,-84,86,-11,14,-45,-13,41,124,127,50,48,-2,-46,0,-84,-103,-88,39,53,123,94,93,-56,-6,112,-121,-126,-34, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0041088066063821316, 0.0031856296118348837, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -111, 117, 134, 768, -253, 130, -251, 39, -34, -441, 82, 115, 117, 82, 174, -351, -120, -436, 278, -98, -257, 36, 353, 116, 116, 109, -172, -246, -441, -15, -173, 320, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3019103031838313e-05, 4.700792851508595e-05, 4.1465227695880458e-05, 4.4720178266288713e-05, 4.170424654148519e-05, 4.2766947444761172e-05, 4.2509109334787354e-05, 4.3578194890869781e-05, 4.1222931031370535e-05, 4.3344956793589517e-05, 4.1380015318281949e-05, 4.2470379412407055e-05, 4.4870062993140891e-05, 4.2682055209297687e-05, 4.5808959839632735e-05, 4.2835275962715968e-05, 4.3148196709807962e-05, 4.4212119973963127e-05, 4.9979102186625823e-05, 4.3539261241676286e-05, 4.4326032366370782e-05, 4.0925053326645866e-05, 6.3353989389725029e-05, 4.4011663703713566e-05, 4.966809501638636e-05, 4.7829744289629161e-05, 3.9986010961001739e-05, 4.000339686172083e-05, 4.1721381421666592e-05, 4.1017312469193712e-05, 4.0582992369309068e-05, 5.102843715576455e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -49,-54,102,6,80,-20,-92,-106,58,-107,-114,-4,35,2,-39,46,-59,-37,-81,-57,-76,-108,0,105,-120,4,74,-49,104,-2,-25,-91,85,-71,-96,58,-114,-85,-100,23,70,-90,-103,92,49,-118,98,-23,15,-64,-41,95,-84,-60,-95,105,15,59,98,-115,-82,79,-52,39,-10,10,66,88,46,90,74,-121,86,-100,37,81,-109,9,-64,27,49,8,86,-15,-63,-50,-92,95,24,110,-14,-127,6,64,23,12, 
  /* [1][0][][] */ -48,31,-65,5,-33,62,39,11,83,-103,-92,100,58,-16,26,65,101,-32,45,127,-40,-2,35,27,34,24,-33,102,14,15,96,-49,60,103,-5,27,45,61,-11,-54,-53,11,-15,-92,-26,39,-22,-45,-16,-70,98,61,17,87,-74,-35,17,100,26,80,-44,108,-53,-79,-50,38,73,46,111,33,10,15,-112,101,-50,44,84,-43,-33,70,-67,82,-44,-99,31,107,-57,-51,78,78,92,32,89,84,36,-1, 
  /* [2][0][][] */ 52,39,-63,105,-19,-78,96,101,-93,78,-33,124,92,-6,90,-110,-59,-22,49,78,-97,-12,117,24,-24,92,113,14,-66,94,88,110,-66,-13,-92,-110,-93,103,111,-22,-116,-74,21,-10,-80,127,-19,-75,109,49,85,-83,-41,77,20,30,-82,108,-101,10,-8,64,-27,65,97,54,53,99,-80,78,1,-68,25,-58,26,30,-47,-27,10,14,47,-93,-7,-34,6,-101,-14,-22,100,121,-19,17,-32,-87,-37,-66, 
  /* [3][0][][] */ 92,23,57,-22,-49,72,-98,51,39,65,83,-6,93,101,86,15,121,112,-68,27,125,-69,-38,-92,1,-89,-74,108,43,-79,95,30,-43,-11,4,4,-62,3,51,51,-1,-79,-85,39,85,47,-23,-68,77,-98,85,38,85,47,121,-93,-82,-107,-45,-41,-78,42,4,106,97,-28,-43,-33,-21,-72,25,103,69,-108,88,-27,47,127,102,-47,-85,-96,46,95,39,67,-36,-115,-74,68,-6,-70,88,-87,-63,85, 
  /* [4][0][][] */ 55,102,-4,51,-32,-7,27,14,58,89,-13,50,10,-44,-16,-72,-29,-10,-68,4,106,-97,84,22,-23,-10,61,-65,-54,30,-72,-64,66,111,14,-106,-54,-12,-120,46,-56,-69,-81,-97,29,102,31,53,19,-52,-21,-87,-97,37,-93,16,36,-101,61,10,1,-80,-44,-63,-53,50,-2,-41,18,-109,-100,-92,-60,11,98,52,53,-26,-12,-60,-1,-51,-103,-29,-5,69,88,-8,-127,-83,45,40,23,100,-112,-23, 
  /* [5][0][][] */ 100,-91,78,89,41,-127,31,58,115,-125,1,-66,19,107,39,41,63,65,-60,117,34,55,18,-25,-103,-56,-12,-88,53,39,21,-90,-33,8,-67,18,-118,-32,47,27,-85,-48,46,94,-28,28,41,-48,-102,114,15,38,46,25,32,-13,98,58,-84,-36,40,-66,46,-80,-30,106,-24,36,90,8,96,-65,-57,94,-33,-72,17,-50,16,86,113,46,31,115,-77,81,0,47,74,-96,124,98,-7,25,82,-80, 
  /* [6][0][][] */ 17,-47,111,73,-89,-64,-5,63,-19,-77,3,-88,103,53,113,-125,40,-1,-5,104,-77,-122,108,58,-68,-85,-12,-61,-30,-120,42,-83,-98,-127,-49,-111,-10,37,-110,78,84,54,21,-15,-117,102,-93,-49,-90,15,-3,-72,55,-62,94,-27,9,-14,-78,109,-97,1,64,-78,-50,63,99,-52,71,-8,-103,-7,54,-77,-90,-44,-86,-104,-60,-32,30,-33,47,-33,-75,-88,-44,-100,83,92,95,13,-57,-67,74,-28, 
  /* [7][0][][] */ 111,68,-36,-41,-79,107,-18,-3,118,-6,-95,15,40,-84,47,75,54,19,8,122,53,36,-5,86,-68,104,42,58,-74,105,-19,38,31,25,67,99,-104,88,-14,-25,96,-75,85,67,53,-2,103,-108,57,-50,-127,-66,-21,86,18,31,108,-84,3,-54,8,-5,87,-120,-73,-53,68,26,-101,21,63,85,83,30,57,59,-59,54,-97,44,94,-36,-19,-73,88,33,-106,96,82,9,90,63,-51,-42,0,-66, 
  /* [8][0][][] */ 9,36,-44,-101,62,47,-82,-27,-2,47,44,96,-4,-54,-90,-77,-72,95,-81,0,25,-28,86,115,-118,87,44,75,-77,12,-99,116,92,-39,42,-2,127,-1,-27,68,80,102,-119,-117,-15,-33,-30,108,15,-109,-65,-8,-75,-15,-28,-126,56,102,-47,106,105,42,39,120,-38,-52,-24,95,-106,50,39,-11,90,59,17,25,-56,114,83,76,31,82,-127,-95,23,46,71,-50,30,-42,-93,99,-95,-109,-59,63, 
  /* [9][0][][] */ -5,-1,104,36,80,-81,-58,-123,31,44,-19,46,-31,-87,-111,-34,-1,-10,-102,-80,-9,89,-116,-114,106,-10,-22,17,-18,-50,-97,90,55,-9,19,-24,-83,6,-36,-52,38,-78,44,-100,70,12,-114,44,43,-18,-78,-56,66,-81,-82,90,81,-71,-5,-12,-92,96,88,-79,-81,-5,94,38,-42,90,100,-101,4,74,-108,-103,-82,-127,-49,94,25,21,91,23,-53,-100,28,-23,88,23,-40,99,105,-16,58,-43, 
  /* [10][0][][] */ -61,86,94,-62,-14,91,116,31,50,14,27,-68,104,96,-32,16,-36,88,-88,-44,-15,33,60,-71,32,66,-117,-114,-45,95,-92,-76,93,111,127,77,-47,11,-33,42,-33,125,-110,-45,-96,-56,3,-57,4,12,29,18,72,32,-77,-25,-118,-6,-14,-43,8,84,124,36,126,-73,-99,-15,41,-14,-106,-63,79,87,-94,111,-7,65,73,25,87,5,63,115,-100,70,111,-16,44,12,1,-69,-40,-51,-36,-65, 
  /* [11][0][][] */ 114,6,-10,113,127,40,59,30,122,80,-78,118,12,-74,32,-67,-57,-98,74,43,35,81,26,-110,-116,-100,-14,80,87,3,30,-21,-83,-68,61,32,-67,72,-34,-54,-31,110,-70,-15,-38,-70,-95,-85,84,117,81,43,-84,-83,15,37,-81,-44,-47,-87,-90,97,77,8,1,86,-52,40,85,66,-88,-65,31,116,-104,55,-62,33,-40,94,-105,-23,-70,-50,49,-87,19,-38,-91,-12,23,-98,-79,-47,-67,-37, 
  /* [12][0][][] */ 17,66,-51,8,86,-4,-29,36,-64,48,-10,18,-44,21,51,-72,-93,-26,-33,-58,29,-6,18,96,-64,-38,101,-90,94,23,-29,122,-77,-60,-39,16,-5,-66,-15,47,115,43,-101,-41,-13,-74,-31,117,-37,-101,-82,108,42,11,-80,93,-26,-48,20,68,65,111,4,46,110,38,-40,120,70,104,34,75,72,127,-21,-4,-26,33,-107,-87,-48,103,49,22,-30,32,57,119,-83,-100,95,50,109,-14,37,76, 
  /* [13][0][][] */ 112,-60,104,103,93,101,85,65,80,-116,15,-26,85,80,71,-44,-117,-67,-59,47,70,-25,120,-46,-64,47,10,23,-84,-83,87,46,47,110,-18,38,-87,-25,24,75,-60,81,-49,10,-38,33,3,-26,41,111,-49,-100,-93,37,100,-74,-58,37,-43,-71,-20,119,-67,6,-54,-58,-90,94,-24,-8,91,3,-99,52,-82,-41,-98,67,86,-61,59,-94,99,27,-78,-102,99,127,-6,-49,-69,61,124,-53,76,-4, 
  /* [14][0][][] */ -59,-96,89,69,94,-39,-6,-119,-64,-40,63,92,-38,-71,-74,-91,-44,-48,21,30,-50,38,0,60,-103,-62,-14,40,-89,-102,-72,26,103,-37,-35,2,92,104,26,-97,-8,-89,51,72,76,-127,50,-62,116,58,60,23,97,-26,-6,28,-79,-41,30,93,-51,-56,-30,47,-122,-4,78,-86,-77,-66,-117,105,-34,94,40,-66,60,-103,60,29,55,-22,-120,-82,-100,-90,-104,101,109,-9,106,-65,103,86,-60,60, 
  /* [15][0][][] */ 8,-30,-33,65,88,-87,55,-104,51,-5,-77,7,95,-5,-96,-117,85,4,-94,19,41,13,68,104,76,61,33,88,16,51,59,-108,-1,0,-70,-8,-69,106,104,-75,10,105,-55,-27,18,-84,-50,-87,-14,-85,-6,24,-103,-110,-54,-19,65,45,-26,105,-53,-70,-4,98,-40,92,-78,-6,-68,-1,62,-82,16,-22,57,-112,-7,51,99,71,-88,54,-118,-70,-127,-40,-99,32,78,65,-119,-46,48,104,-114,108, 
  /* [16][0][][] */ -73,1,105,-66,36,127,-57,38,40,57,-110,69,-5,-57,-55,-64,107,73,59,43,107,77,-39,52,-36,47,-72,61,-104,1,35,0,-106,69,56,57,-30,48,-51,-73,17,-50,65,94,57,96,94,-17,-61,-119,11,100,-47,103,70,35,34,79,111,9,104,107,26,68,50,7,-38,86,25,90,-21,-16,43,74,69,88,-20,101,-112,-15,6,-87,53,2,7,100,96,-2,71,8,-18,100,56,-32,-96,20, 
  /* [17][0][][] */ 25,-117,14,74,-45,-127,-71,-106,39,-91,71,47,96,54,-119,40,27,46,99,111,-94,-20,5,-59,16,58,-82,23,105,-52,-36,67,-40,-31,27,-4,-57,89,-102,-39,-101,-46,-19,-29,-2,0,75,-112,74,106,-22,19,-20,69,76,-75,-126,80,-112,-115,26,-93,56,91,-92,-79,34,-109,-103,-5,96,29,-5,-123,-71,53,108,-57,34,-65,9,-31,-73,-99,-115,59,72,-39,20,65,-99,-118,-13,97,5,11, 
  /* [18][0][][] */ -56,102,103,-37,21,-18,-86,33,8,116,-85,-43,6,36,60,-44,20,-13,41,-16,90,-33,27,-65,42,-88,-13,101,22,50,14,63,47,6,-83,-70,-23,35,4,54,-31,8,-10,0,-83,28,22,3,21,-27,92,27,-87,36,8,80,3,43,33,-95,82,102,-1,65,-30,-101,-21,81,59,-32,-55,100,-63,-10,-66,-80,41,57,3,-36,-49,17,-21,-44,92,-27,65,50,-91,-60,-55,127,81,-52,48,29, 
  /* [19][0][][] */ 19,33,84,39,61,-53,96,93,90,-58,29,-4,-74,32,-54,56,75,-106,127,53,-19,81,-52,16,70,-75,27,-55,-84,-115,-69,43,79,-85,35,4,18,-71,-48,-98,41,-112,-84,15,-89,26,71,-92,-27,44,-30,40,-25,10,-1,-15,29,92,35,-27,53,-46,103,65,-67,-3,-23,2,-6,49,86,-50,-56,-124,-45,-72,-21,-106,16,109,55,-114,-27,73,-86,-5,8,-5,88,25,13,59,-34,119,65,-49, 
  /* [20][0][][] */ -10,65,65,86,-85,98,14,56,7,18,-87,-2,10,79,35,-76,-51,-41,-70,-42,20,-46,-76,-71,70,-79,-106,42,17,6,-44,104,92,38,-16,52,40,-36,-16,-109,-85,-38,-91,-98,-32,-67,-72,97,54,-122,-91,33,42,103,47,-9,94,63,127,82,102,-54,-68,-30,-28,-70,-52,9,-87,-79,-60,72,-61,-91,33,16,101,73,101,100,76,1,80,-30,52,109,-20,64,15,88,21,61,16,20,-9,2, 
  /* [21][0][][] */ 92,77,74,-104,93,-95,78,16,2,-88,-76,46,-11,43,-53,-93,-108,-30,40,-2,112,-50,73,-88,55,-84,-33,80,19,10,-7,-22,9,22,-95,-121,113,101,-127,-32,-7,8,30,-21,-101,-88,-83,99,-20,-65,-30,91,43,72,-107,33,-67,60,-80,126,59,-78,16,-24,78,34,-37,-69,-103,-2,56,82,27,-14,67,70,-112,-34,67,110,17,103,35,-75,28,-105,70,-85,-107,81,120,-127,-42,-70,70,-36, 
  /* [22][0][][] */ 21,-34,-60,-80,72,-63,86,34,-75,25,-39,-90,40,-61,-68,-50,37,65,-99,-16,71,-43,27,35,71,14,-73,52,-26,-34,-47,-61,37,47,-22,11,9,-1,-37,-64,12,2,2,73,46,-70,72,-6,-30,-46,-6,3,-77,-60,-24,35,-67,-23,-30,-9,89,-64,-35,-127,-39,29,-71,-22,98,67,-40,10,-62,21,46,-61,52,-32,56,39,88,-55,-42,-73,64,70,75,-1,-25,34,-29,27,32,26,-10,51, 
  /* [23][0][][] */ 64,-88,5,63,93,-127,7,-97,63,-100,85,76,16,-96,21,-36,86,-29,-92,118,92,-77,101,-33,-17,-7,85,25,73,58,74,-23,-34,49,22,32,90,-4,-110,10,-100,3,14,-115,-63,-84,115,30,80,-99,-100,-43,85,-47,-58,97,-95,-12,61,47,-100,-88,-44,-19,33,41,-112,-100,77,-8,101,-65,-16,-14,-45,-93,51,-24,95,116,-46,-45,24,-94,95,5,115,-12,-83,44,108,1,114,-54,-20,85, 
  /* [24][0][][] */ -77,-38,-85,-67,-99,-127,-58,-82,60,104,70,48,95,50,-34,-93,-66,38,35,-62,75,-67,-44,-30,53,-43,66,56,98,19,2,-62,-13,-3,36,27,-38,-84,48,-20,-66,-89,90,10,19,-34,26,69,-76,-38,-44,3,69,42,50,-85,8,68,12,6,64,4,19,76,-97,86,-36,-89,-99,46,-42,-34,-28,26,80,94,43,-60,-88,-78,-66,-75,-70,-113,4,57,-9,-98,20,-91,15,-79,-25,10,-91,25, 
  /* [25][0][][] */ -84,-41,-68,-27,80,-72,-91,42,44,-112,-41,34,48,5,-97,-16,-59,56,46,-93,62,78,-8,-51,0,-42,-86,44,80,-83,37,94,84,-110,22,74,95,-72,-22,-19,-81,90,-87,3,87,36,42,37,-93,98,-96,-13,50,-30,-63,-2,-22,53,-127,72,90,49,28,32,-21,74,-14,-17,-85,1,-23,-102,27,-98,56,24,68,67,17,7,55,43,-55,70,-61,-43,-85,-74,-15,-37,107,12,-98,-33,-50,-83, 
  /* [26][0][][] */ 57,-127,-22,-18,-102,11,-13,-15,-121,-126,113,93,-75,-57,10,-18,121,29,-94,-84,13,76,107,15,55,63,12,48,11,1,-102,-9,-36,-70,-108,-113,-67,88,-54,115,-109,108,57,38,-81,75,-48,107,-28,29,5,103,7,-57,1,-120,110,63,99,25,-3,-103,65,-20,124,-24,-61,57,-104,81,101,100,95,-114,-90,9,46,-114,-105,10,-34,79,87,-84,83,2,-52,10,-92,120,10,13,-68,123,49,93, 
  /* [27][0][][] */ 10,6,-70,-112,-127,-76,-78,-19,42,105,36,-114,-21,57,85,-36,67,-21,70,-91,-104,8,-34,-28,-115,46,-119,-5,67,27,-38,-13,63,71,-98,-95,-99,-72,-123,92,-105,15,27,15,103,22,70,107,93,70,63,-84,-98,-94,-8,-38,108,-30,-99,-87,-65,-69,-39,61,39,-54,-123,110,49,11,-127,4,62,-57,-10,-97,47,-74,91,106,87,-33,122,-64,-83,-91,-39,29,-55,-8,-35,-55,56,17,91,61, 
  /* [28][0][][] */ 84,-9,79,34,-117,-66,-112,-87,-50,-111,49,71,-83,-98,-8,92,85,104,-74,74,-36,12,-123,-88,-127,72,-94,-65,-78,-79,-11,-24,-114,6,72,69,10,-120,-48,20,96,31,-106,40,-121,-20,4,39,13,-65,-84,-42,-89,15,45,31,57,-22,78,42,-14,-51,-100,2,50,64,-34,74,-84,20,-114,-52,61,31,-12,-112,-125,-78,-100,37,-83,-102,105,-39,52,-124,55,-93,-115,-82,-41,-69,-48,48,-105,-77, 
  /* [29][0][][] */ 57,59,64,-56,-94,25,-121,12,99,-11,-91,-99,111,-111,-48,-49,-100,106,17,-82,-78,-33,61,8,-36,9,-44,-28,-107,-13,110,-13,51,1,-84,-54,-6,107,-7,100,50,111,-45,92,-1,109,-57,-26,17,-15,69,-103,70,-109,119,48,-93,55,-19,114,-124,99,-101,-34,-66,-68,57,94,93,-87,40,-77,125,74,69,31,115,-60,-30,36,-7,-85,-8,-83,67,127,46,76,-40,101,74,75,-111,23,-5,67, 
  /* [30][0][][] */ 30,-50,-72,32,-112,52,-71,-10,113,5,-2,-53,-75,19,60,6,9,41,113,-88,57,-109,-121,11,-121,52,-79,115,9,-87,-91,6,-50,-53,-127,-20,17,-5,-2,26,105,-84,-14,113,110,-41,125,67,-57,102,27,-100,117,-35,-5,112,-68,-32,-59,-51,-105,0,-32,-2,-78,-93,-104,97,-5,113,102,-35,-55,114,119,-98,-44,-79,-84,-67,32,23,-62,-26,-114,37,-79,113,-28,-97,80,67,-31,42,25,-70, 
  /* [31][0][][] */ 68,-56,50,88,45,102,-44,-71,-25,-5,-62,-58,116,-105,-35,97,-34,-77,45,29,75,42,-11,102,38,-95,35,51,-47,-64,45,90,15,16,-61,25,104,-28,-46,-94,51,-52,-26,45,3,-46,-37,25,61,28,127,-27,-79,-53,-66,14,-91,63,56,104,-28,12,75,7,59,95,-26,-67,57,-101,-32,16,-1,-43,31,24,-47,-19,49,94,-62,-33,108,61,53,92,-73,11,31,-48,-70,-47,8,114,-14,-8, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018283118261024356, 0.0019978368654847145, 0.0017622722079977393, 0.0019006074871867895, 0.001772430376149714, 0.0018175952136516571, 0.0018066370394080877, 0.0018520732410252094, 0.001751974574290216, 0.0018421605927869678, 0.0017586506437510252, 0.0018049911595880985, 0.0019069776171818376, 0.0018139872699975967, 0.0019468807149678469, 0.00182049919385463, 0.0018337982473894954, 0.0018790151225402951, 0.0021241118665784597, 0.0018504186300560832, 0.00188385637011379, 0.0017393147572875023, 0.0026925445999950171, 0.0018704956164583564, 0.0021108940709382296, 0.0020327640231698751, 0.0016994054894894361, 0.0017001443775370717, 0.0017731586704030633, 0.0017432357417419553, 0.0017247771611437201, 0.0021687084808945656, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { -2290, 4165, 9972, 2529, -3467, -4107, 19708, 1850, 3003, -1639, 11152, -309, -8216, 2319, 14980, 5804, 18731, 5791, -4978, -5006, 5552, 28869, 22214, 17213, 1241, 1123, 4486, 4152, 2519, -5102, 6666, -3146, -391, 4853, 12, 1012, 12602, 6046, -1650, 5050, 9690, 6136, 5690, 12917, 4527, 3771, 2379, 9171, 5378, -5542, -6267, 553, -260, -1488, 2447, 50, 267, -1020, -5732, 11745, -912, 1557, -1489, -1487, -4028, 7529, 23609, 2016, -2837, 1048, 1691, 2640, 2067, -1321, 678, 13636, -575, 17217, 18922, -922, 9196, 2056, -574, 1409, 15995, 8651, 4887, 1347, 7403, 4169, -337, -9110, 982, -2411, -2094, -2408, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.0002661704202182591, 0.00037418224383145571, 0.00023948255693539977, 0.00034416423295624554, 0.00030173725099302828, 0.00035126335569657385, 0.00016862523625604808, 0.00038831910933367908, 0.00019896143930964172, 0.00038287707138806581, 0.00017940995167009532, 0.00023741078621242195, 0.00031112023862078786, 0.001218923251144588, 0.00020666820637416095, 0.00020150854834355414, 0.00010009997640736401, 0.00024973726249299943, 0.00039314315654337406, 0.00033415117650292814, 0.00010991750605171546, 9.3173206551000476e-05, 0.00013839112943969667, 9.6715048130135983e-05, 0.0001468891859985888, 0.00042081353603862226, 0.00066519383108243346, 0.00026079820236191154, 0.00020796874014195055, 0.00038224307354539633, 0.00022176021593622863, 0.0002471980988048017, 0.00018667492258828133, 0.00023895115009509027, 0.00027306299307383597, 0.00024451868375763297, 0.00015078275464475155, 0.00017700882744975388, 0.00037188967689871788, 0.00035200492129661143, 0.00013210161705501378, 0.00042093798401765525, 0.00026359257753938437, 0.00018072043894790113, 0.00042125361505895853, 0.00026692819665186107, 0.00021445582387968898, 0.00023479730589315295, 0.00024785957066342235, 0.00023539846006315202, 0.00024888006737455726, 0.00017354798910673708, 0.00052755046635866165, 0.00020191988733131438, 0.00032139240647666156, 0.00032924930565059185, 0.00042624780326150358, 0.00027876341482624412, 0.00026839043130166829, 0.00015666689432691783, 0.00084042537491768599, 0.00042062514694407582, 0.00019926800450775772, 0.00051500549307093024, 0.00046077693696133792, 0.00025520636700093746, 9.1730020358227193e-05, 0.00019781189621426165, 0.00040086006629280746, 0.00032250184449367225, 0.00023207117919810116, 0.00019093576702289283, 0.00066326005617156625, 0.00030059431446716189, 0.00027135942946188152, 0.00015754633932374418, 0.00024380574177484959, 0.00010797866707434878, 9.5484188932459801e-05, 0.00020684211631305516, 0.00015732091560494155, 0.00016344469622708857, 0.00013941829092800617, 0.00017787817341741174, 0.00011337191972415894, 0.00027573187253437936, 0.0004788378719240427, 0.00019801269809249789, 9.3924922111909837e-05, 0.00049056380521506071, 0.00024669704725965858, 0.00021825302974320948, 0.000233113081776537, 0.00042873393977060914, 0.00029092829208821058, 0.00016576185589656234, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -23,77,7,-127,-37,-39,-35,-72,-12,8,8,70,9,-48,7,58, 
  /* [1][0][][] */ -32,28,-70,2,-37,-23,13,-84,74,60,-67,33,11,-8,39,-127, 
  /* [2][0][][] */ 8,23,-50,47,20,33,-56,-43,127,-21,-15,31,-3,73,-79,10, 
  /* [3][0][][] */ 34,-55,19,-88,13,-42,-17,-8,103,-5,68,23,-6,40,39,127, 
  /* [4][0][][] */ -64,51,35,28,28,-32,-12,26,13,-18,25,-26,-127,-2,-15,32, 
  /* [5][0][][] */ 11,74,124,-15,14,85,-63,81,-54,72,-23,-30,38,-43,-127,34, 
  /* [6][0][][] */ 14,-65,127,-115,42,-19,-32,78,-68,-102,48,-47,-6,81,-1,76, 
  /* [7][0][][] */ 28,115,-10,-57,89,-2,1,-57,127,81,-25,8,21,-26,66,45, 
  /* [8][0][][] */ 11,-78,13,-69,21,-54,7,-65,34,51,65,2,14,127,82,54, 
  /* [9][0][][] */ 17,-42,-9,127,35,-15,33,-65,-64,112,31,-14,-16,-65,-5,1, 
  /* [10][0][][] */ -16,10,-46,-127,14,-4,7,31,22,-26,27,-44,-8,-45,-1,23, 
  /* [11][0][][] */ -6,17,31,-15,85,-36,70,-58,-73,30,3,26,-4,127,-58,-27, 
  /* [12][0][][] */ 46,-3,-117,-23,37,-38,-4,19,38,42,-33,-17,-63,127,-2,42, 
  /* [13][0][][] */ -21,2,-25,14,5,-127,-4,21,7,-6,9,1,14,-17,14,10, 
  /* [14][0][][] */ 18,-35,111,-37,62,-10,-127,-102,-22,-51,32,6,5,-60,-1,-24, 
  /* [15][0][][] */ -78,1,-29,-50,1,12,127,40,-42,49,73,-33,5,62,45,3, 
  /* [16][0][][] */ 14,49,127,113,5,29,110,97,-109,24,-82,-7,29,-3,4,-100, 
  /* [17][0][][] */ -41,-98,-21,32,-78,-14,-53,19,-127,-24,12,-39,1,34,50,-43, 
  /* [18][0][][] */ 15,36,3,65,44,6,28,-2,74,44,-39,-33,19,127,54,25, 
  /* [19][0][][] */ -13,-28,50,-5,87,-2,-77,-66,-90,-64,-30,-127,-24,-48,1,-48, 
  /* [20][0][][] */ 93,-36,-63,-6,23,-127,8,50,-41,42,-121,1,44,12,32,-21, 
  /* [21][0][][] */ 60,-35,50,-15,-1,14,-15,100,0,-90,55,32,-24,127,20,76, 
  /* [22][0][][] */ -34,41,-20,127,-55,-13,94,51,-8,23,-10,29,-11,17,51,6, 
  /* [23][0][][] */ 41,4,88,-101,53,6,16,21,0,9,1,-47,-7,-30,-127,15, 
  /* [24][0][][] */ -127,46,2,-14,-4,113,31,-13,-8,25,97,-3,-71,13,54,-31, 
  /* [25][0][][] */ 22,25,8,17,10,16,73,-54,-11,-127,-16,-25,-7,-34,7,16, 
  /* [26][0][][] */ -41,-10,4,2,-50,-20,-34,-43,-110,-46,1,-48,3,127,-25,53, 
  /* [27][0][][] */ -11,35,4,78,41,-26,-18,-25,65,15,-28,1,11,127,-18,6, 
  /* [28][0][][] */ 10,64,63,61,127,-23,30,30,-93,-27,-48,-35,16,100,61,-32, 
  /* [29][0][][] */ -2,-3,16,8,24,-12,16,25,-32,-24,-11,-127,4,-21,-7,6, 
  /* [30][0][][] */ -19,76,-40,68,-30,-25,35,-127,-38,47,-13,-9,52,39,83,85, 
  /* [31][0][][] */ -37,-21,-23,-66,-13,13,-63,-112,35,92,-12,-127,-31,-49,-2,9, 
  /* [32][0][][] */ -127,-66,-15,61,43,41,-12,15,0,-32,-99,46,74,-4,52,59, 
  /* [33][0][][] */ -9,-36,-23,-11,-75,-19,-67,-6,57,8,12,-55,34,-102,127,30, 
  /* [34][0][][] */ 51,-11,62,31,50,26,-54,101,-89,-42,69,29,18,-12,-28,127, 
  /* [35][0][][] */ -47,46,-59,15,1,-25,34,-110,81,84,-86,-13,9,-9,79,-127, 
  /* [36][0][][] */ -17,28,0,126,32,38,127,19,2,44,-22,-5,-27,35,-83,-62, 
  /* [37][0][][] */ 12,-2,1,-61,-18,4,-49,-50,-88,-13,-3,6,15,-127,63,-38, 
  /* [38][0][][] */ 36,87,-10,-53,127,-4,38,-46,106,77,-13,-9,8,-37,50,17, 
  /* [39][0][][] */ -34,71,-18,-127,-26,13,-38,26,39,-67,-17,-23,22,63,38,32, 
  /* [40][0][][] */ 2,-10,2,-81,-9,6,-8,-23,-127,8,-21,-17,-1,-120,63,-76, 
  /* [41][0][][] */ -9,-12,-42,-12,-1,-36,8,-12,-26,8,-48,-7,-127,16,26,32, 
  /* [42][0][][] */ 127,84,-48,-31,-79,-36,-4,-55,-17,34,91,-62,-56,42,103,-118, 
  /* [43][0][][] */ 43,107,-112,-19,51,27,111,-23,59,88,-62,47,15,-127,-115,-54, 
  /* [44][0][][] */ -32,0,-11,-35,55,23,-102,-127,-37,5,10,14,7,-53,57,-82, 
  /* [45][0][][] */ -3,48,-127,-26,15,-45,26,-60,11,36,6,-40,25,-22,29,-27, 
  /* [46][0][][] */ 8,-6,-10,-93,-6,6,24,-31,-113,-31,7,3,-13,-127,73,-30, 
  /* [47][0][][] */ 22,52,19,-13,127,-8,-24,19,-57,45,-3,23,8,-3,106,-30, 
  /* [48][0][][] */ -127,-82,-26,43,55,12,-7,-19,6,-21,-106,51,61,10,90,54, 
  /* [49][0][][] */ 4,-4,93,78,127,-7,39,12,-106,-50,-34,-79,-1,122,21,-60, 
  /* [50][0][][] */ 30,-14,-83,-8,29,-127,-38,-10,-21,-18,-2,-42,37,-24,-2,18, 
  /* [51][0][][] */ -1,29,43,7,28,4,0,21,-110,50,12,-127,3,-114,-22,77, 
  /* [52][0][][] */ 3,57,7,43,46,-12,17,16,61,71,-13,-50,31,127,76,31, 
  /* [53][0][][] */ -8,-54,-11,-23,-81,-14,-76,-5,49,19,15,-66,28,-127,126,16, 
  /* [54][0][][] */ 82,-3,-61,18,127,102,-124,-32,-85,-4,-32,-63,19,-45,-26,-35, 
  /* [55][0][][] */ 43,-10,19,-3,44,-53,-69,-127,-24,-86,-51,2,-16,-21,34,4, 
  /* [56][0][][] */ -15,8,24,-22,-7,-27,-91,73,-8,127,-3,-11,21,4,-8,7, 
  /* [57][0][][] */ -7,23,-47,-17,-49,-42,127,88,-20,29,-16,-6,26,20,103,-15, 
  /* [58][0][][] */ 37,26,-127,34,108,87,-32,57,-68,-34,8,0,-50,21,-18,-19, 
  /* [59][0][][] */ -98,78,110,24,-77,-61,127,122,27,4,26,-17,17,11,68,-4, 
  /* [60][0][][] */ 6,-11,-63,6,28,-127,-26,7,-7,-8,-5,-16,28,-17,-9,-2, 
  /* [61][0][][] */ 21,-9,31,127,78,16,20,1,-97,-8,18,46,-16,27,44,-52, 
  /* [62][0][][] */ -48,127,11,-36,-22,5,-66,67,-13,-51,-70,-43,-8,-87,-62,-38, 
  /* [63][0][][] */ -50,30,-33,127,-77,21,-70,-33,-56,-17,-19,-34,25,53,35,25, 
  /* [64][0][][] */ 9,-2,11,33,-1,2,-8,55,17,-7,-16,-47,-14,-127,54,-2, 
  /* [65][0][][] */ -18,-42,22,-127,51,-50,53,-42,-7,35,10,-109,-21,10,37,-42, 
  /* [66][0][][] */ 47,-9,50,-23,-5,28,2,119,5,-62,48,41,10,127,-1,71, 
  /* [67][0][][] */ -7,56,-9,-127,-13,-11,-65,25,90,-102,-28,-15,23,76,75,40, 
  /* [68][0][][] */ -35,33,127,1,10,-11,2,-7,-38,-32,-14,-49,9,-27,90,-31, 
  /* [69][0][][] */ 127,75,1,-12,-79,-54,-32,-43,13,8,105,-72,-84,70,93,-90, 
  /* [70][0][][] */ 38,10,-55,-8,-28,27,52,127,-36,85,-39,6,16,60,-18,21, 
  /* [71][0][][] */ 5,-2,-18,17,-3,-69,5,31,-46,34,-88,5,-127,-13,32,42, 
  /* [72][0][][] */ 6,29,-127,12,6,24,20,79,-36,-25,18,-10,20,5,-10,1, 
  /* [73][0][][] */ -50,17,64,-1,57,-54,-76,-127,29,-81,39,-28,11,-37,43,-12, 
  /* [74][0][][] */ 7,34,34,127,17,-2,-85,79,-59,18,-38,56,19,-113,37,-74, 
  /* [75][0][][] */ -6,43,-70,20,-2,15,16,-2,106,36,-21,22,18,127,-53,-8, 
  /* [76][0][][] */ 6,-11,-8,25,5,-8,-17,70,21,-27,-22,-127,-2,-1,3,11, 
  /* [77][0][][] */ -7,21,-32,127,-62,30,52,91,7,64,5,48,-9,-33,-22,-12, 
  /* [78][0][][] */ 3,-3,42,-110,43,-50,-38,50,38,-53,16,-41,40,127,34,38, 
  /* [79][0][][] */ -15,-94,-60,-52,-61,-9,6,-79,127,12,25,53,7,46,49,-38, 
  /* [80][0][][] */ -54,6,100,-89,25,-14,46,-70,-66,52,-64,-127,37,82,54,-67, 
  /* [81][0][][] */ -51,41,-113,21,76,-127,-5,44,-9,-49,62,-10,21,8,19,0, 
  /* [82][0][][] */ 127,-12,-1,17,14,-126,-16,18,-21,-17,-106,-12,107,1,3,35, 
  /* [83][0][][] */ -38,68,-116,-76,-26,-7,50,-127,67,61,-43,-124,4,44,40,95, 
  /* [84][0][][] */ -26,40,54,-28,-13,-19,56,-127,-51,56,-9,-48,41,48,51,-6, 
  /* [85][0][][] */ -77,127,20,-115,-79,-25,-24,-1,-45,-1,-67,31,13,-15,-98,-33, 
  /* [86][0][][] */ -9,16,-27,1,-26,-43,127,26,8,-44,-11,1,8,34,103,-17, 
  /* [87][0][][] */ -23,-26,8,-107,9,-38,41,-16,-2,10,-16,-127,-14,-6,12,-36, 
  /* [88][0][][] */ 83,-40,39,-24,35,-110,31,27,-58,44,-127,-78,32,18,68,-1, 
  /* [89][0][][] */ 33,-14,-46,-45,21,-6,-29,0,-38,6,29,-58,127,-11,16,-45, 
  /* [90][0][][] */ -8,-58,51,-63,71,-19,-74,71,60,-97,-31,-24,-30,127,36,-125, 
  /* [91][0][][] */ -38,-8,-22,-43,21,-13,-36,-106,5,57,-15,-127,-28,-12,-2,4, 
  /* [92][0][][] */ -29,19,45,14,7,-127,13,-1,6,-29,5,-19,1,-25,27,9, 
  /* [93][0][][] */ 38,-18,127,-12,-42,57,31,-27,-8,25,-71,-13,-27,4,21,0, 
  /* [94][0][][] */ 19,-8,-1,-33,29,-17,-6,-19,-36,-24,21,-83,127,-31,44,-32, 
  /* [95][0][][] */ 127,111,-19,46,-111,-5,-70,-4,-30,-15,99,-56,-38,18,69,-96, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.00081775605212897062, 0.0011496010702103376, 0.0007357628783211112, 0.0010573766194283962, 0.00092702812980860472, 0.0010791872628033161, 0.00051806773990392685, 0.0011930337641388178, 0.00061126973014324903, 0.0011763141956180334, 0.00055120163597166538, 0.00072939775418490171, 0.00095585547387599945, 0.0037449009250849485, 0.00063494726782664657, 0.00061909522628411651, 0.00030753741157241166, 0.00076726841507479548, 0.0012078547151759267, 0.0010266135213896632, 0.00033769983565434813, 0.00028625628328882158, 0.00042517943074926734, 0.00029713788535445929, 0.00045128801139071584, 0.0012928665382787585, 0.002043676795437932, 0.00080125097883865237, 0.00063894287450239062, 0.0011743663344532251, 0.00068131450098007917, 0.00075946730794385076, 0.00057352182921022177, 0.00073413021164014935, 0.00083893211558461189, 0.00075123540591448545, 0.00046325023868121207, 0.00054382468806579709, 0.0011425575939938426, 0.0010814656270667911, 0.00040585611714050174, 0.0012932488461956382, 0.00080983614316210151, 0.00055522785987704992, 0.0012942185858264565, 0.00082008418394252658, 0.00065887317759916186, 0.00072136835660785437, 0.00076149957021698356, 0.00072321528568863869, 0.00076463486766442657, 0.00053319195285439491, 0.0016207946464419365, 0.0006203589728102088, 0.00098741473630070686, 0.0010115534532815218, 0.0013095622416585684, 0.00085644557839259505, 0.00082457659300416708, 0.00048132808296941221, 0.0025820410810410976, 0.001292287721298635, 0.00061221158830448985, 0.0015822526765987277, 0.00141564616933465, 0.00078407116234302521, 0.00028182237292639911, 0.0006077379803173244, 0.0012315633939579129, 0.00099082326050847769, 0.00071299285627901554, 0.00058661244111135602, 0.0020377356559038162, 0.00092351669445633888, 0.00083369825733825564, 0.00048403002438135445, 0.00074904499342665076, 0.00033174312557093799, 0.00029335630824789405, 0.00063548155594617128, 0.00048333744052797556, 0.00050215155351907015, 0.00042833515908569098, 0.00054649554658681154, 0.00034831283846870065, 0.00084713171236217022, 0.0014711348339915276, 0.00060835492331534624, 0.00028856578865088522, 0.0015071603702381253, 0.0007579279481433332, 0.00067053933162242174, 0.00071619392838329077, 0.0013172003673389554, 0.00089381972793489695, 0.00050927058327943087, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[16] = { -6240, 16173, -13248, -1757, -2397, 10764, 27982, -58580, -5489, 13907, 22563, 15597, -11198, 20089, -7543, 6399, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00072591286152601242, 0.00041226093890145421, 0.00020846165716648102, 0.00025224382989108562, 0.00049236626364290714, 0.00035160317202098668, 0.00040266723954118788, 0.00028283201390877366, 0.00026501590036787093, 0.00031344307353720069, 0.0007312255329452455, 0.00057876232312992215, 0.0003805050509981811, 0.00021296064369380474, 0.00046038901200518012, 0.00062644458375871181, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -23,-14,9,-26,18,-4,-44,-2,21,2,-14,10,-12,-15,-31,2,-1,8,5,-4,13,-39,6,7,-5,11,12,127,27,-41,38,-14,-5,11,9,-3,-15,13,-49,-8,-22,0,-4,43,4,16,18,8,21,-4,-10,-1,21,-19,-10,84,0,12,-32,-32,-4,21,3,-29,-40,-67,-21,43,7,7,22,-7,-9,-27,-7,-26,-27,16,0,1,-11,-29,29,28,-9,-3,-10,-98,0,-14,8,-8,48,-22,-37,-18, 
  /* [1][0][][] */ 42,-73,-91,-62,127,-8,79,25,-24,-87,-62,-24,-2,-14,-70,45,-68,19,42,46,30,38,-18,-53,14,1,-16,-78,30,-39,-68,20,-15,41,-4,-14,2,2,4,19,-30,31,-33,-19,-59,87,21,16,11,-81,22,-27,-34,36,41,16,-43,-21,-43,-48,33,-7,11,-40,-85,109,-28,-25,9,-12,-7,10,59,-113,-39,12,33,-66,48,19,10,-15,33,7,-48,30,-31,10,18,-56,4,1,30,-6,36,101, 
  /* [2][0][][] */ -10,53,-77,-8,96,81,6,118,17,-125,-8,-52,-8,-15,42,22,28,-6,-64,76,17,27,103,-2,43,13,7,-68,33,-6,61,-57,25,23,-23,14,-127,-107,47,20,17,-46,9,-21,33,-76,-6,67,-43,27,-29,-34,114,8,23,70,39,4,15,9,5,27,43,-63,18,5,-13,-5,-81,-25,-13,-29,-79,-76,6,46,112,78,25,-11,31,-58,34,9,-53,31,-3,57,-34,18,7,-12,-1,-69,-77,-19, 
  /* [3][0][][] */ 54,14,74,-9,35,-18,25,-35,-23,-77,20,-19,-8,34,36,104,20,-18,46,2,127,-31,36,35,63,-16,-24,25,34,14,-11,53,-91,25,13,18,-25,-11,-9,39,-89,-26,77,19,3,69,-29,-69,-55,-11,-37,57,-7,-114,-19,22,-102,82,54,22,31,85,-11,-30,39,52,-18,-47,29,3,7,-67,68,-40,42,-15,5,0,57,44,-18,-84,6,-31,-24,19,25,25,15,8,22,10,41,116,52,-21, 
  /* [4][0][][] */ 10,-8,35,-9,127,31,-17,-5,-33,-64,-42,-35,-54,11,4,48,31,-80,-45,73,-20,15,29,-22,-5,-20,30,-54,11,-10,65,-38,80,1,-24,8,42,10,4,5,-33,-8,-36,-21,1,-59,-8,-8,33,17,-24,-5,1,-23,24,-26,8,-13,-37,32,-8,53,64,12,38,49,-12,-6,-51,-3,43,69,13,-64,-40,-46,43,54,77,-33,-15,-48,7,3,-69,12,38,54,-63,33,-8,-42,7,8,24,-28, 
  /* [5][0][][] */ 11,-16,-25,13,26,-10,58,-43,-35,-42,-14,19,4,31,-5,11,-21,-8,17,-7,35,-6,-45,76,8,0,0,-86,-5,29,2,24,-10,7,3,-35,17,28,-12,11,-14,-9,31,-21,-8,8,7,-12,-10,-15,11,5,-9,-43,-27,-50,1,18,-20,8,75,15,-4,48,-3,41,-12,77,15,102,10,25,24,12,-11,77,-48,-18,19,7,1,-12,-12,9,-8,10,2,127,0,27,2,-20,6,26,-52,32, 
  /* [6][0][][] */ 24,-78,14,-43,-21,-7,27,29,0,8,-24,-64,-24,0,-35,29,10,-12,7,-5,-37,34,18,-2,-31,-2,-2,-20,-12,13,34,-4,47,-5,55,-22,-7,-13,15,-79,-16,73,2,-24,10,-25,-21,20,-21,13,-16,61,-15,-62,2,0,5,-65,-15,11,-11,73,36,-74,26,-29,12,-7,-5,-15,127,8,-50,11,-21,15,-71,10,9,-7,33,41,36,8,-22,-8,37,16,8,4,42,-31,-16,-3,-38,-25, 
  /* [7][0][][] */ 15,127,41,11,124,51,53,-43,-45,-29,38,12,-24,34,14,36,10,-53,22,32,42,-52,35,25,-4,15,5,20,25,-20,-2,13,44,22,-46,24,10,16,-12,96,-63,34,32,30,-13,-4,32,-13,-20,-32,33,29,22,-46,-54,43,50,11,-15,-11,-5,-49,-6,10,-62,79,-55,-89,-8,-25,0,75,-6,-36,16,6,49,58,43,-25,-40,-51,-21,-19,-9,57,5,-6,-32,42,-34,-47,-57,12,37,-5, 
  /* [8][0][][] */ -3,15,45,19,-116,-24,48,-17,36,81,53,-7,-26,24,33,2,-43,15,1,-10,-40,4,-127,68,16,-29,76,-18,14,14,13,62,85,-15,5,-7,-28,-23,-5,36,13,-45,38,-2,-46,-13,53,-4,-112,9,27,-3,-56,-26,-21,36,9,-42,-78,-7,19,-30,-16,-21,3,90,1,-49,22,-27,-51,-31,30,38,59,-22,-14,-44,-18,32,-93,23,-19,10,23,22,64,31,28,-23,44,53,0,-10,36,12, 
  /* [9][0][][] */ 15,-91,-34,17,77,76,-11,-46,13,-37,71,90,-25,17,77,-88,3,-31,-2,1,-40,-58,22,6,-15,12,-17,39,-18,-2,-3,-18,26,24,-85,52,-6,23,-20,61,24,-66,-5,51,-8,15,-49,-17,29,25,-3,-59,45,16,-33,-55,-2,86,-7,-7,32,-49,-26,127,-77,-16,-18,-8,19,40,-52,-72,58,-10,-4,15,35,-74,14,8,2,-23,-12,17,7,-43,30,-12,8,-21,-54,23,-60,12,-3,-34, 
  /* [10][0][][] */ -47,-19,-18,-37,-17,-6,54,-10,38,23,21,27,22,-9,-7,-4,1,24,-22,-14,0,31,18,16,-14,-14,15,-127,22,-42,50,-30,-2,15,-5,-21,-6,23,0,-11,5,-32,15,-40,9,-14,24,12,-11,28,-28,-28,-27,-13,7,-43,14,13,-10,-30,19,16,3,1,-32,81,-10,-32,7,-30,1,-12,-36,-5,21,46,5,40,-15,14,-22,0,12,30,-1,-11,-14,103,-7,-10,14,10,24,-37,30,-43, 
  /* [11][0][][] */ -91,28,-6,9,26,-52,-7,-15,-57,-15,-7,33,20,31,-23,-12,37,-11,-60,-61,27,-27,-16,12,70,11,69,8,-15,25,-42,15,-11,24,-13,2,-20,1,10,13,-26,-17,5,4,85,33,87,23,58,39,-6,36,11,-67,12,-11,-80,1,-30,-40,9,-15,0,34,-3,-33,23,10,31,19,-7,28,-14,11,27,6,-29,77,-124,60,-40,-9,-79,-81,127,31,54,-23,19,58,-32,-71,-26,69,-26,7, 
  /* [12][0][][] */ -3,-10,-61,-3,58,31,8,-22,-24,22,27,5,3,-18,37,-10,-33,-9,4,-23,-17,-23,-47,61,-17,54,-35,121,-22,30,-36,-3,-11,37,9,38,-17,-12,18,17,11,-15,6,-10,-23,15,21,27,-2,-2,-5,-16,-30,-2,-35,-33,-3,-10,25,15,-3,-28,-5,66,41,-80,6,61,-28,-127,-12,51,14,1,9,98,-13,-30,-2,10,-9,24,-51,-3,18,-11,10,-47,5,17,8,1,-49,45,-1,38, 
  /* [13][0][][] */ -95,68,19,-8,-73,-4,-42,48,-28,-28,43,22,93,6,-17,6,-6,25,-41,-5,20,-9,65,-80,62,31,15,-25,15,-30,-17,-104,-111,-49,8,-11,-6,23,45,-20,-36,87,-16,29,55,-1,-17,-8,56,-25,36,58,79,-68,115,-17,-40,51,34,11,5,39,-16,9,1,-25,25,8,8,7,33,-127,-8,-17,-80,-4,82,73,-49,-50,76,-31,20,-18,35,-40,85,-8,-28,-2,-23,29,47,-51,-24,2, 
  /* [14][0][][] */ -34,22,-6,-57,40,-10,-25,50,-83,11,15,-8,-26,-62,-77,-28,-85,-7,63,15,25,17,16,-119,-54,12,-42,-31,10,-16,7,-24,-71,-38,30,0,-4,-15,14,-1,18,85,-79,-14,-50,3,-6,7,127,-32,25,-30,30,59,-96,23,-20,17,-111,20,-1,34,42,9,-2,41,16,-10,-56,8,65,40,14,-5,-26,18,69,-71,-32,-103,13,-19,28,55,31,-83,-53,13,-43,14,30,59,14,14,18,-24, 
  /* [15][0][][] */ -33,-60,3,-29,6,11,-11,-45,-10,20,-8,-37,31,-12,46,-11,-72,3,-20,15,-14,14,-61,-39,-10,0,3,9,-12,-12,62,-75,-3,24,21,-5,-6,7,-86,2,30,-63,-10,29,-23,-50,44,26,37,9,-9,-127,2,55,11,36,28,-5,-21,44,2,5,35,-15,2,2,-2,-3,-24,16,4,33,-49,3,9,-33,-15,-1,7,9,-15,37,0,67,-16,-30,-40,-37,-35,47,29,73,-29,-13,-3,-11, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.030851297080516815, 0.017521088942885399, 0.0088596204295754433, 0.010720361955463886, 0.020925566554069519, 0.014943134039640427, 0.017113357782363892, 0.012020359747111797, 0.011263175867497921, 0.013321329839527607, 0.031077085062861443, 0.024597397074103355, 0.016171464696526527, 0.0090508274734020233, 0.019566532224416733, 0.026623895391821861, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[96] = { 18476, 66050, -1289, -845, 15727, -6361, 15, -936, 5622, 15432, -5023, -126, 225, 4973, 5224, -9011, -4089, -156, -551, 13341, -10467, 17909, -3145, 7671, 32117, -313, -5153, 16757, 14291, -19443, 1077, 22074, 23666, -10567, 1684, 225, -476, -489, 4472, -8089, -4940, -203, -10294, -431, 29578, -1596, 12682, -1247, -14188, 2535, -195, -318, -2481, 17227, -4182, 15574, 23318, -125, 36002, 352, -9325, -369, 1414, -115, -1456, 14273, -1690, -6650, -2706, 3203, 488, -4760, 1006, 149, -2525, -5348, -782, -1882, 52380, -7023, -6032, -11563, -139, 688, 67834, -13465, -11569, -27610, -7611, 9727, -2859, 37219, -401, -1575, -3051, 685, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00012167303793830797, 8.6271124018821865e-05, 0.00010239797848043963, 0.00020959088578820229, 0.00020031013991683722, 0.00013589239097200334, 4.8087065806612372e-05, 9.541202598484233e-05, 0.00023841089569032192, 0.00015780457761138678, 0.00023388938279822469, 0.000118169431516435, 0.00027831335319206119, 0.00020476728968787938, 0.00037101487396284938, 0.00016013030835893005, 0.00020432201563380659, 0.00017877295613288879, 0.00020669287187047303, 8.4396517195273191e-05, 7.8959572419989854e-05, 5.0856840971391648e-05, 0.00014511682093143463, 9.2789181508123875e-05, 8.652026008348912e-05, 0.00011122445721412078, 0.00018988197552971542, 0.00019316305406391621, 7.695161912124604e-05, 0.00043939633178524673, 0.00037952355341985822, 0.00022439321037381887, 0.0001130221426137723, 0.00015154475113376975, 0.00020974640210624784, 0.00043697911314666271, 0.00040672015165910125, 0.00023055639758240432, 0.00022970355348661542, 0.00010108484275406227, 0.0002244765346404165, 0.00022221113613341004, 0.00033572397660464048, 8.7154017819557339e-05, 0.00035531388130038977, 0.00010474216105649248, 0.00010886853124247864, 0.00026063094264827669, 0.00071399752050638199, 9.7688411187846214e-05, 0.00050182541599497199, 0.00017360688070766628, 0.0002069540205411613, 0.00016574564506299794, 0.00019971423898823559, 0.00011486178118502721, 0.00011990344501100481, 0.00042030744953081012, 4.4218304537935182e-05, 0.00015712653112132102, 0.00029520023963414133, 0.00031898045563139021, 0.0001115215418394655, 0.00015881356375757605, 0.00013327921624295413, 0.00012595596490427852, 0.00025460883625783026, 0.00032748078228905797, 0.00019175042689312249, 0.00011982324940618128, 0.00021634822769556195, 9.7261028713546693e-05, 0.0002653745177667588, 0.0001393286365782842, 0.00029400564380921423, 0.00034654600312933326, 0.00013549225695896894, 9.0724715846590698e-05, 4.982823520549573e-05, 0.00018219792400486767, 0.00025078814360313118, 0.00023528299061581492, 0.00016436596342828125, 0.00027680618222802877, 5.2141327614663169e-05, 0.00011166925105499104, 7.8291384852491319e-05, 0.00048372335731983185, 0.00024732109159231186, 0.00012090529344277456, 0.00034908344969153404, 3.0322122256620787e-05, 0.00015849167539272457, 0.00011551124771358445, 0.00031313966610468924, 0.00026650563813745975, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ -48,-72,-10,127,22,73,79,-57,-15,-17,-16,-3,-29,1,36,0,-9,-42,26,22,16,-127,127,7,-87,8,50,-29,-127,-127,40,23,10,26,62,-18,-31,-10,29,-3,-13,27,-104,73,27,-68,37,46,-17,51,-24,20,1,-8,16,48,-91,-50,-58,-20,-9,0,7,40,67,-25,76,13,-9,15,19,127,24,24,27,-1,-10,17,127,-4,-15,14,-30,19,123,20,-72,-16,0,-33,-15,-41,2,-26,-16,26, 127,-126,75,106,-43,127,39,-115,69,5,-18,127,127,-99,-14,16,10,127,127,-111,127,-74,82,69,-127,-114,-66,-35,-57,45,-58,-21,-92,56,-127,-85,-43,-14,-53,68,0,127,127,82,-50,-113,-112,-52,-15,-127,43,86,63,-31,44,82,-48,42,-79,-115,-43,-42,-64,69,72,-61,27,30,-84,31,-18,90,119,127,15,18,3,58,-33,52,65,127,127,-24,-9,75,-107,127,-123,-98,5,-127,-87,-127,-39,108, -75,-13,29,-80,15,-27,68,-5,80,-35,-28,20,-18,-5,-9,-14,-10,-17,7,-3,-26,-108,29,1,-125,98,8,-56,113,49,-14,9,0,14,15,-30,-9,35,19,14,24,12,-115,65,17,-19,37,12,-14,10,-16,6,-12,1,-1,21,-65,7,-33,51,4,41,33,1,-6,-39,-32,25,8,1,-4,36,11,-26,-7,3,-12,-6,-85,2,-22,-23,-18,2,-111,9,-30,-23,-51,24,-25,-33,30,-28,-16,1, 
  /* [0][1][][] */ -65,-75,75,-34,-47,94,24,127,-51,-20,-1,-121,27,-113,79,29,-4,-59,-17,86,50,-62,49,53,-101,-11,127,-23,-24,63,123,-106,-127,90,-86,-56,-36,32,-30,99,-50,-27,-4,45,-46,127,-24,66,15,95,20,-3,14,-53,28,32,127,122,-70,-85,127,-34,-37,127,70,-38,-15,-3,127,38,127,97,-40,100,-4,11,16,15,-34,11,-43,123,-82,112,0,35,-51,30,82,-127,-31,-5,127,-66,-23,1, 67,127,57,-112,127,82,89,38,-127,127,127,-38,-64,-127,-127,127,127,-64,-123,-53,107,92,-121,127,-110,-89,-42,127,-127,108,-127,-127,-89,127,109,127,127,-127,-105,127,-66,-99,111,-127,-127,-32,-127,-127,127,-111,86,43,127,127,127,-127,100,-127,-127,127,19,-82,-127,-100,-127,127,-127,127,-127,-127,-108,-82,-127,-80,127,127,-127,127,-79,127,127,30,-40,-127,61,127,93,45,127,13,127,4,-65,35,127,-127, -54,-12,-50,39,-55,-102,39,-22,19,-34,-28,92,2,90,14,8,-6,62,-5,125,1,-79,-41,9,-79,105,-71,-21,-68,-16,16,-63,-71,37,6,-18,-30,45,-67,46,127,-5,-37,29,-41,-55,16,45,7,117,-10,6,-36,-71,8,19,95,3,1,22,-34,127,95,-53,-43,12,38,-9,-81,120,-19,-85,0,-55,-17,-20,28,17,77,-36,-71,-40,58,13,-47,-16,72,22,13,62,-43,20,-42,94,-27,-5, 
  /* [0][2][][] */ -65,2,-3,-20,13,-46,69,26,56,-28,-37,-3,19,21,-26,1,-9,64,7,0,-56,-75,3,-9,-30,-52,34,-70,89,38,27,26,17,-10,-11,-46,-6,35,-4,3,-15,-6,-65,104,4,32,10,37,-16,-31,11,-21,22,-2,11,15,-71,24,-16,14,15,1,-23,-6,-1,-46,-49,13,-34,14,26,32,13,-21,30,2,19,4,-80,-12,-8,-7,14,13,-127,6,15,-43,-55,-51,-27,-50,10,56,-19,-9, 123,33,-127,-36,-71,-26,40,32,-66,-28,-19,-107,-76,112,-13,36,2,-52,-9,-127,90,-50,-38,0,-112,127,-50,19,-36,-21,-8,-3,-61,13,29,4,-22,-29,127,54,11,-16,66,-33,-40,77,-67,-43,-33,-6,-127,-127,-47,-26,2,39,-66,-5,9,38,-9,-18,7,-47,-54,33,65,-23,116,108,-25,-67,11,-59,2,3,101,3,52,21,13,-98,-49,2,3,7,127,40,-61,36,-17,-108,42,77,-10,26, -52,13,-19,25,16,-72,-127,6,-11,-8,-15,4,16,-24,18,-2,-9,-17,6,16,-49,-71,15,2,11,-93,20,1,-48,-39,-6,17,42,-22,-5,-26,-36,2,40,-39,23,-2,-47,-33,2,65,23,15,-10,-4,10,-9,17,3,-3,-6,-62,-13,4,-39,-13,10,85,-12,34,-2,-1,26,1,5,-4,20,-18,14,0,13,38,1,74,-11,4,-6,-7,-20,76,-3,47,-39,63,37,-16,-57,-7,2,-15,-16, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.0051711038686335087, 0.0036665226798504591, 0.0043519139289855957, 0.0089076124131679535, 0.0085131805390119553, 0.0057754265144467354, 0.0020437003113329411, 0.004055011086165905, 0.010132462717592716, 0.0067066946066915989, 0.0099402982741594315, 0.0050222007557749748, 0.011828317306935787, 0.0087026096880435944, 0.015768131241202354, 0.0068055381998419762, 0.0086836852133274078, 0.0075978506356477737, 0.0087844468653202057, 0.0035868517588824034, 0.0033557817805558443, 0.0021614157594740391, 0.0061674648895859718, 0.0039435401558876038, 0.0036771108862012625, 0.0047270394861698151, 0.008069983683526516, 0.0082094296813011169, 0.0032704437617212534, 0.018674343824386597, 0.0161297507584095, 0.0095367114990949631, 0.0048034409992396832, 0.0064406520687043667, 0.0089142220094799995, 0.018571611493825912, 0.017285605892539024, 0.009798646904528141, 0.0097624007612466812, 0.0042961058206856251, 0.0095402523875236511, 0.0094439731910824776, 0.014268268831074238, 0.0037040456663817167, 0.015100839547812939, 0.0044515416957437992, 0.0046269125305116177, 0.011076814495027065, 0.030344894155859947, 0.0041517573408782482, 0.021327579393982887, 0.0073782922700047493, 0.0087955454364418983, 0.0070441900752484798, 0.0084878550842404366, 0.0048816255293786526, 0.0050958963111042976, 0.017863066866993904, 0.0018792778719216585, 0.0066778776235878468, 0.012546010315418243, 0.013556669466197491, 0.0047396654263138771, 0.006749576423317194, 0.0056643667630851269, 0.0053531285375356674, 0.010820875875651836, 0.013917933218181133, 0.0081493929028511047, 0.0050924881361424923, 0.0091947996988892555, 0.0041335937567055225, 0.011278416961431503, 0.0059214672073721886, 0.012495240196585655, 0.014728205278515816, 0.0057584205642342567, 0.0038558004889637232, 0.0021176999434828758, 0.0077434116974473, 0.010658496059477329, 0.0099995266646146774, 0.0069855530746281147, 0.011764262802898884, 0.0022160063963383436, 0.0047459430061280727, 0.0033273836597800255, 0.020558241754770279, 0.010511145927011967, 0.0051384749822318554, 0.01483604684472084, 0.0012886901386082172, 0.0067358962260186672, 0.0049092280678451061, 0.013308435678482056, 0.01132648903876543, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 1514, 6911, 14332, 34432, 14398, -3612, -1545, 6486, 34864, -4551, 9595, 3302, 9262, 12687, 33922, 1441, 2794, 8582, 17603, 5913, -359, 534, 13471, -1273, 4035, -46, 12195, 9174, 5861, 41882, 44107, 20793, 7564, -663, 11262, 2663, 1788, 5008, 26224, -850, 12745, 7871, 29410, -3780, 26405, 6965, 5555, 21304, 62450, 10517, -498, 6808, -3915, -225, -2744, 6199, -532, 13851, 5757, 8953, 4269, 12639, 8548, 5054, 10875, 9535, 5007, -5104, 7541, -3019, 3726, 12121, 17868, 5529, -4502, -3431, 6300, 291, 2758, -1156, 18485, 13734, 5393, 17018, 3312, 334, 13411, 91892, 11644, 12126, 6515, -187, 6091, 9545, 5332, 11506, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00023184648307505995, 0.00021340309467632324, 0.00013288728951010853, 6.7271357693243772e-05, 0.00020731717813760042, 0.00027355868951417506, 0.00050495268078520894, 0.00024218964972533286, 6.6998698457609862e-05, 0.00029845358221791685, 0.00027958533610217273, 0.00025641149841248989, 0.0001389569224556908, 0.00018233292212244123, 6.996563752181828e-05, 0.00038213012157939374, 0.0001710870856186375, 0.00014703696069773287, 0.00012747495202347636, 0.0001987869618460536, 0.00026271591195836663, 0.00049275130731984973, 0.00014700440806336701, 0.00052097538718953729, 0.00063782540382817388, 0.00019576193881221116, 0.00018242790247313678, 0.00015150541730690747, 0.00027998638688586652, 8.4307546785566956e-05, 6.4039115386549383e-05, 0.00011861801613122225, 0.00021510860824491829, 0.00032527660368941724, 0.00017597978876437992, 0.00022005884966347367, 0.00027850538026541471, 0.00029218036797828972, 0.00010289638885296881, 0.00066133384825661778, 0.00014598849520552903, 0.00019961837097071111, 9.0627523604780436e-05, 0.00027192159905098379, 0.00012333918130025268, 0.00021480819850694388, 0.00030779707594774663, 0.00012746296124532819, 6.6003580286633223e-05, 0.00019967091793660074, 0.00025382576859556139, 0.00024873853544704616, 0.00028159067733213305, 0.00020787787798326463, 0.00037819801946170628, 0.00017999735428020358, 0.00017917540390044451, 0.00013518279592972249, 0.00035901594674214721, 0.00016704782319720834, 0.00037478798185475171, 0.00011063094279961661, 0.0001717270934022963, 0.00019323187007103115, 0.00022974707826506346, 0.00019986169354524463, 0.00025694412761367857, 0.00026285098283551633, 0.00022497901227325201, 0.0002377550263190642, 0.00029398468905128539, 0.00013255007797852159, 0.00011428396101109684, 0.00018920327420346439, 0.00034403061727061868, 0.00038977348594926298, 0.00025619060033932328, 0.00029478888609446585, 0.00027751852758228779, 0.0003524398198351264, 0.00011100166739197448, 0.00011981179704889655, 0.00016197086370084435, 0.00011112292122561485, 0.00034802342997863889, 0.00024066503101494163, 0.00017078232485800982, 4.2057850805576891e-05, 0.00012233445886522532, 0.0001856289163697511, 0.00019268855976406485, 0.00024851539637893438, 0.00023842035443522036, 0.00016685815353412181, 0.00021214995649643242, 0.00014626630581915379, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -9,68,-33,65,21,31,23,-17,40,39,-41,127,-24,-88,55,-123, 
  /* [1][0][][] */ 29,51,4,-36,25,-32,127,-116,3,89,8,-33,6,-46,33,12, 
  /* [2][0][][] */ -127,32,-35,-8,6,-1,52,94,-28,77,77,1,-57,33,20,-69, 
  /* [3][0][][] */ -113,63,36,31,-87,54,84,97,2,113,-127,1,44,-110,-63,-79, 
  /* [4][0][][] */ 19,-6,56,57,-9,32,12,27,12,-27,-4,1,15,9,-127,-21, 
  /* [5][0][][] */ -5,-37,63,-13,17,-17,-10,27,-46,98,-24,-127,-19,26,-60,-24, 
  /* [6][0][][] */ 31,5,37,-39,27,53,-57,-62,-7,-7,46,0,127,-11,-5,-17, 
  /* [7][0][][] */ 38,1,127,-23,-15,-42,30,-29,-63,35,-81,-66,32,-4,40,-34, 
  /* [8][0][][] */ 15,46,96,107,-71,68,25,55,34,15,3,-105,-7,-6,-127,-92, 
  /* [9][0][][] */ 32,-106,35,57,9,-34,-7,22,127,15,91,9,-20,5,-103,-49, 
  /* [10][0][][] */ -48,-87,-3,-23,-100,3,-26,46,93,127,32,-41,-32,42,79,-14, 
  /* [11][0][][] */ 49,-11,21,-63,16,-32,-101,-127,-34,46,5,-29,45,6,32,-72, 
  /* [12][0][][] */ -24,15,1,-35,-33,-41,-115,-15,-54,-73,-24,21,17,127,90,52, 
  /* [13][0][][] */ -36,-121,-84,32,20,-60,-27,-33,66,3,-31,-15,28,20,127,28, 
  /* [14][0][][] */ -25,-65,52,29,38,50,-4,127,32,70,14,-52,21,49,-76,124, 
  /* [15][0][][] */ 13,-38,8,63,18,-6,88,-7,10,-127,16,-33,0,-18,-9,-36, 
  /* [16][0][][] */ 24,-97,-48,37,8,11,46,-67,122,77,122,11,-7,106,44,127, 
  /* [17][0][][] */ -50,-33,76,101,66,35,-3,8,69,-68,-23,-29,17,54,-127,41, 
  /* [18][0][][] */ -1,9,20,24,-127,-7,-14,47,-77,-25,-36,-48,9,-121,72,-12, 
  /* [19][0][][] */ 66,-96,74,-81,81,-36,-61,62,102,-59,74,51,-38,58,60,127, 
  /* [20][0][][] */ 31,-15,63,-80,-18,11,-22,66,-34,-54,117,-9,25,4,-51,127, 
  /* [21][0][][] */ -66,-24,0,-29,11,48,-79,-40,-29,83,23,9,-127,-27,6,14, 
  /* [22][0][][] */ 29,-17,13,-18,26,-69,12,-15,-127,18,-21,-40,-43,-28,88,-8, 
  /* [23][0][][] */ 24,18,19,-17,6,17,-16,10,-13,-17,46,-9,127,-12,-1,-41, 
  /* [24][0][][] */ -17,3,-17,-49,-24,-5,44,12,-26,6,5,-127,14,-92,29,8, 
  /* [25][0][][] */ -127,59,-50,19,93,-18,-76,-121,-23,95,-53,-72,-102,-122,4,-78, 
  /* [26][0][][] */ 24,-19,55,-87,121,-17,2,-4,127,-36,34,-34,0,82,-10,66, 
  /* [27][0][][] */ 102,-22,32,-39,-30,-72,-1,-26,-24,12,-127,12,6,-2,4,45, 
  /* [28][0][][] */ -98,5,-127,-71,41,0,74,-49,-1,49,-38,22,26,-18,-27,53, 
  /* [29][0][][] */ -60,-25,-6,127,-13,15,4,-45,7,8,-65,34,14,-84,26,-29, 
  /* [30][0][][] */ 47,-15,127,-23,44,11,-14,55,-24,-74,30,-22,-4,41,-58,59, 
  /* [31][0][][] */ 5,-108,-11,-64,-16,-78,23,-53,-31,48,108,22,-33,86,90,127, 
  /* [32][0][][] */ -15,68,-29,36,-127,16,-68,-45,-46,-31,-8,39,10,49,36,55, 
  /* [33][0][][] */ 54,-29,33,127,28,-13,17,-36,-97,44,67,-24,-3,3,6,96, 
  /* [34][0][][] */ 26,9,45,21,91,-36,-127,0,-41,88,-49,24,-21,14,-15,-23, 
  /* [35][0][][] */ 64,11,-22,-1,25,-127,-31,-18,-19,9,-74,12,77,27,-2,14, 
  /* [36][0][][] */ 29,6,-127,10,37,-7,-38,33,-42,-22,1,-12,4,24,-22,19, 
  /* [37][0][][] */ -14,4,127,-9,-73,49,27,-68,-6,54,-73,26,39,-2,20,-16, 
  /* [38][0][][] */ -124,42,2,47,37,88,9,-2,23,-11,127,-35,-19,32,-18,-28, 
  /* [39][0][][] */ -11,-10,11,32,28,-10,-127,45,7,37,0,-41,0,-28,11,6, 
  /* [40][0][][] */ 0,42,-17,127,21,48,74,23,-48,-30,-35,78,-5,80,-31,-51, 
  /* [41][0][][] */ 18,22,-48,-28,-51,-14,127,82,-55,67,-21,-6,-5,56,43,12, 
  /* [42][0][][] */ -5,-7,-24,-36,42,33,-30,-4,88,-65,127,28,7,21,-42,39, 
  /* [43][0][][] */ -75,-3,7,-25,37,47,-88,-90,-29,34,18,-7,-127,-13,26,-27, 
  /* [44][0][][] */ 20,-5,-4,-7,11,-26,-17,-40,127,-14,-4,46,18,68,-15,23, 
  /* [45][0][][] */ -28,-54,-12,-85,48,27,-27,64,29,-77,30,-4,-7,100,-20,127, 
  /* [46][0][][] */ -53,24,-39,84,-71,-10,5,-57,-127,37,-32,7,4,24,-12,-40, 
  /* [47][0][][] */ -41,-23,-109,127,10,23,8,-38,13,53,60,80,-31,-13,42,-50, 
  /* [48][0][][] */ -15,17,-7,-113,21,6,-40,25,-91,46,16,17,-2,30,127,35, 
  /* [49][0][][] */ -45,8,38,104,-15,45,-72,-15,26,-71,-99,-8,-37,-42,-110,-127, 
  /* [50][0][][] */ -4,54,18,-82,73,21,-17,40,127,-4,-30,-6,2,-43,-6,-38, 
  /* [51][0][][] */ 10,-23,0,-19,44,-9,-31,-127,9,-50,8,14,-9,-3,9,-9, 
  /* [52][0][][] */ 6,30,-32,31,16,-10,-54,92,-83,127,-40,-20,78,95,15,-42, 
  /* [53][0][][] */ -15,111,7,-78,-25,31,19,-30,-88,-53,-50,62,24,-127,-118,-24, 
  /* [54][0][][] */ 5,2,22,26,44,-30,2,-35,-3,20,-16,-12,-15,127,-30,-11, 
  /* [55][0][][] */ -102,127,109,-16,54,-22,-13,-4,-46,11,87,-27,-40,-20,120,-1, 
  /* [56][0][][] */ 32,12,-8,-113,75,-6,-10,14,58,-53,81,127,-14,-2,117,56, 
  /* [57][0][][] */ -35,8,2,64,-40,44,38,127,-34,11,10,-28,-14,52,12,31, 
  /* [58][0][][] */ 21,127,14,-119,7,22,-20,15,92,-19,-17,53,19,-69,46,69, 
  /* [59][0][][] */ 31,49,41,-99,-42,-11,17,0,0,6,35,-51,-11,-127,-53,15, 
  /* [60][0][][] */ 26,4,80,-42,-27,127,25,-38,-4,20,-22,6,22,13,20,-6, 
  /* [61][0][][] */ -22,-4,-41,-40,-53,-15,127,85,-8,61,-9,11,15,71,19,-31, 
  /* [62][0][][] */ 1,-29,28,-31,-99,-33,-17,-11,-34,-15,-13,-87,20,-127,68,15, 
  /* [63][0][][] */ 31,-47,-6,-90,45,19,-121,-105,-34,127,-27,-10,97,35,15,-38, 
  /* [64][0][][] */ -29,-13,47,38,89,-9,-43,-110,29,-127,-17,-40,1,-9,-21,16, 
  /* [65][0][][] */ -127,9,23,-71,16,76,52,-55,-89,36,45,-7,16,8,-25,-28, 
  /* [66][0][][] */ 58,7,95,23,-39,13,-31,35,-51,-13,54,-58,-17,52,-127,-28, 
  /* [67][0][][] */ 51,-22,-23,57,41,-39,-53,-63,13,-127,-91,-29,-93,2,-80,14, 
  /* [68][0][][] */ 23,-22,-83,50,-38,-84,-41,-57,-29,-37,35,-45,-32,69,127,-21, 
  /* [69][0][][] */ -21,32,-79,35,-11,-127,15,105,17,18,79,1,118,41,-16,14, 
  /* [70][0][][] */ 14,6,-29,-26,-42,-11,127,58,-14,56,-7,-1,1,27,17,-14, 
  /* [71][0][][] */ 9,-10,-27,-55,18,2,11,62,-30,-41,-5,-3,33,-127,78,2, 
  /* [72][0][][] */ 41,8,-13,40,33,-29,-39,-127,27,66,-60,6,49,64,36,43, 
  /* [73][0][][] */ -45,-127,-10,-79,-76,-29,31,-24,-28,1,-46,-27,45,-25,51,-13, 
  /* [74][0][][] */ -22,39,61,95,-4,15,-127,114,24,-35,-32,-36,-11,-14,-18,-1, 
  /* [75][0][][] */ -47,10,-19,-7,-6,66,79,76,5,30,21,-46,-127,82,6,28, 
  /* [76][0][][] */ 17,-20,18,-36,25,-125,-93,-127,-16,-31,-26,-48,60,15,42,-41, 
  /* [77][0][][] */ -33,2,-35,-25,-49,-12,-20,-47,127,8,-77,24,-12,60,51,-85, 
  /* [78][0][][] */ -89,-127,-5,100,88,67,-26,53,0,-64,-124,84,61,-6,109,57, 
  /* [79][0][][] */ 26,-8,24,-51,127,19,52,21,67,33,13,27,7,-29,17,-44, 
  /* [80][0][][] */ -7,-26,55,-116,-26,-41,-16,18,-93,-58,-10,-38,0,127,-39,19, 
  /* [81][0][][] */ 38,-5,60,46,9,27,-41,-29,5,-26,-1,-40,19,57,-127,7, 
  /* [82][0][][] */ -83,-13,-9,-105,-20,-20,-4,-16,-48,-35,-29,-106,-35,-127,-51,54, 
  /* [83][0][][] */ 16,11,0,-73,-65,-26,15,4,-59,3,25,-103,23,-127,14,72, 
  /* [84][0][][] */ 127,24,37,62,-42,-5,-53,20,10,-22,106,24,-60,55,76,-103, 
  /* [85][0][][] */ -23,-16,27,-60,63,-7,-56,116,-93,-119,-58,-42,11,81,68,-127, 
  /* [86][0][][] */ 18,24,39,22,-78,85,-74,57,-112,-76,50,-7,-33,-127,-30,28, 
  /* [87][0][][] */ 127,-27,22,-17,-54,-34,-7,-13,0,11,-100,10,37,-14,14,56, 
  /* [88][0][][] */ 42,113,-5,-22,10,-8,-56,-29,127,-15,85,52,-89,-57,115,-107, 
  /* [89][0][][] */ 33,72,-93,-26,-51,-15,46,-69,36,62,40,-39,-43,-17,-19,-127, 
  /* [90][0][][] */ -21,-13,-40,-59,-67,36,127,-44,75,-58,32,-82,72,-44,-25,-25, 
  /* [91][0][][] */ -10,17,-50,-119,-73,26,15,-41,-82,21,102,95,19,-45,32,127, 
  /* [92][0][][] */ 15,10,27,18,70,-38,-47,-127,47,-60,-3,-13,-29,-4,1,-46, 
  /* [93][0][][] */ 48,-1,-1,-127,-24,40,-55,64,63,-106,111,-14,-53,105,-24,57, 
  /* [94][0][][] */ -112,45,-106,-3,63,-127,-16,-17,-13,-46,98,-23,19,-9,-23,-33, 
  /* [95][0][][] */ -29,40,21,-127,-20,-3,-36,-4,16,-26,-64,-69,18,31,-52,-17, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0007835360593162477, 0.00072120572440326214, 0.00044909882126376033, 0.0002273467107443139, 0.00070063810562714934, 0.0009245043620467186, 0.0017065112479031086, 0.00081849127309396863, 0.00022642522526439279, 0.0010086378315463662, 0.00094487168826162815, 0.00086655467748641968, 0.0004696114338003099, 0.00061620265478268266, 0.0002364521351410076, 0.0012914265971630812, 0.00057819683570414782, 0.00049691827734932303, 0.00043080758769065142, 0.00067180983023717999, 0.00088786071864888072, 0.0016652761260047555, 0.00049680826487019658, 0.0017606607871130109, 0.0021555607672780752, 0.00066158664412796497, 0.00061652361182495952, 0.00051201967289671302, 0.00094622705364599824, 0.0002849212905857712, 0.00021642319916281849, 0.00040087514207698405, 0.00072696962160989642, 0.0010992875322699547, 0.00059473194414749742, 0.00074369920184835792, 0.00094122195150703192, 0.00098743720445781946, 0.00034774316009134054, 0.0022350086364895105, 0.00049337494419887662, 0.00067461963044479489, 0.00030627995147369802, 0.00091897172387689352, 0.00041683053132146597, 0.00072595436358824372, 0.0010402146726846695, 0.00043076704605482519, 0.00022306219034362584, 0.00067479722201824188, 0.00085781607776880264, 0.00084062351379543543, 0.00095164886442944407, 0.00070253299782052636, 0.0012781379045918584, 0.00060830946313217282, 0.00060553167713806033, 0.00045685659279115498, 0.0012133112177252769, 0.00056454591685906053, 0.0012666134862229228, 0.00037388244527392089, 0.00058035977417603135, 0.00065303617157042027, 0.00077644101111218333, 0.00067544193007051945, 0.00086835474940016866, 0.00088831718312576413, 0.00076032709330320358, 0.00080350425560027361, 0.00099353503901511431, 0.00044795920257456601, 0.00038622799911536276, 0.00063942134147509933, 0.0011626675259321928, 0.0013172577600926161, 0.00086580816423520446, 0.00099625287111848593, 0.00093788682715967298, 0.0011910868342965841, 0.00037513533607125282, 0.00040490957326255739, 0.00054738810285925865, 0.00037554511800408363, 0.0011761614587157965, 0.00081333873094990849, 0.00057716685114428401, 0.00014213647227734327, 0.0004134350165259093, 0.00062734162202104926, 0.00065120001090690494, 0.00083986943354830146, 0.00080575275933369994, 0.00056390493409708142, 0.00071697070961818099, 0.00049431383376941085, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[16] = { 950, 5501, -12123, 29062, 24189, 5148, -5798, 1374, 23353, 2344, 27414, 26265, -20146, 13455, 33756, -25807, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 0.00042274515726603568, 0.00028742256108671427, 0.00025504711084067822, 0.00022965243260841817, 0.00033428805181756616, 0.00035714148543775082, 0.00026985167642123997, 0.00037574971793219447, 0.00020621773728635162, 0.000252910191193223, 0.000375756761059165, 0.00060525891603901982, 0.00040493646520189941, 0.0004752195964101702, 0.00054338033078238368, 0.00032221904257312417, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 4,20,-17,12,45,75,-42,-32,46,5,21,13,-11,4,30,74,9,-6,-4,-5,99,-55,5,-4,-35,-29,-52,-105,-10,-11,54,41,109,1,6,-6,11,-10,-15,14,-29,14,11,-30,0,-45,-23,10,-2,15,8,-7,-41,-20,-1,-4,28,31,-20,-35,-55,25,8,-8,19,10,48,-8,15,11,7,-30,-66,-1,4,4,-15,-97,9,-21,47,-22,-59,-55,36,-4,12,22,-6,9,8,-42,21,31,-12,127, 
  /* [1][0][][] */ 64,-116,34,93,-5,-66,-37,-45,-23,-97,-11,26,18,-89,-32,-36,-99,-5,34,29,-32,-117,-37,12,127,-71,-75,16,-47,116,-7,59,-1,7,-55,15,-20,-12,44,-32,19,-82,83,-44,-77,2,74,-17,65,0,-10,-67,86,-68,42,-38,8,34,-32,-125,11,-81,4,-59,8,-95,24,26,29,55,-47,-6,-118,23,-17,64,30,78,24,-11,37,10,-96,30,-84,73,-12,76,-48,19,17,0,-1,-43,38,-16, 
  /* [2][0][][] */ 16,23,1,-29,19,13,-12,18,69,-22,17,71,6,-6,56,5,-5,-24,4,8,-10,-52,17,-70,-15,-21,-33,24,-20,31,119,-63,3,-48,-17,53,8,127,-60,-24,12,-5,-6,31,-49,-60,-57,23,40,22,-15,-19,24,-2,-2,-24,-33,9,-17,35,18,-8,86,100,10,-90,10,-73,-17,-12,-18,-1,-8,-8,-17,7,28,55,12,12,12,84,29,-12,-2,11,29,-3,39,20,-5,-55,-27,-2,5,64, 
  /* [3][0][][] */ -15,-31,-28,36,24,-26,-3,-6,-14,23,24,10,7,-9,47,-2,32,-37,37,-1,-5,-17,-22,8,-4,14,10,6,34,-48,60,-20,19,-36,-24,62,-1,0,-6,23,8,-73,17,-39,-14,-2,-21,5,-127,41,-16,16,-127,-39,-16,-26,31,9,4,58,-10,36,13,15,-23,-89,-33,13,51,14,5,28,-53,23,0,-33,-51,-48,18,-40,8,-19,25,71,32,52,23,19,25,-15,-3,15,-30,8,-23,-20, 
  /* [4][0][][] */ -4,-21,14,-64,5,-11,-36,2,-22,-35,-27,-13,12,65,9,0,47,-10,5,4,-7,30,46,8,-8,-7,21,13,0,-3,-14,-1,-29,7,6,27,27,-32,-10,2,11,11,-85,-24,24,-9,-12,-13,-6,80,5,-14,-28,-13,19,-2,7,-29,22,36,15,10,10,-2,27,-116,21,-14,-48,21,-16,5,-12,17,-17,20,-12,61,58,3,21,-2,127,-29,40,-21,-9,-4,63,16,-7,23,-30,19,-11,-36, 
  /* [5][0][][] */ -2,-1,4,-2,-14,-18,0,116,52,-14,-12,-24,-15,29,39,32,-28,-9,9,-39,-43,-20,-15,-31,18,12,33,76,75,9,63,37,-40,-3,-6,-2,-35,-38,-17,-12,-41,-17,-6,1,47,11,-2,7,7,10,-27,-1,-14,-8,10,-7,-20,-19,3,26,-59,32,-31,-33,8,12,-20,-2,-1,19,7,5,22,26,3,2,-9,26,-1,127,-7,-41,22,29,5,-10,9,-15,-13,-30,18,-107,-45,-17,-23,-111, 
  /* [6][0][][] */ -25,-7,-16,-57,6,-16,-22,-1,2,9,-10,-5,40,-56,3,-8,-7,-50,22,15,-7,4,-14,14,72,-18,-2,-2,4,-10,16,-12,-18,22,-24,-5,25,-2,18,27,3,-28,-49,-20,-1,-28,43,-127,24,22,7,18,10,-6,-15,-44,24,-3,-9,6,29,21,3,6,37,71,16,-19,-25,-6,16,-33,22,2,41,-5,-33,24,18,9,-13,4,44,-34,-10,54,3,-37,28,13,-38,-16,-7,15,10,5, 
  /* [7][0][][] */ 18,7,26,-27,-11,0,-9,-29,-3,-14,-8,-10,-9,-82,28,10,-14,-21,-16,-16,1,-20,-38,2,-23,-10,3,-18,9,2,9,-6,-4,-1,-12,-20,6,-10,-20,19,14,-19,-21,37,-10,12,-9,58,-9,17,-25,-24,-26,4,-7,-63,34,-6,3,-1,-2,7,-18,-9,-15,52,15,-37,-11,-5,11,37,-15,5,-16,12,38,4,-5,-7,6,-29,31,-3,-37,127,-11,0,-41,-26,2,16,-30,10,-3,1, 
  /* [8][0][][] */ -68,38,-62,-5,57,-7,-11,24,19,87,-54,1,8,36,71,-21,-10,34,-80,16,13,35,-38,-11,-45,-22,19,10,46,-85,-3,-12,25,17,18,-3,-27,18,-45,43,-5,13,1,-124,-38,-4,45,-29,-58,39,8,67,-127,63,29,-9,17,-18,-22,3,-8,-34,14,17,-27,37,31,-16,-8,-10,27,79,-16,39,36,31,-7,-97,15,-45,-12,-22,25,8,-58,6,26,-51,4,49,-32,10,33,-15,-17,6, 
  /* [9][0][][] */ 29,-66,-29,-32,12,15,-22,38,23,-8,-9,15,-53,-16,7,20,-20,10,57,-27,-24,0,-43,-38,46,14,36,-3,-11,-39,-17,-2,-13,-5,18,41,11,31,-25,42,4,7,-19,-102,8,-4,7,-127,-38,16,-8,28,-19,7,-10,-1,-40,20,1,15,0,21,5,25,23,122,50,39,10,-5,10,-22,-28,11,-48,26,58,2,2,22,-10,12,21,-46,9,16,-10,15,-54,34,-37,-4,1,5,4,-11, 
  /* [10][0][][] */ 23,50,-21,19,60,-103,-13,-31,5,55,30,-3,-12,21,13,-80,25,35,-14,42,-80,-8,-3,-39,-64,-25,-57,45,9,11,0,35,-13,-14,30,-12,72,-4,-20,-24,-9,65,47,-29,-57,-11,-41,7,-24,-16,-34,-8,-9,-10,9,-14,12,32,-41,-13,5,5,-8,25,13,41,53,23,21,3,33,55,-38,-15,-50,-16,-7,21,-13,19,23,-10,-76,-32,71,-44,103,-14,-23,7,25,-20,74,32,-12,-127, 
  /* [11][0][][] */ 47,32,-30,24,-4,13,49,13,2,-9,-20,-8,3,7,34,8,-9,-11,-97,-14,-5,9,-5,-5,-44,-19,-5,6,14,18,9,-15,4,8,8,24,10,4,5,26,-3,24,59,-95,28,-46,-4,-16,-127,13,0,-48,17,15,-10,16,-23,-11,21,7,5,-7,0,1,-52,54,-21,10,16,-8,30,6,-61,-19,8,35,-9,-40,-45,3,21,-6,98,45,4,-13,-24,-13,3,22,-17,3,-2,16,-28,21, 
  /* [12][0][][] */ -31,-4,27,17,-35,21,15,24,127,5,-18,2,-10,16,-36,-50,11,29,20,78,71,31,-14,-10,5,23,23,-25,-103,6,29,-38,2,-32,-10,-18,18,10,46,2,-53,-19,9,16,4,43,2,17,29,19,-48,11,6,4,14,-18,87,-31,12,22,6,-7,-5,-10,-6,43,-32,-4,6,5,-21,-35,11,12,-77,5,25,6,-9,-55,-12,20,57,40,-9,-12,-29,-2,2,10,-4,60,-23,-25,13,23, 
  /* [13][0][][] */ 26,-5,-30,23,31,7,7,-10,-1,1,11,-1,17,-11,7,-8,24,-66,-43,12,-12,-10,15,0,2,1,-9,-6,-17,-41,-9,15,2,19,8,37,10,-4,1,15,7,8,20,38,21,13,-6,-127,18,-10,13,14,-23,-5,15,12,-19,21,20,14,14,14,0,4,-6,-21,-22,-50,8,16,-6,-33,-8,29,-6,14,-23,-1,18,-10,31,-13,-13,15,12,28,14,6,1,7,26,-5,12,15,-3,-8, 
  /* [14][0][][] */ -105,-46,18,41,41,-19,-36,-1,-31,2,-21,15,61,6,-127,-17,75,-17,-27,31,-15,6,46,5,-102,4,22,-24,-60,-75,-30,12,-11,26,22,-74,18,32,-10,11,25,31,-12,-33,20,111,82,51,-104,39,12,41,-52,-12,23,3,-1,13,47,60,45,24,20,45,3,-16,-54,53,0,66,-62,-80,-60,-6,0,37,-12,34,95,-9,57,14,22,19,31,17,49,19,32,48,63,-9,11,18,28,-23, 
  /* [15][0][][] */ 88,-24,24,3,0,80,24,-42,-21,52,8,12,-82,-15,-18,21,29,38,41,-9,14,24,-75,53,15,-1,32,-8,19,41,-64,-76,16,-30,44,-15,36,-24,-65,-127,-2,23,-3,34,0,46,-10,-53,97,-52,-52,37,35,-121,58,-105,-11,-57,2,34,-109,-5,23,22,88,-19,-63,49,-42,68,-31,6,61,18,25,3,26,-64,81,-20,-15,-8,31,78,-27,5,8,-79,13,-4,71,-1,-50,68,30,-15, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.017966669052839279, 0.012215458787977695, 0.010839502327144146, 0.0097602279856801033, 0.014207242056727409, 0.015178512781858444, 0.011468696407973766, 0.015969362109899521, 0.0087642539292573929, 0.010748682543635368, 0.015969661995768547, 0.025723503902554512, 0.017209799960255623, 0.020196832716464996, 0.023093663156032562, 0.013694308698177338, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[96] = { 10415, -9703, 3031, 60457, -1144, -4560, -11539, 4590, -3189, 935, 2890, -1323, 441, -5012, 4817, -5564, -553, 17392, 24641, 2584, 2458, -1702, 902, 478, 15555, -1405, -1030, -3572, -5893, -7254, 5561, -9402, -244, -319, -105, 14422, 1561, -5118, 20846, 1029, -232, 2533, -10273, -7518, -7190, 68368, 296, 13026, 26911, -12526, 194, 9447, 6406, -168, -6367, 2869, -12912, 1275, 1535, -6824, -1305, -775, -11783, -2106, 1292, 16138, 29595, 27820, -12842, 316, -8978, -1370, 53686, 7649, -275, 788, 18255, 33319, -692, -8927, -1769, -9120, 385, -3208, 621, 1015, 391, -377, 1625, -3813, 381, -1072, -609, -1155, 545, 50460, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00017571233911439776, 0.00010812706750584766, 0.00027577931177802384, 3.5556920920498669e-05, 0.00017040983948390931, 0.0001621986593818292, 0.00028043115162290633, 8.258562593255192e-05, 0.00012738113582599908, 0.00039855120121501386, 0.00017209815268870443, 0.00032198827830143273, 0.00010422281047794968, 0.00041485301335342228, 0.0001927459379658103, 0.00015517865540459752, 9.9374126875773072e-05, 0.00031658896477892995, 6.6709879320114851e-05, 0.00024854842922650278, 5.1711500418605283e-05, 0.00018437246035318822, 0.00014129371265880764, 0.00035302538890391588, 0.00022914480359759182, 0.00020549376495182514, 0.00015524611808359623, 0.00018044609169010073, 0.00012697700003627688, 0.00011264356726314873, 0.00014308260870166123, 0.00016824544582050294, 0.0001186683657579124, 0.00015014536620583385, 0.00021502809249795973, 0.00016185360436793417, 0.00040365423774346709, 0.00011369930143700913, 4.4816151785198599e-05, 0.00017508065502624959, 0.00019746436737477779, 0.00034066487569361925, 0.00031307173776440322, 0.00015419544070027769, 0.0001980095257749781, 4.9514892452862114e-05, 0.00023156120732892305, 0.00026878243079409003, 9.5975912699941546e-05, 0.00018706987611949444, 0.00019782438175752759, 0.00013151514576748013, 0.00023396313190460205, 0.00027038616826757789, 0.00026765535585582256, 0.0004475624009501189, 0.00029641739092767239, 0.00021629224647767842, 0.00010273486259393394, 7.7553784649353474e-05, 0.00027968411450274289, 0.00013215017679613084, 0.00027102234889753163, 0.00013162553659640253, 0.00018534691480454057, 0.00017857461352832615, 8.1255224358756095e-05, 6.2704428273718804e-05, 0.00031407788628712296, 0.00022306213213596493, 0.0002215381246060133, 0.00011691600229823962, 0.0001079473877325654, 0.00013329362263903022, 0.00017255371494684368, 0.00022515111777465791, 0.00051194970728829503, 5.0315189582761377e-05, 0.00026634120149537921, 0.00021218697656877339, 0.00016670928744133562, 0.00023364435764960945, 0.00013532728189602494, 0.00013715999375563115, 0.00012633779260795563, 9.6377800218760967e-05, 0.00013452513667289168, 0.00018519698642194271, 0.00021379465761128813, 0.00012470439833123237, 0.00019391278328839689, 0.000106086976302322, 0.00014323399227578193, 0.00041959891677834094, 0.0021954027470201254, 7.4426905484870076e-05, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -18,6,-20,106,-15,22,-63,-54,19,-6,100,-10,2,-8,-3,55,7,15,-33,4,73,0,33,-36,3,17,43,47,21,14,25,49,-6,26,10,-14,5,49,-60,-27,19,8,28,20,-85,-54,26,-6,-11,-20,-7,-6,49,5,-8,1,-3,-37,30,-30,26,-2,127,27,-13,-10,9,-50,67,34,4,-7,80,-32,70,4,16,-126,30,65,1,14,127,-15,37,28,-26,-19,35,-4,-16,83,2,21,-1,14, -49,12,-8,9,53,-9,-12,-127,39,14,-127,-5,-16,-12,6,94,20,-31,-18,-15,77,-96,127,25,-59,-32,-107,-16,30,37,-49,17,118,11,-12,0,-23,127,-65,-127,10,-19,-30,15,45,-127,127,-45,-75,49,49,6,40,-65,32,55,37,42,-101,85,127,35,5,-19,42,-38,-97,1,38,-32,-14,46,-48,-48,106,-4,-31,-60,-31,65,-63,61,-17,9,-10,46,54,-40,-27,55,-15,73,-127,-31,26,-127, 0,-5,-23,-75,9,18,38,20,-3,-2,5,61,1,-13,-9,7,-13,16,-15,17,6,23,23,-33,1,-31,9,13,-8,6,45,-80,44,16,9,-22,13,5,-32,-22,7,2,-15,8,23,-31,21,0,7,-7,5,-5,6,5,-5,6,-4,46,5,0,11,-19,0,-16,-27,-18,28,-47,-106,-8,46,-19,-127,-22,-10,16,10,-12,7,11,-13,23,-34,-3,-40,19,27,36,-25,-14,23,-10,19,8,0,-46, 
  /* [0][1][][] */ -41,59,-18,38,-85,-16,-10,-45,27,97,-46,-22,-31,-25,-8,61,127,-23,-90,-14,60,-127,-30,14,-34,-47,-127,-5,37,37,-48,27,-127,-76,-58,3,65,-1,-51,43,-20,83,1,-2,34,-53,-12,-32,127,43,-4,20,46,9,-36,-18,32,8,-122,127,-38,-89,22,127,-58,-36,-81,127,-38,127,-18,55,-38,-54,37,8,-34,-72,127,47,127,36,4,-1,127,28,-93,47,-39,-33,-103,41,98,104,29,-58, 127,127,127,127,-46,-127,127,21,127,-127,18,-127,-104,127,127,127,-16,-127,-62,-127,127,23,-67,127,127,127,-55,-127,127,127,-127,127,-9,-127,-123,127,-127,-43,93,104,-127,-127,127,127,127,-121,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-41,41,-106,-27,-69,-66,127,127,-71,126,127,-107,-127,127,-44,127,-127,-127,-127,127,-74,127,-41,127,82,127,-38,-127,-23,-108,-127,-123,-23,-127,-21,-127,-127,118, -24,66,-37,3,127,70,-22,46,6,24,-14,-6,-25,-32,-14,-5,-107,-21,-127,37,32,75,-14,-118,-33,-41,126,74,10,37,72,9,122,-48,127,-3,55,6,-95,13,35,22,-23,0,-21,-53,-12,-42,81,15,-13,39,-4,-5,-74,-15,26,22,127,-86,1,127,-3,-34,-111,-29,-78,101,16,-18,117,24,-18,-56,11,47,-28,-8,-43,-3,-46,9,49,24,-90,34,127,-49,32,-20,127,-9,-112,36,34,18, 
  /* [0][2][][] */ -4,-41,-21,-61,-6,14,41,30,-2,10,-22,52,24,-34,-9,7,39,2,18,20,-10,27,-17,-28,2,-26,12,4,-8,-7,50,-74,-38,65,-29,-25,30,-34,-67,17,10,8,-34,19,13,-79,-11,0,-9,7,17,-8,9,1,-21,5,-1,46,-49,33,-5,-14,1,18,-5,-11,21,-50,-57,11,-22,-9,-124,-31,2,17,15,-13,57,20,19,23,-42,14,10,25,-18,9,6,27,22,-6,20,41,-7,-28, -28,-10,-27,23,-47,72,-25,63,7,-6,55,-12,127,-7,-19,-17,-2,-39,-53,22,-23,75,-45,-115,-47,-49,104,69,15,42,54,0,-120,62,-13,-22,-29,-26,-127,-5,44,-15,-16,36,-26,-47,-18,-47,-60,27,67,24,-10,-81,31,51,17,28,74,-54,19,-58,-10,2,20,-27,-127,-55,-10,-26,-62,23,37,-45,-28,-8,-44,26,-55,6,47,34,21,10,5,60,-89,127,16,127,-31,-19,116,-20,47,85, -10,-34,-26,30,10,64,-43,12,4,-6,0,12,14,-52,-11,-13,-46,-6,20,19,-25,4,-21,3,-4,18,-1,52,0,-7,34,29,17,41,20,-22,-7,-25,-33,8,11,-12,22,8,-72,-33,-12,5,-1,-14,-3,-5,-7,9,-15,-6,1,-48,13,-27,-22,48,5,-27,-10,-3,35,-51,49,6,56,-20,29,-55,-16,21,12,11,-5,24,-31,32,94,-14,-17,53,39,-8,111,13,2,-19,11,-21,-8,-50, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0074677742086350918, 0.0045954002998769283, 0.011720620095729828, 0.0015111691318452358, 0.0072424178943037987, 0.0068934429436922073, 0.011918323114514351, 0.0035098891239613295, 0.0054136980324983597, 0.016938425600528717, 0.0073141711764037609, 0.013684501871466637, 0.0044294693507254124, 0.017631253227591515, 0.0081917019560933113, 0.0065950928255915642, 0.0042234002612531185, 0.013455030508339405, 0.0028351699002087116, 0.01056330744177103, 0.0021977387368679047, 0.0078358296304941177, 0.006004982627928257, 0.01500357873737812, 0.0097386538982391357, 0.0087334848940372467, 0.0065979599021375179, 0.0076689585112035275, 0.005396522581577301, 0.0047873514704406261, 0.0060810106806457043, 0.0071504311636090279, 0.0050434055738151073, 0.0063811778090894222, 0.0091386940330266953, 0.006878778338432312, 0.017155304551124573, 0.0048322202637791634, 0.0019046864472329617, 0.007440927904099226, 0.0083922352641820908, 0.014478256925940514, 0.013305548578500748, 0.0065533062443137169, 0.0084154047071933746, 0.0021043829619884491, 0.0098413508385419846, 0.011423252522945404, 0.0040789763443171978, 0.0079504698514938354, 0.0084075359627604485, 0.0055893934331834316, 0.0099434331059455872, 0.011491411365568638, 0.011375352740287781, 0.019021401181817055, 0.012597738765180111, 0.009192420169711113, 0.0043662316165864468, 0.0032960358075797558, 0.011886574327945709, 0.0056163826957345009, 0.011518449522554874, 0.0055940854363143444, 0.0078772436827421188, 0.0075894207693636417, 0.0034533469006419182, 0.0026649381034076214, 0.013348309323191643, 0.0094801401719450951, 0.009415370412170887, 0.0049689300358295441, 0.0045877639204263687, 0.0056649791076779366, 0.0073335329070687294, 0.009568922221660614, 0.021757861599326134, 0.0021383955609053373, 0.011319501325488091, 0.0090179461985826492, 0.0070851445198059082, 0.0099298851564526558, 0.0057514095678925514, 0.0058292998000979424, 0.0053693559020757675, 0.0040960563346743584, 0.0057173180393874645, 0.0078708715736865997, 0.0090862726792693138, 0.005299936980009079, 0.0082412930205464363, 0.0045086964964866638, 0.0060874447226524353, 0.017832953482866287, 0.09330461174249649, 0.0031631435267627239, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[96] = { 22230, 1073, 10180, -733, 6626, 6520, 13419, 6577, -1242, 19276, 8223, 2170, 8317, 59212, -296, -2231, 11373, 12715, 2084, -190, -904, 18311, 5340, 3758, 8906, 6583, 6745, 5846, 36, -63, 6891, 11251, 21454, 2319, 9405, -531, 25736, 10768, 1008, 6404, 856, 15149, 12735, 4853, 5310, 11275, 16897, 9425, 5785, 3472, 337, -693, 19951, 7063, 8704, 17556, -346, 10471, 3385, 4816, 17508, 9080, 4059, 9904, 6281, 5087, 6394, -840, 17867, 8716, 10833, -1572, -1389, 4387, 2352, 3654, 23127, 14385, 13416, -2498, 6012, -5988, -2470, 789, 9452, 6350, 8477, 6415, 14015, 4075, 9993, 4366, 16151, 25005, -9781, 16190, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00011586585605982691, 0.00030118823633529246, 0.00013094325549900532, 0.00076289311982691288, 0.00023978117678780109, 0.00014310734695754945, 0.00023246493947226554, 0.00053653167560696602, 0.00034019022132270038, 9.3502596428152174e-05, 0.00017344015941489488, 0.00038290757220238447, 0.00032553088385611773, 8.2380538515280932e-05, 0.00024599686730653048, 0.0003185983223374933, 0.00019602531392592937, 0.00018657522741705179, 0.00020558995311148465, 0.00061544147320091724, 0.00033415950019843876, 0.00013839943858329207, 0.00028532266151160002, 0.00020959539688192308, 0.00019908876856788993, 0.00032161467242985964, 0.00021154149726498872, 0.0001539067889098078, 0.00071218825178220868, 0.00034219110966660082, 0.00021121528698131442, 0.00016795327246654779, 9.2310016043484211e-05, 0.00047785195056349039, 0.00017860597290564328, 0.00049957929877564311, 9.0089466539211571e-05, 0.00024503996246494353, 0.00048386584967374802, 0.00015554201672784984, 0.00056419853353872895, 0.00012486826744861901, 0.00016812514513731003, 0.00015657019685022533, 0.00021216266031842679, 0.00029000383801758289, 0.00016587725258432329, 0.00015603229985572398, 0.00027515291003510356, 0.00025950639974325895, 0.00040265239658765495, 0.00093369756359606981, 0.00013225183647591621, 0.00022907495440449566, 0.0002668418746907264, 0.00010413767449790612, 0.00031380759901367128, 0.00016380081069655716, 0.00022394677216652781, 0.00034047893132083118, 9.6601390396244824e-05, 0.00015370729670394212, 0.0002528269833419472, 0.00027638458414003253, 0.00016595167107880116, 0.00022535945754498243, 0.00030347408028319478, 0.00036608683876693249, 0.00014924704737495631, 0.00013082147052045912, 0.00018263322999700904, 0.00030981042073108256, 0.000251632125582546, 0.00029351221746765077, 0.00018567120423540473, 0.00034434715053066611, 0.00010132662282558158, 0.00031142088118940592, 0.00012182853242848068, 0.00049982551718130708, 0.00017652733367867768, 0.00034610036527737975, 0.00016713328659534454, 0.00037501048063859344, 0.00016894332657102495, 0.00024777662474662066, 0.00018777005607262254, 0.00021577092411462218, 0.00011882666149176657, 0.00038576684892177582, 0.00013950969150755554, 0.00038431602297350764, 0.00013032948481850326, 0.00010988916619680822, 0.00029794187867082655, 0.00020128228061366826, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 46,22,117,114,59,-31,45,-35,127,-25,-57,-91,40,88,-40,-91, 
  /* [1][0][][] */ 24,73,-17,-6,72,-4,16,20,46,68,-16,127,2,-36,88,-66, 
  /* [2][0][][] */ 29,-56,-10,7,-48,22,-62,75,-65,-89,4,80,-12,-127,85,-112, 
  /* [3][0][][] */ 115,113,4,32,-127,-22,-64,-21,-7,-2,96,-75,-58,85,-42,-38, 
  /* [4][0][][] */ 8,-2,6,-3,-18,5,-20,21,-54,-37,-4,-17,-12,-127,16,6, 
  /* [5][0][][] */ 127,-42,-25,-4,-4,-120,-37,1,-10,13,-107,11,3,-11,-3,28, 
  /* [6][0][][] */ -127,-72,-7,95,-39,15,-22,54,-124,-74,-47,-37,32,53,10,76, 
  /* [7][0][][] */ -20,26,-80,58,44,-127,-31,55,20,-31,14,1,-14,8,-26,23, 
  /* [8][0][][] */ 39,-53,-15,-10,5,28,-37,-59,-8,14,-80,12,-127,6,4,27, 
  /* [9][0][][] */ 31,-48,62,127,-21,18,13,-47,116,-86,-5,-16,1,60,-59,13, 
  /* [10][0][][] */ -84,-69,16,-35,127,46,27,69,112,-83,-81,31,86,-56,-118,29, 
  /* [11][0][][] */ 34,-1,-127,3,46,11,-10,30,-20,-37,-2,-10,6,21,-31,0, 
  /* [12][0][][] */ 95,-45,6,-13,-35,-75,-33,-51,17,8,-127,-10,-50,-19,9,68, 
  /* [13][0][][] */ 64,-111,53,-98,87,0,-127,-102,27,-116,7,34,33,14,37,58, 
  /* [14][0][][] */ -52,23,-78,-68,72,-127,54,-56,29,25,-6,-76,-7,105,4,28, 
  /* [15][0][][] */ 20,-5,72,40,54,-31,-34,2,12,-47,-61,-3,-127,-39,-22,44, 
  /* [16][0][][] */ -127,49,-22,28,3,77,29,50,-7,37,76,3,22,-8,2,-55, 
  /* [17][0][][] */ -13,-17,-44,-44,-34,1,26,64,-25,127,-23,4,-17,86,72,3, 
  /* [18][0][][] */ -11,127,-70,11,-4,31,54,-41,11,104,-41,107,2,-53,33,-102, 
  /* [19][0][][] */ 10,-14,40,6,1,31,-11,18,8,-7,-51,3,-127,20,2,36, 
  /* [20][0][][] */ 93,-64,-9,-67,-31,34,57,-78,-50,39,-127,-46,38,9,62,9, 
  /* [21][0][][] */ 49,-5,127,65,-14,69,40,-5,1,39,-11,-10,-23,74,-7,1, 
  /* [22][0][][] */ 34,11,37,12,-10,9,20,127,22,-28,-9,34,-1,40,12,11, 
  /* [23][0][][] */ -40,16,-115,20,29,-127,2,42,-6,-33,-1,-22,-71,-1,-12,55, 
  /* [24][0][][] */ 41,-50,-3,-63,40,-14,-14,-10,21,8,56,81,-38,63,127,42, 
  /* [25][0][][] */ -127,-110,-45,6,5,-6,23,-22,-59,22,-120,3,47,74,67,63, 
  /* [26][0][][] */ 5,6,40,8,-16,32,-34,62,-71,-64,15,21,2,-127,36,-11, 
  /* [27][0][][] */ -106,38,-56,34,31,-17,-5,26,43,-25,127,11,-25,11,-23,-16, 
  /* [28][0][][] */ -19,-12,23,27,0,-8,10,55,18,13,-14,-12,-127,-11,-4,34, 
  /* [29][0][][] */ -16,70,73,-37,56,-10,34,-20,-127,47,-36,22,4,55,-102,9, 
  /* [30][0][][] */ -6,-4,-127,-31,25,-42,-10,21,-17,-10,1,-27,-38,-30,-9,11, 
  /* [31][0][][] */ 111,-16,-127,2,44,2,-52,48,-20,-19,-68,-39,10,-13,-79,26, 
  /* [32][0][][] */ -122,59,21,58,7,91,15,38,19,12,127,-1,-30,7,-33,-44, 
  /* [33][0][][] */ 4,-7,127,-20,-68,29,6,-31,-12,3,-11,17,-3,16,35,17, 
  /* [34][0][][] */ -9,-12,-22,-126,26,-18,9,-25,-37,-53,-33,-127,-32,-2,58,28, 
  /* [35][0][][] */ 0,-24,46,38,41,-21,19,-17,-122,38,-8,19,-22,127,-36,-31, 
  /* [36][0][][] */ -126,67,-30,-2,-21,28,56,97,-12,42,127,12,-16,23,30,-43, 
  /* [37][0][][] */ -28,16,127,-18,-69,-61,23,-22,24,3,-10,6,-13,-85,71,18, 
  /* [38][0][][] */ 17,-28,0,20,22,-63,-67,7,-34,-27,67,-36,127,13,9,-2, 
  /* [39][0][][] */ -51,-34,8,-85,-57,-110,35,127,-48,-42,17,-30,-11,48,63,102, 
  /* [40][0][][] */ 64,-4,6,-9,-25,58,-7,10,10,-6,0,8,127,16,-8,-11, 
  /* [41][0][][] */ 2,-21,-49,-127,26,-12,-22,-67,-10,-41,5,-19,-15,-19,-8,44, 
  /* [42][0][][] */ 32,48,12,99,-103,-10,-125,-33,-56,-74,70,-92,-58,127,-51,9, 
  /* [43][0][][] */ 14,111,-22,127,22,13,46,-70,-31,78,-13,24,24,-36,46,29, 
  /* [44][0][][] */ 0,-24,-127,16,42,73,-45,62,-24,-31,49,-33,20,-45,-50,19, 
  /* [45][0][][] */ 14,5,14,-127,-26,-9,63,-7,-22,20,-32,-1,10,-74,21,-25, 
  /* [46][0][][] */ 8,46,72,-4,8,27,-61,61,14,-62,-38,24,22,127,54,-36, 
  /* [47][0][][] */ 22,-22,24,-49,-38,7,-73,56,-8,-47,10,46,3,-127,58,13, 
  /* [48][0][][] */ 3,-3,15,-127,-11,-32,-5,-6,5,-25,12,-15,0,38,-3,46, 
  /* [49][0][][] */ 36,-32,-4,109,87,17,7,47,-65,16,33,49,-6,32,127,-10, 
  /* [50][0][][] */ -20,12,124,-37,3,127,-29,-51,40,-33,91,50,97,18,-22,-63, 
  /* [51][0][][] */ 22,39,26,-1,19,-5,-40,16,30,-12,6,127,-1,39,36,-45, 
  /* [52][0][][] */ -23,64,127,-1,11,-39,4,-49,-34,4,19,32,-13,92,-115,-15, 
  /* [53][0][][] */ -4,-6,-30,-127,-41,7,17,-32,-22,25,2,3,16,-6,42,11, 
  /* [54][0][][] */ 11,25,-21,-42,37,21,-20,21,47,-22,-6,-21,-14,127,10,21, 
  /* [55][0][][] */ 15,-23,-58,2,-3,-74,-7,-127,7,-120,-29,4,-7,-102,-51,-3, 
  /* [56][0][][] */ 56,53,44,47,10,-35,9,127,19,-37,4,-34,90,-3,-57,38, 
  /* [57][0][][] */ 87,-16,127,-4,-59,-58,3,-22,38,14,-93,40,64,-37,64,19, 
  /* [58][0][][] */ 87,114,13,96,-112,-18,-31,3,-5,-17,127,-10,-103,-57,-28,-101, 
  /* [59][0][][] */ 123,-24,-13,-14,-13,-9,-17,6,-38,6,-127,-16,9,-21,5,31, 
  /* [60][0][][] */ -127,36,-30,-5,33,35,13,27,6,-2,113,-3,-56,0,20,-16, 
  /* [61][0][][] */ -103,87,-2,21,1,-20,-79,-58,125,-79,127,-17,56,-57,-115,-70, 
  /* [62][0][][] */ 2,-26,-127,82,55,100,6,108,-7,-61,31,-2,-90,-49,-127,-16, 
  /* [63][0][][] */ -47,-1,127,-47,-48,-53,21,-43,-3,4,18,1,-11,-61,66,24, 
  /* [64][0][][] */ 28,45,-17,37,85,13,98,-127,0,122,13,-37,4,-125,-26,39, 
  /* [65][0][][] */ 2,27,20,-18,57,-4,7,-127,-21,-66,-27,-52,-16,-32,59,13, 
  /* [66][0][][] */ -127,19,-19,14,-50,15,16,-37,-70,-27,-83,37,58,15,46,62, 
  /* [67][0][][] */ 0,-54,12,127,13,-14,-36,30,55,10,15,-10,-5,-41,-99,-26, 
  /* [68][0][][] */ 12,-26,5,127,-45,-32,1,-26,-31,40,28,-24,-28,-42,-28,-51, 
  /* [69][0][][] */ 69,88,-1,127,39,6,79,-123,22,113,31,60,0,-59,34,-26, 
  /* [70][0][][] */ -5,-50,-20,-85,127,0,81,26,102,15,103,-62,4,123,49,106, 
  /* [71][0][][] */ 13,42,12,90,56,-127,-37,98,34,-86,25,27,21,-46,-57,35, 
  /* [72][0][][] */ -127,-76,-8,40,19,21,-32,13,-44,-41,-93,37,45,28,11,107, 
  /* [73][0][][] */ -20,-27,-26,71,21,-5,4,-5,65,31,2,3,30,127,-80,-43, 
  /* [74][0][][] */ 75,-37,18,-34,-20,-7,32,3,-60,-22,-98,44,-127,-15,31,50, 
  /* [75][0][][] */ -23,-20,-33,127,-45,14,8,-4,-67,21,-12,-20,0,-46,-6,-26, 
  /* [76][0][][] */ -8,4,-25,57,34,27,-10,-127,19,-124,-4,23,-18,-20,21,-53, 
  /* [77][0][][] */ 127,-51,6,60,-45,8,-21,5,25,7,-46,55,44,1,-53,41, 
  /* [78][0][][] */ -20,10,60,-8,7,12,-47,57,34,-26,-19,-30,8,127,41,-44, 
  /* [79][0][][] */ -6,36,43,11,36,49,-44,-40,13,-61,68,-15,127,-10,-19,-33, 
  /* [80][0][][] */ -127,-66,-82,81,9,37,40,-40,-69,29,-65,12,42,-79,-20,40, 
  /* [81][0][][] */ 45,-2,-51,55,127,78,-30,-37,9,-67,-21,-68,-31,7,-103,5, 
  /* [82][0][][] */ 86,127,-21,32,-108,-10,-53,-20,-71,-2,115,-47,-53,80,-6,-29, 
  /* [83][0][][] */ 127,53,18,-29,3,-18,-8,31,41,19,84,-39,-62,-27,-27,-82, 
  /* [84][0][][] */ -20,-56,-70,-22,57,45,-7,-127,-37,-57,14,36,-43,-31,-12,-37, 
  /* [85][0][][] */ -12,-11,-41,-65,-7,-11,66,127,-14,104,-15,-35,28,87,67,-31, 
  /* [86][0][][] */ 106,-32,20,-13,-10,-26,-9,-4,-6,-6,-127,9,4,22,-1,44, 
  /* [87][0][][] */ -36,36,16,-36,-5,79,-36,36,5,-42,29,13,11,-127,23,-4, 
  /* [88][0][][] */ 2,-24,-101,-78,42,-26,0,-127,-27,-26,-14,-14,-31,-20,43,5, 
  /* [89][0][][] */ 4,3,51,-127,17,-1,-22,70,46,-47,28,32,-27,89,26,39, 
  /* [90][0][][] */ -8,8,-70,49,50,-14,110,-94,78,127,-33,47,18,-10,8,-19, 
  /* [91][0][][] */ 55,-22,-52,2,-5,-127,-10,5,-2,-12,-54,1,37,-11,8,22, 
  /* [92][0][][] */ 6,0,127,53,37,22,5,22,-20,14,-41,33,20,100,-6,-12, 
  /* [93][0][][] */ 127,-40,-28,-23,-8,-48,8,41,-18,9,-113,14,1,30,6,41, 
  /* [94][0][][] */ 25,-11,56,54,83,-27,-13,60,5,-20,-7,47,-3,127,-3,-50, 
  /* [95][0][][] */ -118,40,45,24,24,41,13,-3,15,-1,127,-3,-17,30,-20,-22, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0004289258795324713, 0.0011149741476401687, 0.00048474117647856474, 0.0028241677209734917, 0.00088765023974701762, 0.00052977167069911957, 0.00086056609870865941, 0.0019861962646245956, 0.0012593562714755535, 0.00034613892785273492, 0.00064206123352050781, 0.0014174923999235034, 0.0012050885707139969, 0.00030496600084006786, 0.00091066025197505951, 0.0011794248130172491, 0.00072566961171105504, 0.00069068616721779108, 0.00076107715722173452, 0.0022783137392252684, 0.0012370310723781586, 0.00051234336569905281, 0.0010562411043792963, 0.00077590497676283121, 0.00073701026849448681, 0.001190591137856245, 0.00078310928074643016, 0.00056975032202899456, 0.0026364624500274658, 0.0012667634291574359, 0.00078190164640545845, 0.00062174920458346605, 0.00034172410960309207, 0.0017689686501398683, 0.00066118466202169657, 0.0018494016258046031, 0.00033350382000207901, 0.0009071177919395268, 0.0017912316834554076, 0.00057580380234867334, 0.0020886166021227837, 0.00046225209371186793, 0.00062238547252491117, 0.00057961000129580498, 0.00078540877439081669, 0.0010735704563558102, 0.00061406398890540004, 0.00057761877542361617, 0.001018593437038362, 0.00096067134290933609, 0.001490586088038981, 0.0034564717207103968, 0.00048958545085042715, 0.00084801670163869858, 0.00098782673012465239, 0.00038550913450308144, 0.001161689986474812, 0.00060637714341282845, 0.00082903256407007575, 0.0012604250805452466, 0.00035761040635406971, 0.00056901178322732449, 0.00093594472855329514, 0.0010231530759483576, 0.00061433948576450348, 0.00083426223136484623, 0.0011234361445531249, 0.0013552234740927815, 0.00055250030709430575, 0.00048429032904095948, 0.00067609321558848023, 0.0011468927841633558, 0.00093152147019281983, 0.0010865580989047885, 0.00068733957596123219, 0.0012747448636218905, 0.00037510282709263265, 0.001152854529209435, 0.00045099921408109367, 0.0018503130413591862, 0.000653489725664258, 0.001281235134229064, 0.00061871373327448964, 0.0013882580678910017, 0.00062541430816054344, 0.00091724877711385489, 0.00069510930916294456, 0.00079876626841723919, 0.00043988655670545995, 0.0014280772302299738, 0.00051645340863615274, 0.0014227064093574882, 0.000482469069538638, 0.00040680068195797503, 0.0011029563611373305, 0.00074513047002255917, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[16] = { -37756, 8897, 2153, -10860, -1895, -7194, -10737, -39928, 2623, 22736, 37120, -10418, -4323, -22230, 39712, -36337, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00069987610913813114, 0.00084924820112064481, 0.0010284386808052659, 0.00095558370230719447, 0.00091607728973031044, 0.0010269379708915949, 0.00094028277089819312, 0.00062035571318119764, 0.00052715546917170286, 0.00061223679222166538, 0.00089127151295542717, 0.00069454871118068695, 0.00097749033011496067, 0.0013751816004514694, 0.00057133554946631193, 0.00059470313135534525, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ -14,-14,-28,14,30,-2,6,103,-57,20,44,-11,23,-16,-19,12,10,-7,2,-6,70,-9,31,127,-9,85,-18,-9,29,-27,31,-27,-21,62,14,-45,12,53,24,-20,-111,-26,16,44,32,26,-122,-60, 
  /* [1][0][][] */ -39,-15,12,10,-37,12,3,53,-57,-31,10,-52,-21,-17,2,-2,-25,121,-13,20,2,7,-30,-24,25,-47,20,25,-27,-88,-37,11,-21,-11,30,-5,-9,-37,0,16,-27,-33,127,15,9,4,27,-7, 
  /* [2][0][][] */ -23,-8,-9,-31,-3,-70,12,-21,4,9,12,27,16,13,-15,11,2,-20,-21,-8,-5,-1,-5,-127,-15,83,-14,5,-2,-22,-2,-3,-8,54,9,-1,23,10,25,-1,-35,-1,-17,-9,-6,-10,14,10, 
  /* [3][0][][] */ -9,37,4,-32,-4,3,0,-3,-19,0,2,44,-127,7,-7,-2,3,8,-17,-5,-29,10,8,18,-8,-15,2,27,-5,25,8,17,5,1,15,19,-13,26,45,5,10,10,23,-33,10,-6,7,17, 
  /* [4][0][][] */ 32,-31,15,10,24,30,18,-20,-25,8,-11,-13,-1,15,-2,14,23,-6,-75,1,1,9,13,71,-2,-23,2,52,6,-75,18,7,12,-36,30,-127,13,30,1,17,-21,19,7,-27,-11,-22,10,-1, 
  /* [5][0][][] */ 35,2,-25,62,6,-5,3,24,2,-1,42,10,4,53,1,-2,-27,26,34,4,15,12,4,-24,7,-56,1,-20,2,-7,2,2,70,-127,3,32,-18,-11,15,6,-92,58,24,-3,-4,-5,-99,-14, 
  /* [6][0][][] */ 24,0,3,4,-22,-4,6,-12,-2,3,-4,2,-21,8,5,7,2,-17,127,10,-2,9,17,-38,2,2,32,-13,-12,1,-5,7,1,-13,33,-40,-1,-40,72,11,-1,-7,-7,9,-10,7,6,-7, 
  /* [7][0][][] */ -43,-16,-19,27,-9,87,-14,45,-5,38,-5,127,82,1,-13,-3,0,-28,-19,-23,-38,-7,-20,69,1,-48,-58,-33,-20,-23,-16,-23,4,1,-25,4,11,-63,103,0,19,30,-67,-60,23,-13,0,1, 
  /* [8][0][][] */ -48,-46,-1,0,-4,4,1,31,-2,-60,7,39,44,8,0,4,-15,55,-34,3,-48,23,-13,-16,-1,2,6,48,-9,109,-10,21,-5,3,-17,-127,-104,62,33,26,16,-1,102,-20,12,23,16,31, 
  /* [9][0][][] */ -22,5,-9,32,23,-34,-7,-3,56,-34,6,62,-51,5,11,0,-7,24,-34,-27,56,5,-12,-11,5,4,51,-25,18,22,19,8,0,18,76,-107,-12,-127,-98,9,-26,34,49,11,12,14,-22,-48, 
  /* [10][0][][] */ -13,-4,-31,-127,40,81,3,-14,-2,31,14,4,48,-48,-29,26,34,-43,48,-32,20,-26,33,51,-50,-111,10,-36,45,33,47,-46,-29,-80,25,-4,15,-38,0,-30,-33,-66,-13,15,18,15,15,-28, 
  /* [11][0][][] */ -6,48,-16,65,40,-58,-83,-24,6,64,-6,5,-11,54,-1,-79,17,48,8,-10,-52,-94,14,-6,18,-57,3,-16,56,-41,38,-96,53,-19,-41,-83,92,26,8,-127,-9,76,106,-62,-9,-56,43,14, 
  /* [12][0][][] */ 120,-4,-12,13,1,20,0,105,13,-7,-56,-22,2,14,-13,-8,-7,11,-1,-4,5,-2,-2,20,1,18,2,5,-3,15,-3,13,7,-65,-11,8,-17,-16,-24,1,-13,-76,6,-127,-54,-6,73,-10, 
  /* [13][0][][] */ 7,3,3,6,3,-10,1,0,2,3,4,22,-5,4,5,1,8,2,11,5,12,-11,7,-6,1,2,16,127,11,-7,7,-2,2,1,-39,24,10,-7,5,-14,-16,-3,2,3,-1,-6,-8,-11, 
  /* [14][0][][] */ 64,-24,48,-65,43,22,49,-96,-54,-70,-15,119,-73,-11,74,22,52,19,-59,81,8,18,70,-11,21,65,-39,-127,30,-40,54,51,-4,71,-124,-46,-35,50,89,7,-25,1,56,3,-16,4,9,-21, 
  /* [15][0][][] */ -2,-60,-74,-38,61,17,90,-55,-15,14,-25,-43,85,18,-95,71,63,46,79,-77,-110,-28,63,-16,-100,49,29,53,50,40,36,-47,19,69,95,127,-21,-106,-15,-39,95,50,110,-47,-6,-29,-17,69, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.029744734987616539, 0.036093048751354218, 0.043708641082048416, 0.040612306445837021, 0.03893328458070755, 0.043644864112138748, 0.039962016046047211, 0.026365118101239204, 0.022404106333851814, 0.02602006308734417, 0.037879038602113724, 0.029518319293856621, 0.041543338447809219, 0.058445218950510025, 0.024281760677695274, 0.025274882093071938, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 1681, 43514, -803, 34416, 3784, 130648, -2596, 46446, 3299, 31515, 27088, -603, -1274, 31515, -799, -2344, -729, -567, -90, -2309, -992, -3034, -721, -19534, -4740, 39115, 122297, 105748, 3175, 4788, -1887, 225, 27029, -435, 47418, 2186, 61485, 1771, 46409, 3010, 295, 54282, -649, 1442, 51189, -483, 2758, 52104, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.0391073424834758e-05, 3.7500154576264322e-05, 0.00018556667782831937, 6.1657163314521313e-05, 0.00013757859414909035, 6.2065271777100861e-05, 0.0001432379795005545, 0.00012723238614853472, 7.4427080107852817e-05, 4.3809377530124038e-05, 5.3110681619727984e-05, 0.00010782930621644482, 4.1937906644307077e-05, 3.4417571441736072e-05, 0.00015641712525393814, 0.00017422356177121401, 0.00015644713130313903, 7.2193528467323631e-05, 0.00014947254385333508, 0.0001576370996190235, 9.2957205197308213e-05, 0.00015199821791611612, 9.6104195108637214e-05, 0.00012690149014815688, 0.00010407625086372718, 0.00011673404515022412, 1.9784494725172408e-05, 6.5047752286773175e-05, 0.0001246564497705549, 9.6015603048726916e-05, 0.00010795466369017959, 0.00013861001934856176, 4.672710201703012e-05, 0.0001445756497560069, 2.6356456146459095e-05, 5.3116204071557149e-05, 9.4635906862094998e-05, 8.772796718403697e-05, 0.00012797994713764638, 9.2865833721589297e-05, 0.00011337138857925311, 0.00010968686547130346, 8.5077241237740964e-05, 9.6085990662686527e-05, 3.2864663808140904e-05, 0.00017473426123615354, 9.5216077170334756e-05, 3.2427295082015917e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 70,-90,96,69,54,-34,107,-62,60,-86,-80,48,53,-41,-72,-90,102,79,50,79,67,-73,-83,50,-32,-40,-64,-63,-67,63,-64,-115,-14,41,69,65,-65,53,-50,-23,50,-74,56,62,-92,11,75,-34, 81,-95,127,84,-77,-69,-57,-82,97,-100,-64,74,79,-111,-96,92,-37,97,82,127,85,-114,53,70,-53,-77,-69,-78,55,80,-30,-127,-88,80,82,84,-82,82,-84,-16,77,-94,81,89,-72,-127,92,-104, 35,-44,69,37,18,-41,-48,-38,41,-30,5,34,29,-76,-54,0,-54,38,34,71,35,-55,34,27,-27,-46,-44,-23,31,32,88,-90,-88,44,35,34,-30,37,-38,-11,40,-42,34,43,-8,-9,38,-76, 
  /* [0][1][][] */ 91,-110,-42,93,56,-83,127,-88,87,-114,-71,82,84,-111,-13,-127,127,108,74,-38,85,108,-127,72,74,-76,-93,-100,-127,88,-69,-10,-90,69,106,96,-86,79,-83,89,85,-102,88,90,-87,107,94,-95, 127,-127,-66,127,-127,-127,-90,-127,127,-127,-127,127,127,-127,-21,97,-66,127,127,-52,127,127,70,127,127,-127,-127,-127,54,127,-29,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 62,-75,-35,65,38,-62,-49,-63,57,-44,-59,60,49,-56,-16,11,-63,53,58,-29,58,64,53,65,66,-65,-62,-45,36,55,127,14,-62,68,47,48,-48,58,-60,56,60,-59,53,62,-63,-67,60,-58, 
  /* [0][2][][] */ 46,-49,-47,49,27,-54,64,-41,40,-73,-5,40,56,-72,81,-79,73,49,35,-32,24,-11,-77,29,-24,-46,-47,-50,-74,32,-40,91,-76,37,49,42,-27,38,-44,-87,47,-51,41,45,-22,16,40,-75, 71,-74,-49,80,-56,-65,-72,-66,50,-76,-67,60,74,-48,127,33,-45,58,62,-45,54,-19,42,67,-48,-67,-76,-62,32,60,-24,119,-54,65,58,57,-50,62,-66,-107,70,-67,60,61,-86,50,64,-54, 41,-39,-28,45,29,-21,-18,-34,15,-26,-51,29,32,4,67,24,-34,23,28,-32,29,-1,41,41,-24,-29,-46,-24,34,34,61,68,2,33,16,21,-22,29,-30,-56,28,-31,26,29,-64,9,32,-4, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0034166204277426004, 0.0015937564894556999, 0.0078865839168429375, 0.002620429266244173, 0.0058470899239182472, 0.0026377739850431681, 0.0060876142233610153, 0.0054073762148618698, 0.0031631509773433208, 0.0018618985777720809, 0.0022572039160877466, 0.0045827454887330532, 0.001782360952347517, 0.0014627467608079314, 0.0066477274522185326, 0.0074045010842382908, 0.0066490028984844685, 0.0030682249926030636, 0.0063525829464197159, 0.0066995765082538128, 0.0039506810717284679, 0.0064599243924021721, 0.0040844283066689968, 0.0053933132439851761, 0.004423240665346384, 0.0049611967988312244, 0.00084084097761660814, 0.0027645293157547712, 0.005297898780554533, 0.0040806629694998264, 0.0045880731195211411, 0.0058909254148602486, 0.0019859017338603735, 0.006144464947283268, 0.0011201493907719851, 0.0022574386093765497, 0.0040220259688794613, 0.0037284386344254017, 0.0054391478188335896, 0.0039467979222536087, 0.0048182839527726173, 0.0046616918407380581, 0.0036157825961709023, 0.0040836543776094913, 0.0013967482373118401, 0.0074262060225009918, 0.0040466831997036934, 0.0013781600864604115, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 648, 865, 2155, 501, 9373, 13488, 2311, -117, -856, -514, 1103, 1067, 3575, 1106, 25030, 2879, 1976, -1189, -384, 3158, -1562, 11142, 10085, 9658, 5916, 230, 4634, 4569, 9301, -582, 10780, 6129, 572, -145, 4897, 4014, -2087, 346, -722, 5391, 999, -574, -977, 67, 985, 3622, 704, 936, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00037779298145323992, 0.00083032489055767655, 0.00026802805950865149, 0.00027091140509583056, 0.00023319263709709048, 0.00030237348983064294, 0.00048109842464327812, 0.00021459154959302396, 0.00033421479747630656, 0.00085720990318804979, 0.00094577344134449959, 0.00029154552612453699, 0.00036548357456922531, 0.00069689552765339613, 0.00014347543765325099, 0.00043540605111047626, 0.00026733969571068883, 0.00034493909333832562, 0.00021206769451964647, 0.00029934063786640763, 0.00037658654036931694, 0.00023227528436109424, 0.00036553738755173981, 0.00016113999299705029, 0.00027167101507075131, 0.00031692121410742402, 0.0014932696940377355, 0.00040680059464648366, 0.00018839968834072351, 0.00042499997653067112, 0.00024286354891955853, 0.00019696335948538035, 0.00072548049502074718, 0.00026444255490787327, 0.00076004571747034788, 0.00045224642963148654, 0.00066953990608453751, 0.00032840928179211915, 0.0002202513423981145, 0.00034490894176997244, 0.00016446648805867881, 0.00025629764422774315, 0.00032379719777964056, 0.00027481545112095773, 0.0019843494519591331, 0.00038308606599457562, 0.0003345125587657094, 0.0012604756047949195, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,1,71,-41,45,28,-34, 
  /* [1][0][][] */ 17,76,60,10,6,-48,100,127, 
  /* [2][0][][] */ -52,7,5,-5,-127,-23,15,-4, 
  /* [3][0][][] */ 114,-3,-21,-120,-127,14,44,-14, 
  /* [4][0][][] */ -127,48,-5,-14,61,-7,47,12, 
  /* [5][0][][] */ -87,-22,9,-8,-127,1,7,84, 
  /* [6][0][][] */ -3,-127,21,-31,4,1,6,32, 
  /* [7][0][][] */ -70,-13,-3,97,127,-33,-42,14, 
  /* [8][0][][] */ 82,-1,9,-127,-8,-16,-56,-45, 
  /* [9][0][][] */ 1,-127,12,-11,-9,86,-43,71, 
  /* [10][0][][] */ -93,-12,7,26,-127,78,58,-24, 
  /* [11][0][][] */ 105,8,33,4,-59,-43,-36,-127, 
  /* [12][0][][] */ -7,16,41,-11,11,-89,127,73, 
  /* [13][0][][] */ 60,-31,-7,-13,121,127,125,-45, 
  /* [14][0][][] */ 127,53,-18,20,-100,-25,-31,-10, 
  /* [15][0][][] */ -7,-127,10,-6,3,-3,6,35, 
  /* [16][0][][] */ -44,-6,-2,-3,-127,0,24,6, 
  /* [17][0][][] */ -24,109,-110,-2,19,-127,109,-95, 
  /* [18][0][][] */ 127,-41,-49,6,-61,28,7,119, 
  /* [19][0][][] */ 127,-35,-5,-13,52,3,28,-5, 
  /* [20][0][][] */ 127,26,-19,124,7,32,14,-42, 
  /* [21][0][][] */ 10,25,-57,10,-22,94,-127,-83, 
  /* [22][0][][] */ -127,33,34,2,-37,-8,-56,-31, 
  /* [23][0][][] */ -40,-55,4,33,-127,62,84,-19, 
  /* [24][0][][] */ 127,-7,-10,-2,-94,-16,10,9, 
  /* [25][0][][] */ 26,-15,-1,-21,127,48,51,-34, 
  /* [26][0][][] */ 3,-111,-1,-36,9,-127,86,-50, 
  /* [27][0][][] */ -20,-127,32,-15,-4,-54,34,-11, 
  /* [28][0][][] */ -110,44,-19,17,-16,-23,127,97, 
  /* [29][0][][] */ -19,42,23,5,-7,42,-104,-127, 
  /* [30][0][][] */ 127,-37,-2,15,-95,-1,-49,-31, 
  /* [31][0][][] */ -14,-32,67,-10,15,-127,123,81, 
  /* [32][0][][] */ -85,35,16,1,-127,-103,-101,42, 
  /* [33][0][][] */ -29,15,3,20,-127,-62,-46,18, 
  /* [34][0][][] */ 16,-127,63,0,-6,103,-80,66, 
  /* [35][0][][] */ -26,-51,-127,-9,-4,-75,45,-51, 
  /* [36][0][][] */ 5,127,69,7,-13,19,-24,-44, 
  /* [37][0][][] */ -127,37,34,-15,63,-38,-7,-109, 
  /* [38][0][][] */ -127,-9,-47,-10,42,18,42,115, 
  /* [39][0][][] */ -9,-39,78,0,7,-91,127,101, 
  /* [40][0][][] */ -41,-17,-2,-37,-127,111,112,-35, 
  /* [41][0][][] */ -127,39,15,-77,-92,-98,-100,48, 
  /* [42][0][][] */ -40,-127,-98,-5,1,66,-117,-79, 
  /* [43][0][][] */ -68,9,-13,-127,95,57,57,7, 
  /* [44][0][][] */ 127,-3,20,-72,28,-37,-19,42, 
  /* [45][0][][] */ -19,-127,2,-7,-12,-78,77,1, 
  /* [46][0][][] */ 105,-9,-4,-30,127,-31,-37,4, 
  /* [47][0][][] */ 127,-3,-7,92,-11,15,19,-39, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00070920574944466352, 0.0015587139641866088, 0.00050315132830291986, 0.0005085640586912632, 0.00043775711674243212, 0.000567625742405653, 0.00090313423424959183, 0.00040283851558342576, 0.00062739930581301451, 0.001609183382242918, 0.001775437849573791, 0.00054729910334572196, 0.00068609812296926975, 0.0013082358054816723, 0.00026933694607578218, 0.00081735895946621895, 0.00050185911823064089, 0.00064753135666251183, 0.00039810064481571317, 0.00056193239288404584, 0.00070694100577384233, 0.00043603501399047673, 0.00068619917146861553, 0.00030249744304455817, 0.00050999002996832132, 0.00059493520529940724, 0.0028032164555042982, 0.00076365983113646507, 0.00035367027157917619, 0.00079782435204833746, 0.00045591167872771621, 0.00036974626709707081, 0.0013618965167552233, 0.00049642048543319106, 0.0014267835067585111, 0.00084897229680791497, 0.0012568829115480185, 0.00061650102725252509, 0.00041346327634528279, 0.00064747472060844302, 0.00030874204821884632, 0.00048113058437593281, 0.00060784304514527321, 0.00051589286886155605, 0.0037250877358019352, 0.00071914214640855789, 0.00062795827398076653, 0.0023662075400352478, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { -40045, 28857, -12856, -13879, 19494, -6987, 31968, 46183, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00047932929010130465, 0.00068274897057563066, 0.0016139367362484336, 0.0015726163983345032, 0.00071311363717541099, 0.00061898957937955856, 0.00064526003552600741, 0.0010469423141330481, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -47,-15,-35,13,3,-19,-3,3,-100,127,-54,100,114,7,73,-14,-2,-37,11,-4,-10,1,-18,-27,22,-75,13,59,-13,9,10,-31,-2,-64,107,7,3,-10,8,-5,100,-10,49,-21,-34,16,-18,-12, 
  /* [1][0][][] */ 0,35,126,1,-4,-24,8,-77,29,-1,29,7,-21,5,-12,-127,10,-64,5,8,-32,28,31,-37,-23,-3,22,2,16,-7,11,-12,-4,8,17,6,-23,-36,68,-59,10,41,-14,29,-18,2,27,1, 
  /* [2][0][][] */ 5,-49,20,-44,28,27,-9,-31,4,0,-4,16,-11,53,6,1,-44,127,-24,-32,-18,22,-44,-8,115,0,-3,-7,-31,-4,5,-40,-8,-14,-3,15,-9,1,-17,6,15,-20,-17,1,2,27,-30,-42, 
  /* [3][0][][] */ -3,-81,0,6,8,-2,-6,3,-8,-10,13,19,7,-11,46,4,-8,-23,3,23,-8,18,-22,0,5,60,-6,5,-1,4,127,0,10,5,0,-4,-27,-13,-8,12,-7,6,-7,30,-5,0,4,33, 
  /* [4][0][][] */ -101,5,-1,0,-9,-36,1,13,48,-46,7,-23,-28,-7,-12,-8,2,2,5,25,16,-27,13,16,-13,48,7,119,-4,-6,-8,-23,-3,-127,-39,12,12,-9,11,8,-57,-9,-7,13,-61,8,0,3, 
  /* [5][0][][] */ -25,22,17,8,-48,9,-2,46,20,14,7,16,-2,-37,23,37,1,-90,18,-1,35,-39,8,45,17,-2,-90,-46,-49,-24,27,-2,2,-65,4,-63,74,14,-48,13,17,-42,15,10,127,-18,-45,-13, 
  /* [6][0][][] */ -34,-26,-9,1,38,-33,-1,-35,-4,-6,36,-22,-16,46,13,-58,-4,7,-5,-33,-31,58,-3,-87,5,-19,-59,-70,17,50,-13,12,7,-57,-16,74,-71,-49,11,-58,-7,15,22,43,127,-31,40,9, 
  /* [7][0][][] */ 16,36,-75,27,-23,18,4,63,-10,-3,65,-32,9,-33,-16,-7,-18,-127,42,-44,58,38,11,-57,19,-20,26,-4,-20,29,-12,1,-3,34,1,-32,-14,-55,-43,-71,-12,-28,39,61,-32,-20,-4,1, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.020371494814753532, 0.029016830027103424, 0.068592309951782227, 0.066836193203926086, 0.030307328328490257, 0.026307055726647377, 0.027423551306128502, 0.044495049864053726, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { -52518, -173, 8593, -345, 5737, -5596, 1935, 27867, 1268, 35776, -2126, 28615, -6832, -1351, 25822, 10896, 625, 17760, 37944, 11288, -132, -575, 614, 16232, -8363, 29533, 45183, 36065, 3987, 2029, -1578, 1197, 1689, 19608, -6940, 14804, -11437, 17264, -21923, 133597, 29969, 20934, 13357, -1821, 15799, 3502, 1524, 286, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00031276323716156185, 0.0002573295496404171, 0.00018337638175580651, 0.00020521199621725827, 0.00010848746751435101, 9.4733368314336985e-05, 0.00058408058248460293, 0.00012345841969363391, 0.00013125869736541063, 0.00013569602742791176, 7.1630194725003093e-05, 0.00015074163093231618, 0.00026250461814925075, 0.00015722771058790386, 9.716513886814937e-05, 0.00014713082055095583, 0.00022457785962615162, 0.00022273461217992008, 6.0955448134336621e-05, 0.00015901423466857523, 0.00019723817240446806, 0.00015451874060090631, 0.00014990865020081401, 0.00012841496209148318, 0.00015708526188973337, 0.00012277803034521639, 0.00060986960306763649, 9.355306247016415e-05, 0.00017614853277336806, 0.00042545245378278196, 0.00010946327529381961, 0.00016027927631512284, 0.00055832770885899663, 0.00014577664842363447, 0.0001826084335334599, 0.00017117631796281785, 0.00032861749059520662, 0.0001449512637918815, 0.0002753022126853466, 1.9601407984737307e-05, 0.00010653500794433057, 5.453840276459232e-05, 0.00012396482634358108, 0.00012217392213642597, 0.00014768115943297744, 9.9734621471725404e-05, 0.00026213278761133552, 8.7848689872771502e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 5,-3,20,110,4,82,0,28,16,8,9,8,-8,-8,-43,8,-1,8,-23,-114,-6,-22,127,-9,-3,6,-5,9,-5,4,15,99,20,28,38,-28,1,34,-2,1,18,-67,-8,-8,16,2,-7,-10, 127,9,15,-127,28,88,11,11,126,127,7,43,-52,-24,6,7,127,-55,-58,-55,-100,25,-109,14,17,69,-31,-83,22,20,9,-125,4,-61,127,10,-39,-47,-4,114,-79,-97,-30,3,-35,-8,-127,23, -32,-3,8,15,-1,65,4,18,28,9,-14,32,-14,-3,17,3,-102,29,-3,78,-31,-11,-17,-6,-4,-60,-3,29,-17,4,4,-21,7,-23,16,-19,0,47,42,-12,50,39,-16,12,-42,3,-2,-6, 
  /* [0][1][][] */ 125,6,0,-98,14,-27,36,-16,10,9,-13,53,-5,0,19,-33,0,-49,-59,-86,12,-72,-124,-18,5,98,-15,-127,-9,32,11,-108,16,-53,-2,127,-3,59,-42,40,-62,-127,38,-88,-44,-15,-13,-5, 26,-127,-127,115,-127,-127,-127,-127,-127,-96,127,-127,127,127,34,-127,-82,127,127,-107,127,127,112,127,127,-127,-127,28,-127,-127,94,127,-127,127,-29,-42,127,-127,127,127,127,-79,127,127,127,-121,101,106, 53,5,49,-13,5,-61,44,19,-23,14,-106,-8,1,-40,127,4,62,-65,-70,84,14,-45,11,-32,2,6,-38,68,20,39,0,3,32,-44,8,66,-5,64,68,-9,-81,9,-85,-32,28,-17,-11,5, 
  /* [0][2][][] */ -52,-7,25,-16,7,35,-37,22,9,-24,11,32,8,-6,-37,17,4,21,-14,105,7,-31,-16,-12,-3,22,0,50,-10,2,46,-32,-18,-43,-32,-41,0,31,8,-21,9,-6,41,-37,-35,18,-10,18, 68,127,74,21,16,-20,125,35,19,-3,43,26,-6,0,-90,24,-58,-57,-36,123,-37,49,12,20,33,-62,-40,28,76,0,127,22,85,-26,7,-37,-25,-17,-14,118,-28,-13,-41,45,22,-32,8,-127, -41,-4,6,-4,5,-4,-62,8,-17,-10,-40,-40,21,-9,-8,11,32,23,-9,-127,24,-10,4,-8,-6,11,-10,-55,-14,7,6,9,-20,87,-37,-24,-4,36,23,-59,4,9,-38,7,-41,127,-5,-4, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.013292437419295311, 0.01093650609254837, 0.0077934958972036839, 0.0087215099483728409, 0.0046107172966003418, 0.0040261680260300636, 0.024823423475027084, 0.0052469824440777302, 0.005578494630753994, 0.0057670809328556061, 0.0030442832503467798, 0.0064065190963447094, 0.011156446300446987, 0.0066821775399148464, 0.0041295182891190052, 0.0062530599534511566, 0.0095445588231086731, 0.0094662206247448921, 0.0025906064547598362, 0.0067581045441329479, 0.0083826221525669098, 0.006567046046257019, 0.0063711176626384258, 0.0054576359689235687, 0.0066761234775185585, 0.0052180662751197815, 0.025919457897543907, 0.0039760051295161247, 0.0074863126501441002, 0.018081728368997574, 0.0046521890908479691, 0.0068118693307042122, 0.023728927597403526, 0.0061955074779689312, 0.0077608581632375717, 0.0072749932296574116, 0.013966242782771587, 0.0061604282818734646, 0.0117003433406353, 0.00083305983571335673, 0.0045277378521859646, 0.0023178821429610252, 0.0052685053087770939, 0.005192391574382782, 0.0062764491885900497, 0.0042387214489281178, 0.011140643619000912, 0.0037335692904889584, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 45527, 6935, 6666, 6835, 1467, 8943, -2080, -206, 1066, 2012, 3236, 259, 1740, -712, 867, -1878, 4648, 11078, -249, 22342, 4310, 2258, 8218, -473, 3380, 4450, 22148, 8031, -49, -2605, 101, 1799, -1848, 8148, 2813, 5770, 7100, 3894, 19576, 1851, -924, 2408, 1053, 3320, 4304, 2403, -1492, 2350, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 9.4866038125474006e-05, 0.00032894345349632204, 0.00023401086218655109, 0.00046801514690741897, 0.0015251022996380925, 0.00056403514463454485, 0.00093496619956567883, 0.0012458806158974767, 0.00057300162734463811, 0.00065256981179118156, 0.00069893745239824057, 0.00054013938643038273, 0.0005714322323910892, 0.00063927768496796489, 0.0005505075678229332, 0.0019507603719830513, 0.00035158012178726494, 0.00038428886909969151, 0.0021689990535378456, 0.00012065318151144311, 0.0002845072012860328, 0.00043612462468445301, 0.00048239930765703321, 0.0010761418379843235, 0.00036212761187925935, 0.00025545273092575371, 0.00018176711455453187, 0.00045362761011347175, 0.00089684495469555259, 0.0010026493109762669, 0.00059573253383859992, 0.00046288242447189987, 0.0010704257292672992, 0.00027071649674326181, 0.00037355424137786031, 0.00032053748145699501, 0.00051510328194126487, 0.00034240170498378575, 0.0001196460725623183, 0.0024579663295298815, 0.00063798634801059961, 0.0011549298651516438, 0.00047241122229024768, 0.00045808515278622508, 0.00028096098685637116, 0.00045020307879894972, 0.00075208616908639669, 0.0011222169268876314, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 60,31,-6,-15,127,28,-32,-24, 
  /* [1][0][][] */ -2,4,4,127,3,-7,5,9, 
  /* [2][0][][] */ 31,-127,-23,43,-4,-80,84,17, 
  /* [3][0][][] */ 127,-23,-6,12,-14,-30,30,2, 
  /* [4][0][][] */ 17,-50,127,-6,-7,-42,19,-95, 
  /* [5][0][][] */ 57,1,12,-7,127,29,-14,-3, 
  /* [6][0][][] */ -22,116,-20,127,48,64,-93,-67, 
  /* [7][0][][] */ -3,127,-1,4,0,-16,16,0, 
  /* [8][0][][] */ 127,65,-9,-4,-64,-18,2,-47, 
  /* [9][0][][] */ -127,-1,6,26,49,17,-3,9, 
  /* [10][0][][] */ -77,-5,23,127,41,21,-15,1, 
  /* [11][0][][] */ -127,10,16,-51,35,19,-18,-57, 
  /* [12][0][][] */ 127,22,-2,8,-45,-11,7,-44, 
  /* [13][0][][] */ -11,88,-127,-13,8,105,-65,75, 
  /* [14][0][][] */ -61,-34,-1,127,24,18,-21,-24, 
  /* [15][0][][] */ -5,127,3,-6,1,-18,8,-48, 
  /* [16][0][][] */ -7,-127,-24,-2,-16,-90,96,-15, 
  /* [17][0][][] */ 18,127,0,-8,9,76,-84,-22, 
  /* [18][0][][] */ -6,45,-127,-5,7,59,-25,57, 
  /* [19][0][][] */ -85,31,-6,-7,-127,0,18,15, 
  /* [20][0][][] */ -127,-33,-4,-3,71,-21,36,1, 
  /* [21][0][][] */ -58,-6,-6,-1,-127,0,18,-7, 
  /* [22][0][][] */ -127,-19,11,5,88,-12,26,48, 
  /* [23][0][][] */ -18,-26,-7,-5,-14,79,-127,-86, 
  /* [24][0][][] */ -7,43,-127,-1,12,49,-15,74, 
  /* [25][0][][] */ 96,-34,-14,127,-75,-26,0,-50, 
  /* [26][0][][] */ 4,-19,-3,3,-6,124,127,-32, 
  /* [27][0][][] */ 58,-3,-16,1,127,13,45,-14, 
  /* [28][0][][] */ 7,127,-59,2,1,84,-35,117, 
  /* [29][0][][] */ -6,14,-5,-5,-5,97,-127,-95, 
  /* [30][0][][] */ 1,-4,2,-127,-9,-2,-1,-15, 
  /* [31][0][][] */ -55,1,9,7,-127,12,10,-3, 
  /* [32][0][][] */ -10,35,6,-127,-7,30,-88,-98, 
  /* [33][0][][] */ -62,8,-3,-7,-127,47,50,-11, 
  /* [34][0][][] */ -127,71,9,20,47,-12,6,-2, 
  /* [35][0][][] */ -19,127,-2,0,-6,-88,43,-28, 
  /* [36][0][][] */ -1,47,9,-23,-7,94,-127,-30, 
  /* [37][0][][] */ 29,-60,-9,19,25,-111,127,-27, 
  /* [38][0][][] */ 16,-127,7,13,6,66,-60,56, 
  /* [39][0][][] */ 7,-127,-14,-8,-8,-4,-48,-103, 
  /* [40][0][][] */ 113,46,0,1,-63,75,-127,-105, 
  /* [41][0][][] */ 16,-120,18,-10,-11,94,-66,127, 
  /* [42][0][][] */ 45,-13,-6,-127,-43,-8,-5,-19, 
  /* [43][0][][] */ -90,-13,9,-127,45,11,-8,-21, 
  /* [44][0][][] */ -11,-28,-6,19,-38,111,127,-20, 
  /* [45][0][][] */ -127,-54,-10,-1,28,-14,33,6, 
  /* [46][0][][] */ 12,88,127,9,-1,20,-2,18, 
  /* [47][0][][] */ -1,-5,9,127,14,4,6,5, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00021462595032062382, 0.00074420520104467869, 0.00052942871116101742, 0.001058842521160841, 0.0034504078794270754, 0.0012760792160406709, 0.002115277573466301, 0.0028186936397105455, 0.0012963650515303016, 0.0014763809740543365, 0.0015812836354598403, 0.0012220172211527824, 0.0012928145006299019, 0.0014463086845353246, 0.0012454742100089788, 0.0044134212657809258, 0.00079541868763044477, 0.00086941925110295415, 0.0049071670509874821, 0.00027296706684865057, 0.00064367218874394894, 0.00098669307772070169, 0.0010913853766396642, 0.002434674883261323, 0.00081928138388320804, 0.00057793903397396207, 0.00041123188566416502, 0.0010262919822707772, 0.0020290317479521036, 0.0022684046998620033, 0.0013477917527779937, 0.0010472302092239261, 0.0024217427708208561, 0.00061247195117175579, 0.00084513315232470632, 0.00072518747765570879, 0.0011653752299025655, 0.00077465333743020892, 0.00027068855706602335, 0.0055609294213354588, 0.0014433872420340776, 0.0026129258330911398, 0.0010687882313504815, 0.0010363768087700009, 0.00063564913580194116, 0.0010185443097725511, 0.001701527857221663, 0.0025389157235622406, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { -4543, -27412, 21345, 23761, 4799, 2080, 39333, 5272, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.0013259861152619123, 0.00065530545543879271, 0.0013467681128531694, 0.0011293294373899698, 0.00096826150547713041, 0.001090208301320672, 0.00081660249270498753, 0.0009010378853417933, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -13,1,10,-91,8,24,8,3,1,5,5,-5,92,0,4,8,0,-8,-3,2,77,-4,-4,7,32,35,12,10,5,3,0,-127,10,7,1,2,-27,3,-16,34,11,-28,-7,6,4,-1,4,2, 
  /* [1][0][][] */ -33,-6,-2,-5,45,22,-31,81,17,4,-29,-27,13,0,15,39,0,40,16,-52,-1,23,127,20,-29,2,54,3,22,-6,19,-11,16,-9,-9,-18,4,-52,16,2,-4,-8,-81,-10,-39,9,-49,-96, 
  /* [2][0][][] */ -55,16,-5,8,40,-7,25,26,-7,54,8,-7,3,0,1,46,0,13,-127,21,-2,13,6,-13,-29,2,36,3,7,30,17,1,9,-6,-14,-13,9,3,8,0,35,-4,-33,-3,17,-50,24,13, 
  /* [3][0][][] */ 0,-1,-1,9,-8,20,3,-6,63,19,0,-3,27,0,-28,-10,0,2,-9,3,0,3,5,-16,-12,-2,-9,-1,-8,-1,-3,-7,-51,49,-60,4,6,1,-1,-127,-2,2,3,-52,1,-2,3,12, 
  /* [4][0][][] */ -2,-5,79,38,1,-21,1,-7,2,-2,0,-6,-83,0,-7,6,0,7,5,5,66,2,-2,-2,-13,27,-6,48,-6,-2,-1,96,1,3,0,-2,16,-11,-14,-17,0,-127,4,6,4,-3,6,1, 
  /* [5][0][][] */ -9,41,5,-9,2,51,23,12,-19,33,7,58,25,0,-127,1,0,12,-38,19,-9,9,-13,43,-20,-3,28,-5,-18,24,24,-17,48,32,-38,-5,5,15,-51,17,26,-13,-13,31,21,58,20,22, 
  /* [6][0][][] */ -25,-59,3,8,40,-46,-21,7,30,-24,-15,91,-6,0,-127,42,0,-10,52,-21,-2,0,26,-33,34,-2,-5,-9,44,-11,-12,-2,95,-32,30,-1,1,-13,-76,-23,-16,-18,-5,-28,-19,-86,-22,-31, 
  /* [7][0][][] */ -110,-23,-10,9,127,16,63,29,12,5,23,-32,-25,0,88,99,0,18,1,60,-9,5,-27,48,19,12,45,11,49,62,53,-7,-12,-20,-19,-22,9,18,29,36,71,2,-29,-7,55,4,62,76, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.056354410946369171, 0.027850480750203133, 0.057237643748521805, 0.047996502369642258, 0.04115111380815506, 0.046333853155374527, 0.034705605357885361, 0.03829411044716835, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 73888, 56655, 62130, 41319, 148, 13727, 1795, 32378, 26022, 36453, 29565, 3656, -45249, -127, 48900, 257, -204, 41931, -309, 1991, -14756, 17342, 43994, 41854, -20043, 35745, 44579, 23096, -2334, 15507, -7056, -51167, 14014, 105723, 25242, 1191, 62672, -169, 131466, -27892, 14490, -27921, 536, 104521, -2133, 79857, 1607, -22512, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.2270657003391534e-05, 7.1436457801610231e-05, 0.00014877463399898261, 0.00011606772022787482, 0.00012800325930584222, 0.00016876267909538001, 0.00012939775479026139, 5.7365079555893317e-05, 8.6056032159831375e-05, 3.2379866752307862e-05, 8.5591040260624141e-05, 2.7136171411257237e-05, 0.00017022255633492023, 0.005541567225009203, 5.2250408771215007e-05, 0.00019164000696036965, 0.0027484172023832798, 2.1159537936910056e-05, 0.0001062169176293537, 0.00018643254588823766, 0.00011298312892904505, 0.0001571687898831442, 0.00013651163317263126, 3.5982684494229034e-05, 8.9901601313613355e-05, 7.8562276030424982e-05, 3.5012748412555084e-05, 4.3291671318002045e-05, 0.00027049766504205763, 4.6742999984417111e-05, 3.9199156162794679e-05, 0.00020314505673013628, 0.00017761265917215496, 1.2226400031067897e-05, 9.0824389189947397e-05, 0.00020963670976925641, 1.5138441995077301e-05, 0.00042887049494311213, 3.530015965225175e-05, 9.6681505965534598e-05, 5.777343176305294e-05, 0.00021089368965476751, 0.0001400270703015849, 1.2347725714789703e-05, 0.00013746158219873905, 7.5412630394566804e-05, 0.00020019951625727117, 0.00014563644072040915, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -43,-23,-6,-15,8,-39,-79,-68,-28,-50,7,66,34,-71,116,-43,-113,-83,37,-8,-1,-71,-112,-79,-35,-125,-63,-20,70,15,95,26,-127,-88,-8,53,17,47,-127,77,-77,-14,105,-109,-1,-34,-87,109, 74,11,-28,-28,57,-127,-127,-82,62,-77,-116,110,38,-82,-1,62,-52,-113,59,7,10,-110,-127,-72,-5,-127,-118,-39,-55,21,-57,53,28,-127,65,83,13,72,-91,127,-127,7,123,-127,2,-23,-127,96, -33,42,7,-5,-65,-109,-59,-18,88,-9,-127,39,7,-71,-101,-11,-127,-25,28,12,-15,-75,-36,-24,-12,-32,-59,-12,-10,18,-24,10,106,-86,71,32,14,35,-6,16,-78,3,7,-78,-17,6,-55,15, 
  /* [0][1][][] */ -86,-127,-44,-44,-10,55,99,-106,-26,-106,-21,113,89,-64,28,-97,-121,-93,89,-77,41,-88,-104,-127,42,-117,-79,-37,127,-60,127,85,-43,-84,-15,86,-35,-77,-107,89,42,59,104,-109,-90,-116,81,120, 127,-83,-127,-127,127,41,94,-127,101,-127,-110,127,127,-14,-7,127,-60,-127,127,-127,127,-127,-121,-119,127,-96,-127,-127,-122,-127,-71,127,28,-111,127,127,-67,-127,-97,89,61,127,127,-115,-113,-127,125,127, -54,30,-61,-85,-120,-23,31,-39,127,-21,-75,37,55,-70,-26,-43,-37,-29,54,-72,57,-83,-39,-25,48,-7,-46,-61,15,-90,-35,21,30,-99,118,24,-35,-63,0,-15,36,53,10,-73,-57,-37,65,35, 
  /* [0][2][][] */ -61,-107,-34,-33,1,34,-5,-36,-38,-60,-16,63,75,-127,-127,-63,-43,-19,64,74,51,-33,-14,-61,32,-54,-13,-59,75,28,77,63,106,-27,-39,-10,-94,35,-17,30,9,38,15,-54,97,-78,4,31, 88,-73,-88,-83,81,19,6,-48,49,-70,-32,58,83,-26,17,93,-24,-30,77,117,80,-52,-19,-57,93,-65,-20,-101,-51,40,-46,111,-18,-48,67,5,-127,50,-15,-1,11,32,15,-67,127,-101,-12,41, -29,28,-42,-35,-79,-19,21,-12,59,-6,-12,34,30,-43,112,-28,-93,-6,30,59,73,-28,-2,-4,42,1,-6,-66,-13,29,-19,40,-89,-44,65,2,-20,21,26,-39,7,35,-5,-15,62,-35,-4,18, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0034965029917657375, 0.0030360494274646044, 0.0063229217194020748, 0.0049328780733048916, 0.0054401382803916931, 0.0071724136359989643, 0.005499404389411211, 0.0024380157701671124, 0.0036573812831193209, 0.0013761443551629782, 0.0036376190837472677, 0.0011532872449606657, 0.0072344588115811348, 0.23551659286022186, 0.0022206422872841358, 0.0081446999683976173, 0.1168077290058136, 0.00089928036322817206, 0.0045142187736928463, 0.0079233832657337189, 0.0048017827793955803, 0.0066796732135117054, 0.0058017442934215069, 0.0015292640309780836, 0.0038208179175853729, 0.003338896669447422, 0.0014880418311804533, 0.0018398959655314684, 0.011496150866150856, 0.001986577408388257, 0.0016659641405567527, 0.0086336648091673851, 0.0075485375709831715, 0.00051962200086563826, 0.0038600366096943617, 0.0089095598086714745, 0.00064338376978412271, 0.018226996064186096, 0.0015002568252384663, 0.0041089639998972416, 0.0024553707335144281, 0.0089629814028739929, 0.0059511503204703331, 0.00052477832650765777, 0.0058421171270310879, 0.0032050367444753647, 0.0085084792226552963, 0.0061895488761365414, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { 4736, 84, 10961, 6351, 7328, 7174, 11431, -31, -19, -319, 2202, 472, 11885, -84105064, 2793, 21049, -67893976, -108, -514, 13710, 3793, -13, -54, 429, 3531, -789, 58, 714, 4208, 1651, 2536, 14842, 4116, 346, 296, -2206, 439, 4296, -154, 12762, 2061, 12260, -449, -95, 14232, 185, 11268, 4079, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00044673884985968471, 0.00043544502113945782, 0.00028770213248208165, 0.00028951873537153006, 0.00026986098964698613, 0.00029016874032095075, 0.00033268349943682551, 0.0013105554971843958, 0.00039295485476031899, 0.0023810891434550285, 0.00066362682264298201, 0.0018399946857243776, 0.00018410652410238981, 1.9283459273822245e-09, 0.00094194232951849699, 0.00015700580843258649, 1.9283459273822245e-09, 0.0065453848801553249, 0.00040489641833119094, 0.00028024159837514162, 0.00027699951897375286, 0.0050021563656628132, 0.00035066730924881995, 0.0014605085598304868, 0.0010669376933947206, 0.0006561421905644238, 0.0024033912923187017, 0.0017453604377806187, 0.00026788920513354242, 0.0017683919286355376, 0.0011701477924361825, 0.0001592400367371738, 0.00018470744544174522, 0.0091699641197919846, 0.00046509347157552838, 0.00054236326832324266, 0.0034637250937521458, 0.00030125395278446376, 0.0025572716258466244, 0.00027166923973709345, 0.0013789583463221788, 0.00018149742390960455, 0.00039196465513668954, 0.0088175041601061821, 0.0003531255351845175, 0.00051105383317917585, 0.00024770761956460774, 0.00021234279847703874, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 19,-127,48,-44,20,-13,-49,25, 
  /* [1][0][][] */ 68,62,-24,-91,16,-15,-76,127, 
  /* [2][0][][] */ 32,6,-51,127,55,126,45,95, 
  /* [3][0][][] */ 80,74,-80,127,-93,-10,-10,13, 
  /* [4][0][][] */ -33,-98,72,4,10,41,-39,-127, 
  /* [5][0][][] */ 20,-2,-37,49,3,-29,44,127, 
  /* [6][0][][] */ 55,-12,-126,-67,127,21,42,-17, 
  /* [7][0][][] */ 127,15,14,-23,28,-9,86,-63, 
  /* [8][0][][] */ 17,-97,10,99,8,15,-16,-127, 
  /* [9][0][][] */ 97,-127,6,-5,-5,13,-116,84, 
  /* [10][0][][] */ -127,-35,-113,25,-2,7,-105,64, 
  /* [11][0][][] */ -16,-46,-11,-108,-127,-41,44,-20, 
  /* [12][0][][] */ 19,-1,-42,64,-61,-29,56,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -2,-39,-12,9,40,127,44,37, 
  /* [15][0][][] */ 44,2,17,-127,73,36,-59,74, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 12,31,127,19,-24,-8,27,28, 
  /* [18][0][][] */ 87,-127,21,31,2,16,-114,8, 
  /* [19][0][][] */ -127,-6,48,80,-61,-73,-105,82, 
  /* [20][0][][] */ 38,32,-39,117,-17,-127,-4,60, 
  /* [21][0][][] */ 55,21,127,8,-12,-14,63,10, 
  /* [22][0][][] */ -72,-18,-127,1,5,11,-96,2, 
  /* [23][0][][] */ -101,127,-21,-21,10,-7,125,-81, 
  /* [24][0][][] */ 10,-54,-50,82,-4,-62,98,127, 
  /* [25][0][][] */ 18,37,41,32,126,127,-74,-57, 
  /* [26][0][][] */ -88,-31,-127,1,4,19,-92,-1, 
  /* [27][0][][] */ 4,-24,-24,6,-52,127,71,55, 
  /* [28][0][][] */ 2,-21,-19,44,17,127,50,58, 
  /* [29][0][][] */ 93,29,127,1,-18,-10,91,-9, 
  /* [30][0][][] */ -83,127,-19,-29,9,-9,101,-47, 
  /* [31][0][][] */ -49,-100,-28,2,45,-70,127,108, 
  /* [32][0][][] */ 10,10,-60,122,-20,102,94,127, 
  /* [33][0][][] */ 0,64,-14,-107,7,-11,-6,127, 
  /* [34][0][][] */ -24,84,2,-94,27,-4,14,127, 
  /* [35][0][][] */ 127,9,-13,-38,20,17,100,-49, 
  /* [36][0][][] */ -121,-3,34,55,-36,18,-127,87, 
  /* [37][0][][] */ -3,-31,-10,38,30,127,53,59, 
  /* [38][0][][] */ 9,18,0,77,127,3,-17,37, 
  /* [39][0][][] */ -4,25,28,-127,21,3,-37,108, 
  /* [40][0][][] */ 91,27,127,8,-7,0,88,-9, 
  /* [41][0][][] */ -3,-29,-25,80,44,127,68,103, 
  /* [42][0][][] */ -77,1,127,13,-33,16,-25,60, 
  /* [43][0][][] */ -8,-52,7,96,-16,-7,11,-127, 
  /* [44][0][][] */ 36,2,-75,-127,62,1,9,-112, 
  /* [45][0][][] */ -86,127,-5,-51,14,4,81,-62, 
  /* [46][0][][] */ -127,-22,34,22,-22,37,-94,44, 
  /* [47][0][][] */ 117,22,120,-3,21,-27,127,-18, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.00091208447702229023, 0.00088902644347399473, 0.00058738712687045336, 0.00059109600260853767, 0.00055096176220104098, 0.00059242307906970382, 0.00067922333255410194, 0.0026756960432976484, 0.00080227636499330401, 0.0048613511025905609, 0.0013548939023166895, 0.0037566255778074265, 0.00037588112172670662, 3.937008052901092e-09, 0.0019231167389079928, 0.00032055095653049648, 3.937008052901092e-09, 0.013363386504352093, 0.00082665687659755349, 0.00057215534616261721, 0.00056553614558652043, 0.010212653316557407, 0.00071594002656638622, 0.0029818476177752018, 0.0021783136762678623, 0.0013396128779277205, 0.0049068843945860863, 0.0035634154919534922, 0.00054693606216460466, 0.003610437735915184, 0.0023890326265245676, 0.00032511245808564126, 0.00037710799369961023, 0.018721859902143478, 0.00094955821987241507, 0.0011073161149397492, 0.0070717153139412403, 0.00061505520716309547, 0.0052210544236004353, 0.00055465358309447765, 0.0028153506573289633, 0.00037055424763821065, 0.00080025475472211838, 0.018002258613705635, 0.00072095886571332812, 0.0010433931602165103, 0.00050573231419548392, 0.00043352972716093063, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { -331, -43363, -7155, -13241, -33143, -1688, -25455, -26326, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.0019295915262773633, 0.0020608929917216301, 0.0024520799051970243, 0.0010754400864243507, 0.0011360731441527605, 0.0021259395871311426, 0.0013392502442002296, 0.0009677816997282207, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ 0,-19,2,-1,127,-4,-1,-1,1,-124,-92,-2,0,119,-5,0, 
  /* [1][0][][] */ 0,-27,1,82,74,13,19,7,0,-2,127,-43,0,32,-7,0, 
  /* [2][0][][] */ 0,1,-1,-10,-61,2,9,1,1,3,-17,0,0,127,-10,0, 
  /* [3][0][][] */ 0,-4,-22,-127,86,17,74,13,-2,65,-3,42,0,0,23,0, 
  /* [4][0][][] */ 0,57,-25,37,-55,25,127,6,0,-60,16,-9,0,-9,29,0, 
  /* [5][0][][] */ 0,-17,-10,0,-21,-21,-16,15,0,10,-5,-41,0,-5,127,0, 
  /* [6][0][][] */ 0,13,-2,-2,52,-15,-24,-4,3,-116,121,65,0,127,56,0, 
  /* [7][0][][] */ 0,14,-14,127,2,-5,17,8,-2,64,-52,75,0,-10,51,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.082007639110088348, 0.087587952613830566, 0.10421339422464371, 0.045706205070018768, 0.048283107578754425, 0.090352430939674377, 0.056918133050203323, 0.041130721569061279, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[16] = { -161, 26496, 33732, 15111, 10695, 60959, 13973, 54343, -8176, 7227, 29557, 14164, -445, 26701, 11002, -107, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0018688903655856848, 9.920084266923368e-05, 0.00011866541171912104, 0.000234808205277659, 0.0001647738681640476, 5.4326534154824913e-05, 0.00036998861469328403, 7.175951759563759e-05, 2.1705507606384344e-05, 0.00025163136888295412, 0.00019978337513748556, 0.00073178875027224422, 0.00072724185883998871, 0.00023452803725376725, 0.00018981783068738878, 0.003907486330717802, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -108,18,-82,-127,39,-67,80,-76,-89,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-84,127,-127,52,-105,5,127,-25, 24,-24,92,-2,-72,67,-95,77,-94,-27,3,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,16,-29,14,-28,1,3,-109,-49,8,-30,-14, -78,-42,-57,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,66,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,32,-2,-27,40,-34,20,-125,-13,0,84,-58,0,-29,-111, 21,-7,20,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.079427838325500488, 0.0042160358279943466, 0.0050432798452675343, 0.0099793486297130585, 0.0070028891786932945, 0.0023088776506483555, 0.015724515542387962, 0.0030497794505208731, 0.00092248409055173397, 0.010694333352148533, 0.0084907934069633484, 0.03110102005302906, 0.030907778069376945, 0.0099674416705965996, 0.0080672577023506165, 0.16606816649436951, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[16] = { -1073741824, 14716, -93713, 15893, 275710, 11967, 62400, 12949, 294538, 24569, 35429, 521601, -1073741824, 56590, 41238, -1073741824, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 1.3102037232926023e-09, 0.00020219651923980564, 0.00019770921790041029, 4.7400797484442592e-05, 1.1137680303363595e-05, 0.00019728820188902318, 5.6280787248397246e-05, 0.00025680396356619895, 6.6647494350036141e-06, 6.3438543293159455e-05, 8.1727630458772182e-05, 1.1117655958514661e-05, 1.1533876076441629e-09, 6.6796157625503838e-05, 4.4647818867815658e-05, 1.243374708748135e-10, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 48,-3,34, -5,-24,18, -127,-124,-62, 
  /* [1][1][][] */ 2,-5,4, -23,2,1, 3,-30,14, 
  /* [1][2][][] */ -4,18,6, -6,7,4, 42,-16,21, 
  /* [2][0][][] */ 24,-10,-14, 74,109,-7, 31,-46,0, 
  /* [2][1][][] */ 11,13,-6, 75,127,-32, 15,-10,-12, 
  /* [2][2][][] */ 56,-59,21, 85,-35,-18, 31,-56,13, 
  /* [3][0][][] */ 5,32,0, 30,92,19, -9,-3,-11, 
  /* [3][1][][] */ 20,35,3, 63,127,26, -20,-24,1, 
  /* [3][2][][] */ -2,-2,-1, 22,24,7, -4,-6,0, 
  /* [4][0][][] */ 26,60,-10, 3,73,-10, -15,11,10, 
  /* [4][1][][] */ 39,81,54, 28,114,39, 37,60,3, 
  /* [4][2][][] */ 59,81,46, 53,127,28, -10,37,40, 
  /* [5][0][][] */ 8,4,-119, -5,2,-106, -5,31,-27, 
  /* [5][1][][] */ 5,-40,-127, -3,-44,-118, -3,15,-25, 
  /* [5][2][][] */ -1,13,-17, 2,1,-11, 0,15,-11, 
  /* [6][0][][] */ 29,-62,33, 53,-86,39, 12,-20,7, 
  /* [6][1][][] */ 40,-96,60, 69,-127,71, 9,-29,14, 
  /* [6][2][][] */ 21,-35,12, 15,-45,25, -14,5,-4, 
  /* [7][0][][] */ -29,17,2, -105,-39,-5, -22,24,1, 
  /* [7][1][][] */ -11,-6,0, -127,-92,-13, -6,-6,2, 
  /* [7][2][][] */ -22,30,-9, -13,9,-4, -20,25,-6, 
  /* [8][0][][] */ -51,-64,-109, -53,-71,-114, -48,-72,-113, 
  /* [8][1][][] */ -48,-61,-111, -51,-67,-117, -23,-68,-113, 
  /* [8][2][][] */ -37,-73,-120, -43,-81,-126, -37,-68,-127, 
  /* [9][0][][] */ -20,-6,3, -10,-7,-6, 5,4,-12, 
  /* [9][1][][] */ 92,105,-17, 79,127,11, -8,17,21, 
  /* [9][2][][] */ -33,-34,7, -3,-38,-9, 7,-1,-27, 
  /* [10][0][][] */ -24,-82,-17, 34,95,21, -8,-12,-1, 
  /* [10][1][][] */ -59,-102,-13, 79,127,15, -16,-26,1, 
  /* [10][2][][] */ -31,-19,3, 36,23,-10, -8,0,8, 
  /* [11][0][][] */ -11,-21,-2, 12,-37,5, 12,-94,-51, 
  /* [11][1][][] */ -45,-39,-20, -33,-58,-37, -12,-55,-51, 
  /* [11][2][][] */ -3,-35,-72, 119,127,67, -33,17,-41, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-96,-18, -61,-110,-25, -9,-17,-5, 
  /* [13][1][][] */ 61,114,15, 57,127,24, 7,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-18,-2, 0,4,-4, 
  /* [14][0][][] */ 44,-5,-37, 78,-24,-48, 32,-8,-19, 
  /* [14][1][][] */ 88,-15,-72, 127,-36,-85, 58,-17,-37, 
  /* [14][2][][] */ 53,-9,-46, 73,-20,-51, 24,-6,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant43_scale = { 16, { 3.3410194077987398e-07, 0.051560107618570328, 0.050415847450494766, 0.012087202630937099, 0.0028401082381606102, 0.050308488309383392, 0.014351599849760532, 0.065485008060932159, 0.0016995109617710114, 0.016176827251911163, 0.020840544253587723, 0.0028350020293146372, 2.9411381774480105e-07, 0.017033020034432411, 0.011385193094611168, 3.1706054670621597e-08, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.4897998571395874, } };
const TfArray<1, int> quant46_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.44200637936592102, } };
const TfArray<1, int> quant50_zero = { 1, { 7 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.56165558099746704, } };
const TfArray<1, int> quant53_zero = { 1, { -43 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.53269869089126587, } };
const TfArray<1, int> quant54_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.27013024687767029, } };
const TfArray<1, int> quant58_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.20951737463474274, } };
const TfArray<1, int> quant61_zero = { 1, { -29 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.29589766263961792, } };
const TfArray<1, int> quant62_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.22878864407539368, } };
const TfArray<1, int> quant65_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.32548877596855164, } };
const TfArray<1, int> quant66_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.039152700453996658, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10601901262998581, } };
const TfArray<1, int> quant69_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
